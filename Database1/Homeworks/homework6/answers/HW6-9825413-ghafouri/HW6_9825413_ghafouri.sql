---- DATABASE DESIGN 1 @ IUT Homework6
---- YOUR NAME:hadis ghafouri
---- YOUR STUDENT NUMBER: 9825413


---- Q1
create table trader(
	trader_id char(10) primary key,
	trader_name varchar(20),
	birth_date date check(birth_date >= '1900-01-01'),
	Joined_date date check(Joined_date > birth_date),
	Salary numeric(8,2) check(Salary>= 1000)
);


insert into trader values(1111,'hadi','1899-05-04','2019-01-01',2000);


---- Q2
create function timeCheck(course_id char)
returns boolean
language plpgsql
as
$$
declare
   isRight boolean;
begin
   select 
   	course_id in(
		select section.course_id
		from section inner join time_slot using(time_slot_id)
		where start_hr>=9
	)
   into isRight;
   
   return isRight;
end;
$$;


 alter table section 
  add constraint time_check
 check(
	timeCheck(course_id) ='True'
 )
 
-----second way with subquery
 alter table section 
  add constraint time_check
 check(
	   	course_id in(
		select section.course_id
		from section inner join time_slot using(time_slot_id)
		where start_hr>=9
	)
 )



---- Q3
select concat(first_name,' ',last_name) as full_name,film.title
from customer inner join rental using(customer_id)
inner join payment using(rental_id)
inner join inventory using(inventory_id)
inner join film using(film_id)
where (payment_date - rental_date > INTERVAL '1 year 3 months 15 days' )
order by full_name;



---- Q5

create index idx_title using hash
on film(title);

explain analyze select *
from film
where title='Chamber Italian';


---- Q6
select
    tablename,
    indexname,
    indexdef
from
    pg_indexes
where
    schemaname = 'sales'
order by
    tablename,
    indexname;


---- Q7
---A
create role role1 login password '1234';
grant select on instructor to role1 with grant option;

---B
 create role role2 login password '1234';
 grant role1 to role2;
grant insert,delete,update on instructor,course to role2;

---C
create role role3 login password '1234';
grant update (dept_name) on student to role3;
revoke update (dept_name) on student from role3;


---D
 create view specific_students as
 (
	select name,course.title
	from takes inner join student using(id)
	 inner join course using(course_id)
	where student.dept_name in('Comp. Sci.','Elec. Eng.')
 );

create role role4 login password '1234';
grant select on specific_students to role4;	
	
---- Q8

---A
create table accounts(
	id int generated by default as identity,
	name varchar(100) not null,
	balance dec(15,3) not null,
	primary key(id)
);


Insert into accounts (name, balance) values ('Amir', 1000);
Insert into accounts (name, balance) values ('Ali', 1000);

---B
begin;

update accounts
set balance = balance -200
where name ='Amir';
---where id=1;


update accounts
set balance = balance +200
where name ='Ali';
---where id=2;

select id,name,balance
from accounts
commit;

ROLLBACK;

select id, name, balance
 from accounts;

---C

begin;
update accounts
set balance = balance -150
where name ='Ali';
---where id=2;

update accounts
set balance = balance +150
where name ='Amir';
---where id=1;
rollback;
commit;

select id,name,balance
from accounts;

---Q9
create or replace function showCustomers(region varchar(20))
returns table(first_name varchar(20), last_name varchar(20), title varchar(100))
language plpgsql
as
$$
begin
return query
select c1.first_name,c1.last_name,f1.title
from customer c1 inner join rental using(customer_id)
inner join inventory using(inventory_id)
inner join film f1 using(film_id)
inner join address using(address_id)
where rental_date = (
select max(rental_date)
from customer c2 inner join rental using(customer_id)
where c1.customer_id = c2.customer_id
group by customer_id
)
 and address.district = showCustomers.region;   
end;
$$



select * from showCustomers('Texas')
select * from showCustomers('Alberta');


---Q10
create or replace procedure switch_rating(
	film1 varchar,
	film2 varchar
)
language plpgsql
as $$
declare 
	 temp_rating1 mpaa_rating;
	temp_rating2 mpaa_rating;
begin
	
	select rating into temp_rating1
	from film
	where title = film1;
	
	select rating into temp_rating2
	from film
	where title = film2;
	
	
	update film
	set rating =temp_rating2
	where title = film1;
		
	update film
	set rating = temp_rating1
	where title = film2;
	
commit;
end;$$


call switch_rating('Airport Pollock','Bright Encounters');


 select title,rating from film
where title in ('Airport Pollock','Bright Encounters');


