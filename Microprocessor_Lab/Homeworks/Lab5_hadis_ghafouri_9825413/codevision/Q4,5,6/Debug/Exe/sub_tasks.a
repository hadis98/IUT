;#include "sub_tasks.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// question5 variables
;int timer2OF_counter = 0;
;
;//question6 variables
;bool has_timer1_overflow = false;
;int ICR1L_DATA, ICR1H_DATA;
;int ICR_DATA1 = 0, ICR_DATA2 = 0;
;float period;
;int old_speed = 0, new_speed = 0, lcd_display_limit = 0;
;char lcd_output[16];
;
;// Timer1 overflow interrupt service routine
;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
; 0002 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0011 
; 0002 0012     has_timer1_overflow = true;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 0013 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Timer1 input capture interrupt service routine
;interrupt[TIM1_CAPT] void timer1_capt_isr(void)
; 0002 0017 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0018     q6_handle_timer1_capture();
;PCODE: $00000016 VOL: 0
; 0002 0019 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
; 0002 001D {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 001E     TCNT2 = 0x06;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 001F     timer2OF_counter++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 0020 
; 0002 0021     if (timer2OF_counter == 26) // counter should go to 25 in order to have 100ms
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0022         timer2OF_counter = 0;
;PCODE: $00000024 VOL: 0
; 0002 0023 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;void q3_custom_pwm_wave(int custom_duty)
; 0002 0026 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0027     OCR0 = (custom_duty * 2.55) + 0.5;
;PCODE: $0000002B VOL: 0
;	custom_duty -> Y+0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 0028 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void q4_subTask()
; 0002 002B {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 002C     // OCR0 = 2.55 * duty-cycle (approximately)
; 0002 002D     // duty-cycle = (100/255) * port_data
; 0002 002E     // => OCR0 = port_data
; 0002 002F     OCR0 = PINA;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 0030 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void q5_subTask()
; 0002 0033 {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0034     // step = 10 => pulse per cycle = 360/10 = 36
; 0002 0035     // Speed(rpm) = S
; 0002 0036     // T or Time between sending pulse = 100ms=0.1s => 0.1 = 60 / (S * 36) => S=16
; 0002 0037     lcd_gotoxy(0, 0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 0038     lcd_puts("S(SP): 16rpm");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 0039     two_phase_step();
;PCODE: $00000046 VOL: 0
; 0002 003A     PORTB = 0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 003B     delay_ms(500);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 003C     two_phase_step_reverse();
;PCODE: $0000004B VOL: 0
; 0002 003D     delay_ms(500);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 003E     PORTB = 0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 003F     lcd_clear();
;PCODE: $00000050 VOL: 0
; 0002 0040 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0

	.DSEG
_0x40004:
	.BYTE 0xD
;
;void two_phase_step()
; 0002 0043 {

	.CSEG
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0044     PORTB = 0x30;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0045     timer2OF_counter = 0;
;PCODE: $00000057 VOL: 0
; 0002 0046     while (timer2OF_counter < 25)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0047         ;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 0048     PORTB = 0x60;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 0049     timer2OF_counter = 0;
;PCODE: $00000060 VOL: 0
; 0002 004A     while (timer2OF_counter < 25)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 004B         ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 004C     PORTB = 0xc0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 004D     timer2OF_counter = 0;
;PCODE: $00000069 VOL: 0
; 0002 004E     while (timer2OF_counter < 25)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 004F         ;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 0050     PORTB = 0x90;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 0051     timer2OF_counter = 0;
;PCODE: $00000072 VOL: 0
; 0002 0052     while (timer2OF_counter < 25)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0002 0053         ;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 0054 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void two_phase_step_reverse()
; 0002 0057 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 0058     PORTB = 0xc0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0059     timer2OF_counter = 0;
;PCODE: $0000007F VOL: 0
; 0002 005A     while (timer2OF_counter < 25)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 005B         ;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0002 005C     PORTB = 0x60;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 005D     timer2OF_counter = 0;
;PCODE: $00000088 VOL: 0
; 0002 005E     while (timer2OF_counter < 25)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0002 005F         ;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0002 0060     PORTB = 0x30;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0002 0061     timer2OF_counter = 0;
;PCODE: $00000091 VOL: 0
; 0002 0062     while (timer2OF_counter < 25)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0002 0063         ;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0002 0064     PORTB = 0x90;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0065     timer2OF_counter = 0;
;PCODE: $0000009A VOL: 0
; 0002 0066     while (timer2OF_counter < 25)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 0067         ;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0068 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void q6_handle_timer1_capture()
; 0002 006B {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 006C     if (has_timer1_overflow == true)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 006D     {
; 0002 006E         has_timer1_overflow = false;
;PCODE: $000000A8 VOL: 0
; 0002 006F         return;
;PCODE: $000000A9 VOL: 0
; 0002 0070     }
; 0002 0071 
; 0002 0072     ICR1L_DATA = ICR1L;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 0073     ICR1H_DATA = ICR1H;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0002 0074 
; 0002 0075     ICR_DATA2 = (ICR1H_DATA << 8) | ICR1L_DATA;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0076     period = ICR_DATA2 - ICR_DATA1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 0077     ICR_DATA1 = ICR_DATA2; // to keep last ICR data
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 0078 
; 0002 0079     // dc motor : 50 pulse per revolution
; 0002 007A     // period = duration of one pulse(in us)
; 0002 007B     // rpm = revolution per minute(60 seconds)
; 0002 007C     // => speed(rpm) = 60 / ((period/1000000) * 50)
; 0002 007D     new_speed = (60 * 1000000) / (period * 50);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0002 007E 
; 0002 007F     if (has_speeds_difference(old_speed, new_speed))
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 0080     {
; 0002 0081         if (lcd_display_limit == 5)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0002 0082         {
; 0002 0083 
; 0002 0084             old_speed = new_speed;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 0085             print_dc_motor_speed(new_speed);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0002 0086             lcd_display_limit = 0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0002 0087         }
; 0002 0088         else
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0002 0089         {
; 0002 008A             lcd_display_limit++;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 008B         }
;PCODE: $000000D9 VOL: 0
; 0002 008C     }
; 0002 008D }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;void print_dc_motor_speed(int speed)
; 0002 0090 {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0002 0091     sprintf(lcd_output, "S(DC)=%d rpm", speed);
;PCODE: $000000DF VOL: 0
;	speed -> Y+0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 0092     lcd_gotoxy(0, 1);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 0093     lcd_puts(lcd_output);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 0094 }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;
;bool has_speeds_difference(int old_speed, int new_speed)
; 0002 0097 {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0002 0098     return (old_speed - new_speed >= 5) || (old_speed - new_speed <= -5);
;PCODE: $000000F7 VOL: 0
;	old_speed -> Y+2
;	new_speed -> Y+0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 0099 }
;PCODE: $00000108 VOL: 0
