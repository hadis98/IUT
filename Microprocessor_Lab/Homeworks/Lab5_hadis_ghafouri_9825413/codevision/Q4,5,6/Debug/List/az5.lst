
AVRASM ver. 2.1.30  C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm Wed Nov 09 16:13:16 2022

C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\az_micro\my_answers\az5_hadis_ghafouri_9825413\codevision\Q4,5,6\Debug\List\az5.asm(1097): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timer2OF_counter=R4
                 	.DEF _timer2OF_counter_msb=R5
                 	.DEF _has_timer1_overflow=R7
                 	.DEF _ICR1L_DATA=R8
                 	.DEF _ICR1L_DATA_msb=R9
                 	.DEF _ICR1H_DATA=R10
                 	.DEF _ICR1H_DATA_msb=R11
                 	.DEF _ICR_DATA1=R12
                 	.DEF _ICR_DATA1_msb=R13
                 	.DEF __lcd_x=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00dc 	JMP  _timer2_ovf_isr
00000a 940c 00c0 	JMP  _timer1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00bb 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x40000:
000038 2853
000039 5053
00003a 3a29
00003b 3120      	.DB  0x53,0x28,0x53,0x50,0x29,0x3A,0x20,0x31
00003c 7236
00003d 6d70
00003e 5300
00003f 4428      	.DB  0x36,0x72,0x70,0x6D,0x0,0x53,0x28,0x44
000040 2943
000041 253d
000042 2064
000043 7072      	.DB  0x43,0x29,0x3D,0x25,0x64,0x20,0x72,0x70
000044 006d      	.DB  0x6D,0x0
                 _0x2000003:
000045 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000046 000a      	.DW  0x0A
000047 0004      	.DW  0x04
000048 0066      	.DW  __REG_VARS*2
                 
000049 000d      	.DW  0x0D
00004a 0160      	.DW  _0x40004
00004b 0070      	.DW  _0x40000*2
                 
00004c 0002      	.DW  0x02
00004d 0189      	.DW  __base_y_G100
00004e 008a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 007d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 11/7/2022
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include "init_configs.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "sub_tasks.h"
                 ;
                 ;void main(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001D #asm("sei");
00007d 9478      	sei
                 ; 0000 001E 
                 ; 0000 001F   init_program_configs();
00007e d006      	RCALL _init_program_configs
                 ; 0000 0020   q5_subTask();
00007f 940e 00f4 	CALL _q5_subTask
                 ; 0000 0021 
                 ; 0000 0022   while (1)
                 _0x3:
                 ; 0000 0023   {
                 ; 0000 0024     q4_subTask();
000081 940e 00f1 	CALL _q4_subTask
                 ; 0000 0025   }
000083 cffd      	RJMP _0x3
                 ; 0000 0026 }
                 _0x6:
000084 cfff      	RJMP _0x6
                 ; .FEND
                 ;#include "init_configs.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void init_program_configs()
                 ; 0001 0004 {
                 
                 	.CSEG
                 _init_program_configs:
                 ; .FSTART _init_program_configs
                 ; 0001 0005     init_ports();
000085 d004      	RCALL _init_ports
                 ; 0001 0006     init_timers();
000086 d013      	RCALL _init_timers
                 ; 0001 0007     init_interrupts();
000087 d02f      	RCALL _init_interrupts
                 ; 0001 0008     init_lcd();
000088 d00d      	RCALL _init_lcd
                 ; 0001 0009 }
000089 9508      	RET
                 ; .FEND
                 ;
                 ;void init_ports()
                 ; 0001 000C {
                 _init_ports:
                 ; .FSTART _init_ports
                 ; 0001 000D     // Input/Output Ports initialization
                 ; 0001 000E     // Port A initialization
                 ; 0001 000F     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0010     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
00008a e0e0      	LDI  R30,LOW(0)
00008b bbea      	OUT  0x1A,R30
                 ; 0001 0011     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0012     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
00008c bbeb      	OUT  0x1B,R30
                 ; 0001 0013 
                 ; 0001 0014     // Port B initialization
                 ; 0001 0015     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0001 0016     DDRB = 0xf8;
00008d efe8      	LDI  R30,LOW(248)
00008e bbe7      	OUT  0x17,R30
                 ; 0001 0017     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0001 0018     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
00008f e0e0      	LDI  R30,LOW(0)
000090 bbe8      	OUT  0x18,R30
                 ; 0001 0019 
                 ; 0001 001A     // Port C initialization
                 ; 0001 001B     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001C     DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0) ...
000091 bbe4      	OUT  0x14,R30
                 ; 0001 001D     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001E     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
000092 bbe5      	OUT  0x15,R30
                 ; 0001 001F 
                 ; 0001 0020     // Port D initialization
                 ; 0001 0021     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0022     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
000093 bbe1      	OUT  0x11,R30
                 ; 0001 0023     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0024     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
000094 bbe2      	OUT  0x12,R30
                 ; 0001 0025 }
000095 9508      	RET
                 ; .FEND
                 ;
                 ;void init_lcd()
                 ; 0001 0028 {
                 _init_lcd:
                 ; .FSTART _init_lcd
                 ; 0001 0029     // Alphanumeric LCD initialization
                 ; 0001 002A     // Connections are specified in the
                 ; 0001 002B     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 002C     // RS - PORTC Bit 0
                 ; 0001 002D     // RD - PORTC Bit 1
                 ; 0001 002E     // EN - PORTC Bit 2
                 ; 0001 002F     // D4 - PORTC Bit 4
                 ; 0001 0030     // D5 - PORTC Bit 5
                 ; 0001 0031     // D6 - PORTC Bit 6
                 ; 0001 0032     // D7 - PORTC Bit 7
                 ; 0001 0033     // Characters/line: 16
                 ; 0001 0034     lcd_init(16);
000096 e1a0      	LDI  R26,LOW(16)
000097 940e 0241 	CALL _lcd_init
                 ; 0001 0035 }
000099 9508      	RET
                 ; .FEND
                 ;
                 ;void init_timers()
                 ; 0001 0038 {
                 _init_timers:
                 ; .FSTART _init_timers
                 ; 0001 0039     // Timer/Counter 0 initialization
                 ; 0001 003A     // Clock source: System Clock
                 ; 0001 003B     // Clock value: 1000.000 kHz
                 ; 0001 003C     // Mode: Phase correct PWM top=0xFF
                 ; 0001 003D     // OC0 output: Non-Inverted PWM
                 ; 0001 003E     // Timer Period: 0.51 ms
                 ; 0001 003F     // Output Pulse(s):
                 ; 0001 0040     // OC0 Period: 0.51 ms Width: 0.052 ms
                 ; 0001 0041     TCCR0 = (1 << WGM00) | (1 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (1 << CS01) | (0 << CS00);
00009a e6e2      	LDI  R30,LOW(98)
00009b bfe3      	OUT  0x33,R30
                 ; 0001 0042     TCNT0 = 0x00;
00009c e0e0      	LDI  R30,LOW(0)
00009d bfe2      	OUT  0x32,R30
                 ; 0001 0043     OCR0 = 0x1A;
00009e e1ea      	LDI  R30,LOW(26)
00009f bfec      	OUT  0x3C,R30
                 ; 0001 0044 
                 ; 0001 0045     // Timer/Counter 1 initialization
                 ; 0001 0046     // Clock source: System Clock
                 ; 0001 0047     // Clock value: 1000.000 kHz
                 ; 0001 0048     // Mode: Normal top=0xFFFF
                 ; 0001 0049     // OC1A output: Disconnected
                 ; 0001 004A     // OC1B output: Disconnected
                 ; 0001 004B     // Noise Canceler: Off
                 ; 0001 004C     // Input Capture on Falling Edge
                 ; 0001 004D     // Timer Period: 10 ms
                 ; 0001 004E     // Timer1 Overflow Interrupt: On
                 ; 0001 004F     // Input Capture Interrupt: On
                 ; 0001 0050     // Compare A Match Interrupt: Off
                 ; 0001 0051     // Compare B Match Interrupt: Off
                 ; 0001 0052     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bdef      	OUT  0x2F,R30
                 ; 0001 0053     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
0000a2 e0e2      	LDI  R30,LOW(2)
0000a3 bdee      	OUT  0x2E,R30
                 ; 0001 0054     // TCNT1L = 0xF0;
                 ; 0001 0055     // TCNT1H = 0xD8;
                 ; 0001 0056     TCNT1H = 0x00;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bded      	OUT  0x2D,R30
                 ; 0001 0057     TCNT1L = 0x00;
0000a6 bdec      	OUT  0x2C,R30
                 ; 0001 0058     ICR1H = 0x00;
0000a7 bde7      	OUT  0x27,R30
                 ; 0001 0059     ICR1L = 0x00;
0000a8 bde6      	OUT  0x26,R30
                 ; 0001 005A     OCR1AH = 0x00;
0000a9 bdeb      	OUT  0x2B,R30
                 ; 0001 005B     OCR1AL = 0x00;
0000aa bdea      	OUT  0x2A,R30
                 ; 0001 005C     OCR1BH = 0x00;
0000ab bde9      	OUT  0x29,R30
                 ; 0001 005D     OCR1BL = 0x00;
0000ac bde8      	OUT  0x28,R30
                 ; 0001 005E 
                 ; 0001 005F     // Timer/Counter 2 initialization
                 ; 0001 0060     // Clock source: System Clock
                 ; 0001 0061     // Clock value: 62.500 kHz
                 ; 0001 0062     // Mode: Normal top=0xFF
                 ; 0001 0063     // OC2 output: Disconnected
                 ; 0001 0064     // Timer Period: 4 ms
                 ; 0001 0065     ASSR = 0 << AS2;
0000ad bde2      	OUT  0x22,R30
                 ; 0001 0066     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (1 << CS22) | (0 << CS21) | (1 << CS20);
0000ae e0e5      	LDI  R30,LOW(5)
0000af bde5      	OUT  0x25,R30
                 ; 0001 0067     TCNT2 = 0x06;
0000b0 e0e6      	LDI  R30,LOW(6)
0000b1 bde4      	OUT  0x24,R30
                 ; 0001 0068     OCR2 = 0x00;
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bde3      	OUT  0x23,R30
                 ; 0001 0069 
                 ; 0001 006A     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 006B     TIMSK = (0 << OCIE2) | (1 << TOIE2) | (1 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (1 << TOIE1) | (0 << OCIE0) |  ...
0000b4 e6e4      	LDI  R30,LOW(100)
0000b5 bfe9      	OUT  0x39,R30
                 ; 0001 006C }
0000b6 9508      	RET
                 ; .FEND
                 ;
                 ;void init_interrupts()
                 ; 0001 006F {
                 _init_interrupts:
                 ; .FSTART _init_interrupts
                 ; 0001 0070     // External Interrupt(s) initialization
                 ; 0001 0071     // INT0 : Off
                 ; 0001 0072     // INT1: Off
                 ; 0001 0073     // INT2: Off
                 ; 0001 0074 
                 ; 0001 0075     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bfe5      	OUT  0x35,R30
                 ; 0001 0076     MCUCSR = (0 << ISC2);
0000b9 bfe4      	OUT  0x34,R30
                 ; 0001 0077 }
0000ba 9508      	RET
                 ; .FEND
                 ;#include "sub_tasks.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;// question5 variables
                 ;int timer2OF_counter = 0;
                 ;
                 ;//question6 variables
                 ;bool has_timer1_overflow = false;
                 ;int ICR1L_DATA, ICR1H_DATA;
                 ;int ICR_DATA1 = 0, ICR_DATA2 = 0;
                 ;float period;
                 ;int old_speed = 0, new_speed = 0, lcd_display_limit = 0;
                 ;char lcd_output[16];
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0002 0010 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000bb 93ea      	ST   -Y,R30
                 ; 0002 0011 
                 ; 0002 0012     has_timer1_overflow = true;
0000bc e0e1      	LDI  R30,LOW(1)
0000bd 2e7e      	MOV  R7,R30
                 ; 0002 0013 }
0000be 91e9      	LD   R30,Y+
0000bf 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 input capture interrupt service routine
                 ;interrupt[TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0002 0017 {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
0000c0 920a      	ST   -Y,R0
0000c1 921a      	ST   -Y,R1
0000c2 92fa      	ST   -Y,R15
0000c3 936a      	ST   -Y,R22
0000c4 937a      	ST   -Y,R23
0000c5 938a      	ST   -Y,R24
0000c6 939a      	ST   -Y,R25
0000c7 93aa      	ST   -Y,R26
0000c8 93ba      	ST   -Y,R27
0000c9 93ea      	ST   -Y,R30
0000ca 93fa      	ST   -Y,R31
0000cb b7ef      	IN   R30,SREG
0000cc 93ea      	ST   -Y,R30
                 ; 0002 0018     q6_handle_timer1_capture();
0000cd d077      	RCALL _q6_handle_timer1_capture
                 ; 0002 0019 }
0000ce 91e9      	LD   R30,Y+
0000cf bfef      	OUT  SREG,R30
0000d0 91f9      	LD   R31,Y+
0000d1 91e9      	LD   R30,Y+
0000d2 91b9      	LD   R27,Y+
0000d3 91a9      	LD   R26,Y+
0000d4 9199      	LD   R25,Y+
0000d5 9189      	LD   R24,Y+
0000d6 9179      	LD   R23,Y+
0000d7 9169      	LD   R22,Y+
0000d8 90f9      	LD   R15,Y+
0000d9 9019      	LD   R1,Y+
0000da 9009      	LD   R0,Y+
0000db 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0002 001D {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000dc 93ea      	ST   -Y,R30
0000dd 93fa      	ST   -Y,R31
0000de b7ef      	IN   R30,SREG
0000df 93ea      	ST   -Y,R30
                 ; 0002 001E     TCNT2 = 0x06;
0000e0 e0e6      	LDI  R30,LOW(6)
0000e1 bde4      	OUT  0x24,R30
                 ; 0002 001F     timer2OF_counter++;
0000e2 01f2      	MOVW R30,R4
0000e3 9631      	ADIW R30,1
0000e4 012f      	MOVW R4,R30
                 ; 0002 0020 
                 ; 0002 0021     if (timer2OF_counter == 26) // counter should go to 25 in order to have 100ms
0000e5 e1ea      	LDI  R30,LOW(26)
0000e6 e0f0      	LDI  R31,HIGH(26)
0000e7 15e4      	CP   R30,R4
0000e8 05f5      	CPC  R31,R5
0000e9 f411      	BRNE _0x40003
                 ; 0002 0022         timer2OF_counter = 0;
0000ea 2444      	CLR  R4
0000eb 2455      	CLR  R5
                 ; 0002 0023 }
                 _0x40003:
0000ec 91e9      	LD   R30,Y+
0000ed bfef      	OUT  SREG,R30
0000ee 91f9      	LD   R31,Y+
0000ef 91e9      	LD   R30,Y+
0000f0 9518      	RETI
                 ; .FEND
                 ;
                 ;void q3_custom_pwm_wave(int custom_duty)
                 ; 0002 0026 {
                 ; 0002 0027     OCR0 = (custom_duty * 2.55) + 0.5;
                 ;	custom_duty -> Y+0
                 ; 0002 0028 }
                 ;
                 ;void q4_subTask()
                 ; 0002 002B {
                 _q4_subTask:
                 ; .FSTART _q4_subTask
                 ; 0002 002C     // OCR0 = 2.55 * duty-cycle (approximately)
                 ; 0002 002D     // duty-cycle = (100/255) * port_data
                 ; 0002 002E     // => OCR0 = port_data
                 ; 0002 002F     OCR0 = PINA;
0000f1 b3e9      	IN   R30,0x19
0000f2 bfec      	OUT  0x3C,R30
                 ; 0002 0030 }
0000f3 9508      	RET
                 ; .FEND
                 ;
                 ;void q5_subTask()
                 ; 0002 0033 {
                 _q5_subTask:
                 ; .FSTART _q5_subTask
                 ; 0002 0034     // step = 10 => pulse per cycle = 360/10 = 36
                 ; 0002 0035     // Speed(rpm) = S
                 ; 0002 0036     // T or Time between sending pulse = 100ms=0.1s => 0.1 = 60 / (S * 36) => S=16
                 ; 0002 0037     lcd_gotoxy(0, 0);
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 93ea      	ST   -Y,R30
0000f6 e0a0      	LDI  R26,LOW(0)
0000f7 d102      	RCALL _lcd_gotoxy
                 ; 0002 0038     lcd_puts("S(SP): 16rpm");
                +
0000f8 e6a0     +LDI R26 , LOW ( _0x40004 + ( 0 ) )
0000f9 e0b1     +LDI R27 , HIGH ( _0x40004 + ( 0 ) )
                 	__POINTW2MN _0x40004,0
0000fa d135      	RCALL _lcd_puts
                 ; 0002 0039     two_phase_step();
0000fb d00f      	RCALL _two_phase_step
                 ; 0002 003A     PORTB = 0x00;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bbe8      	OUT  0x18,R30
                 ; 0002 003B     delay_ms(500);
0000fe efa4      	LDI  R26,LOW(500)
0000ff e0b1      	LDI  R27,HIGH(500)
000100 940e 0470 	CALL _delay_ms
                 ; 0002 003C     two_phase_step_reverse();
000102 d025      	RCALL _two_phase_step_reverse
                 ; 0002 003D     delay_ms(500);
000103 efa4      	LDI  R26,LOW(500)
000104 e0b1      	LDI  R27,HIGH(500)
000105 940e 0470 	CALL _delay_ms
                 ; 0002 003E     PORTB = 0x00;
000107 e0e0      	LDI  R30,LOW(0)
000108 bbe8      	OUT  0x18,R30
                 ; 0002 003F     lcd_clear();
000109 d0ff      	RCALL _lcd_clear
                 ; 0002 0040 }
00010a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x40004:
000160           	.BYTE 0xD
                 ;
                 ;void two_phase_step()
                 ; 0002 0043 {
                 
                 	.CSEG
                 _two_phase_step:
                 ; .FSTART _two_phase_step
                 ; 0002 0044     PORTB = 0x30;
00010b e3e0      	LDI  R30,LOW(48)
00010c bbe8      	OUT  0x18,R30
                 ; 0002 0045     timer2OF_counter = 0;
00010d 2444      	CLR  R4
00010e 2455      	CLR  R5
                 ; 0002 0046     while (timer2OF_counter < 25)
                 _0x40005:
00010f 940e 042b 	CALL SUBOPT_0x0
000111 f3ec      	BRLT _0x40005
                 ; 0002 0047         ;
                 ; 0002 0048     PORTB = 0x60;
000112 e6e0      	LDI  R30,LOW(96)
000113 bbe8      	OUT  0x18,R30
                 ; 0002 0049     timer2OF_counter = 0;
000114 2444      	CLR  R4
000115 2455      	CLR  R5
                 ; 0002 004A     while (timer2OF_counter < 25)
                 _0x40008:
000116 940e 042b 	CALL SUBOPT_0x0
000118 f3ec      	BRLT _0x40008
                 ; 0002 004B         ;
                 ; 0002 004C     PORTB = 0xc0;
000119 ece0      	LDI  R30,LOW(192)
00011a bbe8      	OUT  0x18,R30
                 ; 0002 004D     timer2OF_counter = 0;
00011b 2444      	CLR  R4
00011c 2455      	CLR  R5
                 ; 0002 004E     while (timer2OF_counter < 25)
                 _0x4000B:
00011d 940e 042b 	CALL SUBOPT_0x0
00011f f3ec      	BRLT _0x4000B
                 ; 0002 004F         ;
                 ; 0002 0050     PORTB = 0x90;
000120 e9e0      	LDI  R30,LOW(144)
000121 bbe8      	OUT  0x18,R30
                 ; 0002 0051     timer2OF_counter = 0;
000122 2444      	CLR  R4
000123 2455      	CLR  R5
                 ; 0002 0052     while (timer2OF_counter < 25)
                 _0x4000E:
000124 940e 042b 	CALL SUBOPT_0x0
000126 f3ec      	BRLT _0x4000E
                 ; 0002 0053         ;
                 ; 0002 0054 }
000127 9508      	RET
                 ; .FEND
                 ;
                 ;void two_phase_step_reverse()
                 ; 0002 0057 {
                 _two_phase_step_reverse:
                 ; .FSTART _two_phase_step_reverse
                 ; 0002 0058     PORTB = 0xc0;
000128 ece0      	LDI  R30,LOW(192)
000129 bbe8      	OUT  0x18,R30
                 ; 0002 0059     timer2OF_counter = 0;
00012a 2444      	CLR  R4
00012b 2455      	CLR  R5
                 ; 0002 005A     while (timer2OF_counter < 25)
                 _0x40011:
00012c 940e 042b 	CALL SUBOPT_0x0
00012e f3ec      	BRLT _0x40011
                 ; 0002 005B         ;
                 ; 0002 005C     PORTB = 0x60;
00012f e6e0      	LDI  R30,LOW(96)
000130 bbe8      	OUT  0x18,R30
                 ; 0002 005D     timer2OF_counter = 0;
000131 2444      	CLR  R4
000132 2455      	CLR  R5
                 ; 0002 005E     while (timer2OF_counter < 25)
                 _0x40014:
000133 940e 042b 	CALL SUBOPT_0x0
000135 f3ec      	BRLT _0x40014
                 ; 0002 005F         ;
                 ; 0002 0060     PORTB = 0x30;
000136 e3e0      	LDI  R30,LOW(48)
000137 bbe8      	OUT  0x18,R30
                 ; 0002 0061     timer2OF_counter = 0;
000138 2444      	CLR  R4
000139 2455      	CLR  R5
                 ; 0002 0062     while (timer2OF_counter < 25)
                 _0x40017:
00013a 940e 042b 	CALL SUBOPT_0x0
00013c f3ec      	BRLT _0x40017
                 ; 0002 0063         ;
                 ; 0002 0064     PORTB = 0x90;
00013d e9e0      	LDI  R30,LOW(144)
00013e bbe8      	OUT  0x18,R30
                 ; 0002 0065     timer2OF_counter = 0;
00013f 2444      	CLR  R4
000140 2455      	CLR  R5
                 ; 0002 0066     while (timer2OF_counter < 25)
                 _0x4001A:
000141 940e 042b 	CALL SUBOPT_0x0
000143 f3ec      	BRLT _0x4001A
                 ; 0002 0067         ;
                 ; 0002 0068 }
000144 9508      	RET
                 ; .FEND
                 ;
                 ;void q6_handle_timer1_capture()
                 ; 0002 006B {
                 _q6_handle_timer1_capture:
                 ; .FSTART _q6_handle_timer1_capture
                 ; 0002 006C     if (has_timer1_overflow == true)
000145 e0e1      	LDI  R30,LOW(1)
000146 15e7      	CP   R30,R7
000147 f411      	BRNE _0x4001D
                 ; 0002 006D     {
                 ; 0002 006E         has_timer1_overflow = false;
000148 2477      	CLR  R7
                 ; 0002 006F         return;
000149 9508      	RET
                 ; 0002 0070     }
                 ; 0002 0071 
                 ; 0002 0072     ICR1L_DATA = ICR1L;
                 _0x4001D:
00014a b486      	IN   R8,38
00014b 2499      	CLR  R9
                 ; 0002 0073     ICR1H_DATA = ICR1H;
00014c b4a7      	IN   R10,39
00014d 24bb      	CLR  R11
                 ; 0002 0074 
                 ; 0002 0075     ICR_DATA2 = (ICR1H_DATA << 8) | ICR1L_DATA;
00014e 2dfa      	MOV  R31,R10
00014f e0e0      	LDI  R30,LOW(0)
000150 29e8      	OR   R30,R8
000151 29f9      	OR   R31,R9
000152 93e0 016d 	STS  _ICR_DATA2,R30
000154 93f0 016e 	STS  _ICR_DATA2+1,R31
                 ; 0002 0076     period = ICR_DATA2 - ICR_DATA1;
000156 19ec      	SUB  R30,R12
000157 09fd      	SBC  R31,R13
000158 e6af      	LDI  R26,LOW(_period)
000159 e0b1      	LDI  R27,HIGH(_period)
00015a 940e 05b1 	CALL __CWD1
00015c 940e 04e0 	CALL __CDF1
00015e 940e 05ba 	CALL __PUTDP1
                 ; 0002 0077     ICR_DATA1 = ICR_DATA2; // to keep last ICR data
                +
000160 90c0 016d+LDS R12 , 0 + ( _ICR_DATA2 )
000162 90d0 016e+LDS R13 , 0 + ( _ICR_DATA2 ) + 1
                 	__GETWRMN 12,13,0,_ICR_DATA2
                 ; 0002 0078 
                 ; 0002 0079     // dc motor : 50 pulse per revolution
                 ; 0002 007A     // period = duration of one pulse(in us)
                 ; 0002 007B     // rpm = revolution per minute(60 seconds)
                 ; 0002 007C     // => speed(rpm) = 60 / ((period/1000000) * 50)
                 ; 0002 007D     new_speed = (60 * 1000000) / (period * 50);
000164 91a0 016f 	LDS  R26,_period
000166 91b0 0170 	LDS  R27,_period+1
000168 9180 0171 	LDS  R24,_period+2
00016a 9190 0172 	LDS  R25,_period+3
                +
00016c e0e0     +LDI R30 , LOW ( 0x42480000 )
00016d e0f0     +LDI R31 , HIGH ( 0x42480000 )
00016e e468     +LDI R22 , BYTE3 ( 0x42480000 )
00016f e472     +LDI R23 , BYTE4 ( 0x42480000 )
                 	__GETD1N 0x42480000
000170 940e 050e 	CALL __MULF12
                +
000172 eca0     +LDI R26 , LOW ( 0x4C64E1C0 )
000173 eeb1     +LDI R27 , HIGH ( 0x4C64E1C0 )
000174 e684     +LDI R24 , BYTE3 ( 0x4C64E1C0 )
000175 e49c     +LDI R25 , BYTE4 ( 0x4C64E1C0 )
                 	__GETD2N 0x4C64E1C0
000176 940e 055c 	CALL __DIVF21
000178 e7a5      	LDI  R26,LOW(_new_speed)
000179 e0b1      	LDI  R27,HIGH(_new_speed)
00017a 940e 04a9 	CALL __CFD1
00017c 93ed      	ST   X+,R30
00017d 93fc      	ST   X,R31
                 ; 0002 007E 
                 ; 0002 007F     if (has_speeds_difference(old_speed, new_speed))
00017e 91e0 0173 	LDS  R30,_old_speed
000180 91f0 0174 	LDS  R31,_old_speed+1
000182 93fa      	ST   -Y,R31
000183 93ea      	ST   -Y,R30
000184 91a0 0175 	LDS  R26,_new_speed
000186 91b0 0176 	LDS  R27,_new_speed+1
000188 d03c      	RCALL _has_speeds_difference
000189 30e0      	CPI  R30,0
00018a f0e9      	BREQ _0x4001E
                 ; 0002 0080     {
                 ; 0002 0081         if (lcd_display_limit == 5)
00018b 91a0 0177 	LDS  R26,_lcd_display_limit
00018d 91b0 0178 	LDS  R27,_lcd_display_limit+1
00018f 9715      	SBIW R26,5
000190 f499      	BRNE _0x4001F
                 ; 0002 0082         {
                 ; 0002 0083 
                 ; 0002 0084             old_speed = new_speed;
000191 91e0 0175 	LDS  R30,_new_speed
000193 91f0 0176 	LDS  R31,_new_speed+1
000195 93e0 0173 	STS  _old_speed,R30
000197 93f0 0174 	STS  _old_speed+1,R31
                 ; 0002 0085             print_dc_motor_speed(new_speed);
000199 91a0 0175 	LDS  R26,_new_speed
00019b 91b0 0176 	LDS  R27,_new_speed+1
00019d d00b      	RCALL _print_dc_motor_speed
                 ; 0002 0086             lcd_display_limit = 0;
00019e e0e0      	LDI  R30,LOW(0)
00019f 93e0 0177 	STS  _lcd_display_limit,R30
0001a1 93e0 0178 	STS  _lcd_display_limit+1,R30
                 ; 0002 0087         }
                 ; 0002 0088         else
0001a3 c004      	RJMP _0x40020
                 _0x4001F:
                 ; 0002 0089         {
                 ; 0002 008A             lcd_display_limit++;
0001a4 e7a7      	LDI  R26,LOW(_lcd_display_limit)
0001a5 e0b1      	LDI  R27,HIGH(_lcd_display_limit)
0001a6 940e 0430 	CALL SUBOPT_0x1
                 ; 0002 008B         }
                 _0x40020:
                 ; 0002 008C     }
                 ; 0002 008D }
                 _0x4001E:
0001a8 9508      	RET
                 ; .FEND
                 ;
                 ;void print_dc_motor_speed(int speed)
                 ; 0002 0090 {
                 _print_dc_motor_speed:
                 ; .FSTART _print_dc_motor_speed
                 ; 0002 0091     sprintf(lcd_output, "S(DC)=%d rpm", speed);
0001a9 93ba      	ST   -Y,R27
0001aa 93aa      	ST   -Y,R26
                 ;	speed -> Y+0
0001ab e7e9      	LDI  R30,LOW(_lcd_output)
0001ac e0f1      	LDI  R31,HIGH(_lcd_output)
0001ad 93fa      	ST   -Y,R31
0001ae 93ea      	ST   -Y,R30
                +
0001af e7ed     +LDI R30 , LOW ( 2 * _0x40000 + ( 13 ) )
0001b0 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 13 ) )
                 	__POINTW1FN _0x40000,13
0001b1 93fa      	ST   -Y,R31
0001b2 93ea      	ST   -Y,R30
0001b3 81ec      	LDD  R30,Y+4
0001b4 81fd      	LDD  R31,Y+4+1
0001b5 940e 05b1 	CALL __CWD1
0001b7 940e 05c3 	CALL __PUTPARD1
0001b9 e084      	LDI  R24,4
0001ba 940e 03de 	CALL _sprintf
0001bc 9628      	ADIW R28,8
                 ; 0002 0092     lcd_gotoxy(0, 1);
0001bd e0e0      	LDI  R30,LOW(0)
0001be 93ea      	ST   -Y,R30
0001bf e0a1      	LDI  R26,LOW(1)
0001c0 d039      	RCALL _lcd_gotoxy
                 ; 0002 0093     lcd_puts(lcd_output);
0001c1 e7a9      	LDI  R26,LOW(_lcd_output)
0001c2 e0b1      	LDI  R27,HIGH(_lcd_output)
0001c3 d06c      	RCALL _lcd_puts
                 ; 0002 0094 }
0001c4 c042      	RJMP _0x2080003
                 ; .FEND
                 ;
                 ;bool has_speeds_difference(int old_speed, int new_speed)
                 ; 0002 0097 {
                 _has_speeds_difference:
                 ; .FSTART _has_speeds_difference
                 ; 0002 0098     return (old_speed - new_speed >= 5) || (old_speed - new_speed <= -5);
0001c5 93ba      	ST   -Y,R27
0001c6 93aa      	ST   -Y,R26
                 ;	old_speed -> Y+2
                 ;	new_speed -> Y+0
0001c7 81a8      	LD   R26,Y
0001c8 81b9      	LDD  R27,Y+1
0001c9 81ea      	LDD  R30,Y+2
0001ca 81fb      	LDD  R31,Y+2+1
0001cb 1bea      	SUB  R30,R26
0001cc 0bfb      	SBC  R31,R27
0001cd 01df      	MOVW R26,R30
0001ce 9735      	SBIW R30,5
0001cf f43c      	BRGE _0x40021
0001d0 efeb      	LDI  R30,LOW(65531)
0001d1 efff      	LDI  R31,HIGH(65531)
0001d2 17ea      	CP   R30,R26
0001d3 07fb      	CPC  R31,R27
0001d4 f414      	BRGE _0x40021
0001d5 e0e0      	LDI  R30,0
0001d6 c001      	RJMP _0x40022
                 _0x40021:
0001d7 e0e1      	LDI  R30,1
                 _0x40022:
0001d8 9624      	ADIW R28,4
0001d9 9508      	RET
                 ; 0002 0099 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001da 93aa      	ST   -Y,R26
0001db b3e5      	IN   R30,0x15
0001dc 70ef      	ANDI R30,LOW(0xF)
0001dd 2fae      	MOV  R26,R30
0001de 81e8      	LD   R30,Y
0001df 7fe0      	ANDI R30,LOW(0xF0)
0001e0 2bea      	OR   R30,R26
0001e1 bbe5      	OUT  0x15,R30
                +
0001e2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e3 958a     +DEC R24
0001e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e5 9aaa      	SBI  0x15,2
                +
0001e6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e7 958a     +DEC R24
0001e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e9 98aa      	CBI  0x15,2
                +
0001ea e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001eb 958a     +DEC R24
0001ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ed c080      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ee 93aa      	ST   -Y,R26
0001ef 81a8      	LD   R26,Y
0001f0 dfe9      	RCALL __lcd_write_nibble_G100
0001f1 81e8          ld    r30,y
0001f2 95e2          swap  r30
0001f3 83e8          st    y,r30
0001f4 81a8      	LD   R26,Y
0001f5 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001f6 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001f7 958a     +DEC R24
0001f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001f9 c074      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001fa 93aa      	ST   -Y,R26
0001fb 81e8      	LD   R30,Y
0001fc e0f0      	LDI  R31,0
0001fd 57e7      	SUBI R30,LOW(-__base_y_G100)
0001fe 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001ff 81e0      	LD   R30,Z
000200 81a9      	LDD  R26,Y+1
000201 0fae      	ADD  R26,R30
000202 dfeb      	RCALL __lcd_write_data
000203 8069      	LDD  R6,Y+1
000204 81e8      	LD   R30,Y
000205 93e0 018d 	STS  __lcd_y,R30
                 _0x2080003:
000207 9622      	ADIW R28,2
000208 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000209 e0a2      	LDI  R26,LOW(2)
00020a 940e 0436 	CALL SUBOPT_0x2
00020c e0ac      	LDI  R26,LOW(12)
00020d dfe0      	RCALL __lcd_write_data
00020e e0a1      	LDI  R26,LOW(1)
00020f 940e 0436 	CALL SUBOPT_0x2
000211 e0e0      	LDI  R30,LOW(0)
000212 93e0 018d 	STS  __lcd_y,R30
000214 2e6e      	MOV  R6,R30
000215 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000216 93aa      	ST   -Y,R26
000217 81a8      	LD   R26,Y
000218 30aa      	CPI  R26,LOW(0xA)
000219 f021      	BREQ _0x2000005
00021a 91e0 018e 	LDS  R30,__lcd_maxx
00021c 166e      	CP   R6,R30
00021d f060      	BRLO _0x2000004
                 _0x2000005:
00021e e0e0      	LDI  R30,LOW(0)
00021f 93ea      	ST   -Y,R30
000220 91a0 018d 	LDS  R26,__lcd_y
000222 5faf      	SUBI R26,-LOW(1)
000223 93a0 018d 	STS  __lcd_y,R26
000225 dfd4      	RCALL _lcd_gotoxy
000226 81a8      	LD   R26,Y
000227 30aa      	CPI  R26,LOW(0xA)
000228 f409      	BRNE _0x2000007
000229 c044      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
00022a 9463      	INC  R6
00022b 9aa8      	SBI  0x15,0
00022c 81a8      	LD   R26,Y
00022d dfc0      	RCALL __lcd_write_data
00022e 98a8      	CBI  0x15,0
00022f c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000230 93ba      	ST   -Y,R27
000231 93aa      	ST   -Y,R26
000232 931a      	ST   -Y,R17
                 _0x2000008:
000233 81a9      	LDD  R26,Y+1
000234 81ba      	LDD  R27,Y+1+1
000235 91ed      	LD   R30,X+
000236 83a9      	STD  Y+1,R26
000237 83ba      	STD  Y+1+1,R27
000238 2f1e      	MOV  R17,R30
000239 30e0      	CPI  R30,0
00023a f019      	BREQ _0x200000A
00023b 2fa1      	MOV  R26,R17
00023c dfd9      	RCALL _lcd_putchar
00023d cff5      	RJMP _0x2000008
                 _0x200000A:
00023e 8118      	LDD  R17,Y+0
00023f 9623      	ADIW R28,3
000240 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000241 93aa      	ST   -Y,R26
000242 b3e4      	IN   R30,0x14
000243 6fe0      	ORI  R30,LOW(0xF0)
000244 bbe4      	OUT  0x14,R30
000245 9aa2      	SBI  0x14,2
000246 9aa0      	SBI  0x14,0
000247 9aa1      	SBI  0x14,1
000248 98aa      	CBI  0x15,2
000249 98a8      	CBI  0x15,0
00024a 98a9      	CBI  0x15,1
00024b 81e8      	LD   R30,Y
00024c 93e0 018e 	STS  __lcd_maxx,R30
00024e 58e0      	SUBI R30,-LOW(128)
                +
00024f 93e0 018b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000251 81e8      	LD   R30,Y
000252 54e0      	SUBI R30,-LOW(192)
                +
000253 93e0 018c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000255 e1a4      	LDI  R26,LOW(20)
000256 e0b0      	LDI  R27,0
000257 940e 0470 	CALL _delay_ms
000259 940e 043c 	CALL SUBOPT_0x3
00025b 940e 043c 	CALL SUBOPT_0x3
00025d 940e 043c 	CALL SUBOPT_0x3
00025f e2a0      	LDI  R26,LOW(32)
000260 df79      	RCALL __lcd_write_nibble_G100
                +
000261 ec88     +LDI R24 , LOW ( 200 )
000262 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000263 9701     +SBIW R24 , 1
000264 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000265 e2a8      	LDI  R26,LOW(40)
000266 df87      	RCALL __lcd_write_data
000267 e0a4      	LDI  R26,LOW(4)
000268 df85      	RCALL __lcd_write_data
000269 e8a5      	LDI  R26,LOW(133)
00026a df83      	RCALL __lcd_write_data
00026b e0a6      	LDI  R26,LOW(6)
00026c df81      	RCALL __lcd_write_data
00026d df9b      	RCALL _lcd_clear
                 _0x2080002:
00026e 9621      	ADIW R28,1
00026f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000270 93ba      	ST   -Y,R27
000271 93aa      	ST   -Y,R26
000272 931a      	ST   -Y,R17
000273 930a      	ST   -Y,R16
000274 81aa      	LDD  R26,Y+2
000275 81bb      	LDD  R27,Y+2+1
000276 9612      	ADIW R26,2
000277 940e 05b6 	CALL __GETW1P
000279 9730      	SBIW R30,0
00027a f129      	BREQ _0x2020010
00027b 81aa      	LDD  R26,Y+2
00027c 81bb      	LDD  R27,Y+2+1
00027d 9614      	ADIW R26,4
00027e 940e 05b6 	CALL __GETW1P
000280 018f      	MOVW R16,R30
000281 9730      	SBIW R30,0
000282 f061      	BREQ _0x2020012
                +
000283 3002     +CPI R16 , LOW ( 2 )
000284 e0e0     +LDI R30 , HIGH ( 2 )
000285 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000286 f080      	BRLO _0x2020013
000287 01f8      	MOVW R30,R16
000288 9731      	SBIW R30,1
000289 018f      	MOVW R16,R30
                +
00028a 81aa     +LDD R26 , Y + 2
00028b 81bb     +LDD R27 , Y + 2 + 1
00028c 9614     +ADIW R26 , 4
00028d 93ed     +ST X + , R30
00028e 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00028f 81aa      	LDD  R26,Y+2
000290 81bb      	LDD  R27,Y+2+1
000291 9612      	ADIW R26,2
000292 940e 0430 	CALL SUBOPT_0x1
000294 9731      	SBIW R30,1
000295 81ac      	LDD  R26,Y+4
000296 83a0      	STD  Z+0,R26
                 _0x2020013:
000297 81aa      	LDD  R26,Y+2
000298 81bb      	LDD  R27,Y+2+1
000299 940e 05b6 	CALL __GETW1P
00029b 23ff      	TST  R31
00029c f012      	BRMI _0x2020014
00029d 940e 0430 	CALL SUBOPT_0x1
                 _0x2020014:
00029f c006      	RJMP _0x2020015
                 _0x2020010:
0002a0 81aa      	LDD  R26,Y+2
0002a1 81bb      	LDD  R27,Y+2+1
0002a2 efef      	LDI  R30,LOW(65535)
0002a3 efff      	LDI  R31,HIGH(65535)
0002a4 93ed      	ST   X+,R30
0002a5 93fc      	ST   X,R31
                 _0x2020015:
0002a6 8119      	LDD  R17,Y+1
0002a7 8108      	LDD  R16,Y+0
0002a8 9625      	ADIW R28,5
0002a9 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002aa 93ba      	ST   -Y,R27
0002ab 93aa      	ST   -Y,R26
0002ac 9726      	SBIW R28,6
0002ad 940e 05c8 	CALL __SAVELOCR6
0002af e010      	LDI  R17,0
0002b0 85ac      	LDD  R26,Y+12
0002b1 85bd      	LDD  R27,Y+12+1
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 e0f0      	LDI  R31,HIGH(0)
0002b4 93ed      	ST   X+,R30
0002b5 93fc      	ST   X,R31
                 _0x2020016:
0002b6 89ea      	LDD  R30,Y+18
0002b7 89fb      	LDD  R31,Y+18+1
0002b8 9631      	ADIW R30,1
0002b9 8bea      	STD  Y+18,R30
0002ba 8bfb      	STD  Y+18+1,R31
0002bb 9731      	SBIW R30,1
0002bc 91e4      	LPM  R30,Z
0002bd 2f2e      	MOV  R18,R30
0002be 30e0      	CPI  R30,0
0002bf f409      	BRNE PC+2
0002c0 c115      	RJMP _0x2020018
0002c1 2fe1      	MOV  R30,R17
0002c2 30e0      	CPI  R30,0
0002c3 f439      	BRNE _0x202001C
0002c4 3225      	CPI  R18,37
0002c5 f411      	BRNE _0x202001D
0002c6 e011      	LDI  R17,LOW(1)
0002c7 c002      	RJMP _0x202001E
                 _0x202001D:
0002c8 940e 0444 	CALL SUBOPT_0x4
                 _0x202001E:
0002ca c10a      	RJMP _0x202001B
                 _0x202001C:
0002cb 30e1      	CPI  R30,LOW(0x1)
0002cc f4a9      	BRNE _0x202001F
0002cd 3225      	CPI  R18,37
0002ce f419      	BRNE _0x2020020
0002cf 940e 0444 	CALL SUBOPT_0x4
0002d1 c102      	RJMP _0x20200CC
                 _0x2020020:
0002d2 e012      	LDI  R17,LOW(2)
0002d3 e040      	LDI  R20,LOW(0)
0002d4 e000      	LDI  R16,LOW(0)
0002d5 322d      	CPI  R18,45
0002d6 f411      	BRNE _0x2020021
0002d7 e001      	LDI  R16,LOW(1)
0002d8 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002d9 322b      	CPI  R18,43
0002da f411      	BRNE _0x2020022
0002db e24b      	LDI  R20,LOW(43)
0002dc c0f8      	RJMP _0x202001B
                 _0x2020022:
0002dd 3220      	CPI  R18,32
0002de f411      	BRNE _0x2020023
0002df e240      	LDI  R20,LOW(32)
0002e0 c0f4      	RJMP _0x202001B
                 _0x2020023:
0002e1 c002      	RJMP _0x2020024
                 _0x202001F:
0002e2 30e2      	CPI  R30,LOW(0x2)
0002e3 f439      	BRNE _0x2020025
                 _0x2020024:
0002e4 e050      	LDI  R21,LOW(0)
0002e5 e013      	LDI  R17,LOW(3)
0002e6 3320      	CPI  R18,48
0002e7 f411      	BRNE _0x2020026
0002e8 6800      	ORI  R16,LOW(128)
0002e9 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002ea c003      	RJMP _0x2020027
                 _0x2020025:
0002eb 30e3      	CPI  R30,LOW(0x3)
0002ec f009      	BREQ PC+2
0002ed c0e7      	RJMP _0x202001B
                 _0x2020027:
0002ee 3320      	CPI  R18,48
0002ef f010      	BRLO _0x202002A
0002f0 332a      	CPI  R18,58
0002f1 f008      	BRLO _0x202002B
                 _0x202002A:
0002f2 c007      	RJMP _0x2020029
                 _0x202002B:
0002f3 e0aa      	LDI  R26,LOW(10)
0002f4 9f5a      	MUL  R21,R26
0002f5 2d50      	MOV  R21,R0
0002f6 2fe2      	MOV  R30,R18
0002f7 53e0      	SUBI R30,LOW(48)
0002f8 0f5e      	ADD  R21,R30
0002f9 c0db      	RJMP _0x202001B
                 _0x2020029:
0002fa 2fe2      	MOV  R30,R18
0002fb 36e3      	CPI  R30,LOW(0x63)
0002fc f449      	BRNE _0x202002F
0002fd 940e 044b 	CALL SUBOPT_0x5
0002ff 89e8      	LDD  R30,Y+16
000300 89f9      	LDD  R31,Y+16+1
000301 81a4      	LDD  R26,Z+4
000302 93aa      	ST   -Y,R26
000303 940e 0451 	CALL SUBOPT_0x6
000305 c0ce      	RJMP _0x2020030
                 _0x202002F:
000306 37e3      	CPI  R30,LOW(0x73)
000307 f441      	BRNE _0x2020032
000308 940e 044b 	CALL SUBOPT_0x5
00030a 940e 0457 	CALL SUBOPT_0x7
00030c 940e 0412 	CALL _strlen
00030e 2f1e      	MOV  R17,R30
00030f c00a      	RJMP _0x2020033
                 _0x2020032:
000310 37e0      	CPI  R30,LOW(0x70)
000311 f461      	BRNE _0x2020035
000312 940e 044b 	CALL SUBOPT_0x5
000314 940e 0457 	CALL SUBOPT_0x7
000316 940e 041e 	CALL _strlenf
000318 2f1e      	MOV  R17,R30
000319 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00031a 6002      	ORI  R16,LOW(2)
00031b 770f      	ANDI R16,LOW(127)
00031c e030      	LDI  R19,LOW(0)
00031d c034      	RJMP _0x2020036
                 _0x2020035:
00031e 36e4      	CPI  R30,LOW(0x64)
00031f f011      	BREQ _0x2020039
000320 36e9      	CPI  R30,LOW(0x69)
000321 f411      	BRNE _0x202003A
                 _0x2020039:
000322 6004      	ORI  R16,LOW(4)
000323 c002      	RJMP _0x202003B
                 _0x202003A:
000324 37e5      	CPI  R30,LOW(0x75)
000325 f431      	BRNE _0x202003C
                 _0x202003B:
000326 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000327 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000328 83ee      	STD  Y+6,R30
000329 83ff      	STD  Y+6+1,R31
00032a e015      	LDI  R17,LOW(5)
00032b c00c      	RJMP _0x202003D
                 _0x202003C:
00032c 35e8      	CPI  R30,LOW(0x58)
00032d f411      	BRNE _0x202003F
00032e 6008      	ORI  R16,LOW(8)
00032f c003      	RJMP _0x2020040
                 _0x202003F:
000330 37e8      	CPI  R30,LOW(0x78)
000331 f009      	BREQ PC+2
000332 c0a1      	RJMP _0x2020071
                 _0x2020040:
000333 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000334 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000335 83ee      	STD  Y+6,R30
000336 83ff      	STD  Y+6+1,R31
000337 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000338 ff02      	SBRS R16,2
000339 c014      	RJMP _0x2020042
00033a 940e 044b 	CALL SUBOPT_0x5
00033c 940e 0461 	CALL SUBOPT_0x8
00033e 85ab      	LDD  R26,Y+11
00033f 23aa      	TST  R26
000340 f43a      	BRPL _0x2020043
000341 85ea      	LDD  R30,Y+10
000342 85fb      	LDD  R31,Y+10+1
000343 940e 05a5 	CALL __ANEGW1
000345 87ea      	STD  Y+10,R30
000346 87fb      	STD  Y+10+1,R31
000347 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000348 3040      	CPI  R20,0
000349 f011      	BREQ _0x2020044
00034a 5f1f      	SUBI R17,-LOW(1)
00034b c001      	RJMP _0x2020045
                 _0x2020044:
00034c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00034d c004      	RJMP _0x2020046
                 _0x2020042:
00034e 940e 044b 	CALL SUBOPT_0x5
000350 940e 0461 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
000352 fd00      	SBRC R16,0
000353 c011      	RJMP _0x2020047
                 _0x2020048:
000354 1715      	CP   R17,R21
000355 f478      	BRSH _0x202004A
000356 ff07      	SBRS R16,7
000357 c008      	RJMP _0x202004B
000358 ff02      	SBRS R16,2
000359 c004      	RJMP _0x202004C
00035a 7f0b      	ANDI R16,LOW(251)
00035b 2f24      	MOV  R18,R20
00035c 5011      	SUBI R17,LOW(1)
00035d c001      	RJMP _0x202004D
                 _0x202004C:
00035e e320      	LDI  R18,LOW(48)
                 _0x202004D:
00035f c001      	RJMP _0x202004E
                 _0x202004B:
000360 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000361 940e 0444 	CALL SUBOPT_0x4
000363 5051      	SUBI R21,LOW(1)
000364 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000365 2f31      	MOV  R19,R17
000366 ff01      	SBRS R16,1
000367 c017      	RJMP _0x202004F
                 _0x2020050:
000368 3030      	CPI  R19,0
000369 f0a1      	BREQ _0x2020052
00036a ff03      	SBRS R16,3
00036b c006      	RJMP _0x2020053
00036c 81ee      	LDD  R30,Y+6
00036d 81ff      	LDD  R31,Y+6+1
00036e 9125      	LPM  R18,Z+
00036f 83ee      	STD  Y+6,R30
000370 83ff      	STD  Y+6+1,R31
000371 c005      	RJMP _0x2020054
                 _0x2020053:
000372 81ae      	LDD  R26,Y+6
000373 81bf      	LDD  R27,Y+6+1
000374 912d      	LD   R18,X+
000375 83ae      	STD  Y+6,R26
000376 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000377 940e 0444 	CALL SUBOPT_0x4
000379 3050      	CPI  R21,0
00037a f009      	BREQ _0x2020055
00037b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00037c 5031      	SUBI R19,LOW(1)
00037d cfea      	RJMP _0x2020050
                 _0x2020052:
00037e c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00037f e320      	LDI  R18,LOW(48)
000380 81ee      	LDD  R30,Y+6
000381 81ff      	LDD  R31,Y+6+1
000382 940e 05bf 	CALL __GETW1PF
000384 87e8      	STD  Y+8,R30
000385 87f9      	STD  Y+8+1,R31
000386 81ee      	LDD  R30,Y+6
000387 81ff      	LDD  R31,Y+6+1
000388 9632      	ADIW R30,2
000389 83ee      	STD  Y+6,R30
00038a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00038b 85e8      	LDD  R30,Y+8
00038c 85f9      	LDD  R31,Y+8+1
00038d 85aa      	LDD  R26,Y+10
00038e 85bb      	LDD  R27,Y+10+1
00038f 17ae      	CP   R26,R30
000390 07bf      	CPC  R27,R31
000391 f050      	BRLO _0x202005C
000392 5f2f      	SUBI R18,-LOW(1)
000393 85a8      	LDD  R26,Y+8
000394 85b9      	LDD  R27,Y+8+1
000395 85ea      	LDD  R30,Y+10
000396 85fb      	LDD  R31,Y+10+1
000397 1bea      	SUB  R30,R26
000398 0bfb      	SBC  R31,R27
000399 87ea      	STD  Y+10,R30
00039a 87fb      	STD  Y+10+1,R31
00039b cfef      	RJMP _0x202005A
                 _0x202005C:
00039c 332a      	CPI  R18,58
00039d f028      	BRLO _0x202005D
00039e ff03      	SBRS R16,3
00039f c002      	RJMP _0x202005E
0003a0 5f29      	SUBI R18,-LOW(7)
0003a1 c001      	RJMP _0x202005F
                 _0x202005E:
0003a2 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003a3 fd04      	SBRC R16,4
0003a4 c01a      	RJMP _0x2020061
0003a5 3321      	CPI  R18,49
0003a6 f420      	BRSH _0x2020063
0003a7 85a8      	LDD  R26,Y+8
0003a8 85b9      	LDD  R27,Y+8+1
0003a9 9711      	SBIW R26,1
0003aa f409      	BRNE _0x2020062
                 _0x2020063:
0003ab c009      	RJMP _0x20200CD
                 _0x2020062:
0003ac 1753      	CP   R21,R19
0003ad f010      	BRLO _0x2020067
0003ae ff00      	SBRS R16,0
0003af c001      	RJMP _0x2020068
                 _0x2020067:
0003b0 c013      	RJMP _0x2020066
                 _0x2020068:
0003b1 e220      	LDI  R18,LOW(32)
0003b2 ff07      	SBRS R16,7
0003b3 c00b      	RJMP _0x2020069
0003b4 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003b5 6100      	ORI  R16,LOW(16)
0003b6 ff02      	SBRS R16,2
0003b7 c007      	RJMP _0x202006A
0003b8 7f0b      	ANDI R16,LOW(251)
0003b9 934a      	ST   -Y,R20
0003ba 940e 0451 	CALL SUBOPT_0x6
0003bc 3050      	CPI  R21,0
0003bd f009      	BREQ _0x202006B
0003be 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003bf 940e 0444 	CALL SUBOPT_0x4
0003c1 3050      	CPI  R21,0
0003c2 f009      	BREQ _0x202006C
0003c3 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003c4 5031      	SUBI R19,LOW(1)
0003c5 85a8      	LDD  R26,Y+8
0003c6 85b9      	LDD  R27,Y+8+1
0003c7 9712      	SBIW R26,2
0003c8 f008      	BRLO _0x2020059
0003c9 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003ca ff00      	SBRS R16,0
0003cb c008      	RJMP _0x202006D
                 _0x202006E:
0003cc 3050      	CPI  R21,0
0003cd f031      	BREQ _0x2020070
0003ce 5051      	SUBI R21,LOW(1)
0003cf e2e0      	LDI  R30,LOW(32)
0003d0 93ea      	ST   -Y,R30
0003d1 940e 0451 	CALL SUBOPT_0x6
0003d3 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003d4 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003d5 cee0      	RJMP _0x2020016
                 _0x2020018:
0003d6 85ac      	LDD  R26,Y+12
0003d7 85bd      	LDD  R27,Y+12+1
0003d8 940e 05b6 	CALL __GETW1P
0003da 940e 05cf 	CALL __LOADLOCR6
0003dc 9664      	ADIW R28,20
0003dd 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003de 92ff      	PUSH R15
0003df 2ef8      	MOV  R15,R24
0003e0 9726      	SBIW R28,6
0003e1 940e 05ca 	CALL __SAVELOCR4
0003e3 940e 0469 	CALL SUBOPT_0x9
0003e5 9730      	SBIW R30,0
0003e6 f419      	BRNE _0x2020072
0003e7 efef      	LDI  R30,LOW(65535)
0003e8 efff      	LDI  R31,HIGH(65535)
0003e9 c023      	RJMP _0x2080001
                 _0x2020072:
0003ea 01de      	MOVW R26,R28
0003eb 9616      	ADIW R26,6
0003ec 940e 05a1 	CALL __ADDW2R15
0003ee 018d      	MOVW R16,R26
0003ef 940e 0469 	CALL SUBOPT_0x9
0003f1 83ee      	STD  Y+6,R30
0003f2 83ff      	STD  Y+6+1,R31
0003f3 e0e0      	LDI  R30,LOW(0)
0003f4 87e8      	STD  Y+8,R30
0003f5 87e9      	STD  Y+8+1,R30
0003f6 01de      	MOVW R26,R28
0003f7 961a      	ADIW R26,10
0003f8 940e 05a1 	CALL __ADDW2R15
0003fa 940e 05b6 	CALL __GETW1P
0003fc 93fa      	ST   -Y,R31
0003fd 93ea      	ST   -Y,R30
0003fe 931a      	ST   -Y,R17
0003ff 930a      	ST   -Y,R16
000400 e7e0      	LDI  R30,LOW(_put_buff_G101)
000401 e0f2      	LDI  R31,HIGH(_put_buff_G101)
000402 93fa      	ST   -Y,R31
000403 93ea      	ST   -Y,R30
000404 01de      	MOVW R26,R28
000405 961a      	ADIW R26,10
000406 dea3      	RCALL __print_G101
000407 019f      	MOVW R18,R30
000408 81ae      	LDD  R26,Y+6
000409 81bf      	LDD  R27,Y+6+1
00040a e0e0      	LDI  R30,LOW(0)
00040b 93ec      	ST   X,R30
00040c 01f9      	MOVW R30,R18
                 _0x2080001:
00040d 940e 05d1 	CALL __LOADLOCR4
00040f 962a      	ADIW R28,10
000410 90ff      	POP  R15
000411 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000412 93ba      	ST   -Y,R27
000413 93aa      	ST   -Y,R26
000414 91a9          ld   r26,y+
000415 91b9          ld   r27,y+
000416 27ee          clr  r30
000417 27ff          clr  r31
                 strlen0:
000418 916d          ld   r22,x+
000419 2366          tst  r22
00041a f011          breq strlen1
00041b 9631          adiw r30,1
00041c cffb          rjmp strlen0
                 strlen1:
00041d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00041e 93ba      	ST   -Y,R27
00041f 93aa      	ST   -Y,R26
000420 27aa          clr  r26
000421 27bb          clr  r27
000422 91e9          ld   r30,y+
000423 91f9          ld   r31,y+
                 strlenf0:
000424 9005      	lpm  r0,z+
000425 2000          tst  r0
000426 f011          breq strlenf1
000427 9611          adiw r26,1
000428 cffb          rjmp strlenf0
                 strlenf1:
000429 01fd          movw r30,r26
00042a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _ICR_DATA2:
00016d           	.BYTE 0x2
                 _period:
00016f           	.BYTE 0x4
                 _old_speed:
000173           	.BYTE 0x2
                 _new_speed:
000175           	.BYTE 0x2
                 _lcd_display_limit:
000177           	.BYTE 0x2
                 _lcd_output:
000179           	.BYTE 0x10
                 __base_y_G100:
000189           	.BYTE 0x4
                 __lcd_y:
00018d           	.BYTE 0x1
                 __lcd_maxx:
00018e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
00042b e1e9      	LDI  R30,LOW(25)
00042c e0f0      	LDI  R31,HIGH(25)
00042d 164e      	CP   R4,R30
00042e 065f      	CPC  R5,R31
00042f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000430 91ed      	LD   R30,X+
000431 91fd      	LD   R31,X+
000432 9631      	ADIW R30,1
000433 93fe      	ST   -X,R31
000434 93ee      	ST   -X,R30
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000436 940e 01ee 	CALL __lcd_write_data
000438 e0a3      	LDI  R26,LOW(3)
000439 e0b0      	LDI  R27,0
00043a 940c 0470 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00043c e3a0      	LDI  R26,LOW(48)
00043d 940e 01da 	CALL __lcd_write_nibble_G100
                +
00043f ec88     +LDI R24 , LOW ( 200 )
000440 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000441 9701     +SBIW R24 , 1
000442 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000443 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000444 932a      	ST   -Y,R18
000445 85ad      	LDD  R26,Y+13
000446 85be      	LDD  R27,Y+13+1
000447 85ef      	LDD  R30,Y+15
000448 89f8      	LDD  R31,Y+15+1
000449 9509      	ICALL
00044a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
00044b 89e8      	LDD  R30,Y+16
00044c 89f9      	LDD  R31,Y+16+1
00044d 9734      	SBIW R30,4
00044e 8be8      	STD  Y+16,R30
00044f 8bf9      	STD  Y+16+1,R31
000450 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000451 85ad      	LDD  R26,Y+13
000452 85be      	LDD  R27,Y+13+1
000453 85ef      	LDD  R30,Y+15
000454 89f8      	LDD  R31,Y+15+1
000455 9509      	ICALL
000456 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000457 89a8      	LDD  R26,Y+16
000458 89b9      	LDD  R27,Y+16+1
000459 9614      	ADIW R26,4
00045a 940e 05b6 	CALL __GETW1P
00045c 83ee      	STD  Y+6,R30
00045d 83ff      	STD  Y+6+1,R31
00045e 81ae      	LDD  R26,Y+6
00045f 81bf      	LDD  R27,Y+6+1
000460 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000461 89a8      	LDD  R26,Y+16
000462 89b9      	LDD  R27,Y+16+1
000463 9614      	ADIW R26,4
000464 940e 05b6 	CALL __GETW1P
000466 87ea      	STD  Y+10,R30
000467 87fb      	STD  Y+10+1,R31
000468 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000469 01de      	MOVW R26,R28
00046a 961c      	ADIW R26,12
00046b 940e 05a1 	CALL __ADDW2R15
00046d 940e 05b6 	CALL __GETW1P
00046f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000470 9610      	adiw r26,0
000471 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000472 ed80     +LDI R24 , LOW ( 0x7D0 )
000473 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000474 9701     +SBIW R24 , 1
000475 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000476 95a8      	wdr
000477 9711      	sbiw r26,1
000478 f7c9      	brne __delay_ms0
                 __delay_ms1:
000479 9508      	ret
                 
                 __ROUND_REPACK:
00047a 2355      	TST  R21
00047b f442      	BRPL __REPACK
00047c 3850      	CPI  R21,0x80
00047d f411      	BRNE __ROUND_REPACK0
00047e ffe0      	SBRS R30,0
00047f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000480 9631      	ADIW R30,1
000481 1f69      	ADC  R22,R25
000482 1f79      	ADC  R23,R25
000483 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000484 e850      	LDI  R21,0x80
000485 2757      	EOR  R21,R23
000486 f411      	BRNE __REPACK0
000487 935f      	PUSH R21
000488 c073      	RJMP __ZERORES
                 __REPACK0:
000489 3f5f      	CPI  R21,0xFF
00048a f031      	BREQ __REPACK1
00048b 0f66      	LSL  R22
00048c 0c00      	LSL  R0
00048d 9557      	ROR  R21
00048e 9567      	ROR  R22
00048f 2f75      	MOV  R23,R21
000490 9508      	RET
                 __REPACK1:
000491 935f      	PUSH R21
000492 2000      	TST  R0
000493 f00a      	BRMI __REPACK2
000494 c073      	RJMP __MAXRES
                 __REPACK2:
000495 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000496 e850      	LDI  R21,0x80
000497 2e19      	MOV  R1,R25
000498 2215      	AND  R1,R21
000499 0f88      	LSL  R24
00049a 1f99      	ROL  R25
00049b 2795      	EOR  R25,R21
00049c 0f55      	LSL  R21
00049d 9587      	ROR  R24
                 
                 __UNPACK1:
00049e e850      	LDI  R21,0x80
00049f 2e07      	MOV  R0,R23
0004a0 2205      	AND  R0,R21
0004a1 0f66      	LSL  R22
0004a2 1f77      	ROL  R23
0004a3 2775      	EOR  R23,R21
0004a4 0f55      	LSL  R21
0004a5 9567      	ROR  R22
0004a6 9508      	RET
                 
                 __CFD1U:
0004a7 9468      	SET
0004a8 c001      	RJMP __CFD1U0
                 __CFD1:
0004a9 94e8      	CLT
                 __CFD1U0:
0004aa 935f      	PUSH R21
0004ab dff2      	RCALL __UNPACK1
0004ac 3870      	CPI  R23,0x80
0004ad f018      	BRLO __CFD10
0004ae 3f7f      	CPI  R23,0xFF
0004af f408      	BRCC __CFD10
0004b0 c04b      	RJMP __ZERORES
                 __CFD10:
0004b1 e156      	LDI  R21,22
0004b2 1b57      	SUB  R21,R23
0004b3 f4aa      	BRPL __CFD11
0004b4 9551      	NEG  R21
0004b5 3058      	CPI  R21,8
0004b6 f40e      	BRTC __CFD19
0004b7 3059      	CPI  R21,9
                 __CFD19:
0004b8 f030      	BRLO __CFD17
0004b9 efef      	SER  R30
0004ba efff      	SER  R31
0004bb ef6f      	SER  R22
0004bc e77f      	LDI  R23,0x7F
0004bd f977      	BLD  R23,7
0004be c01a      	RJMP __CFD15
                 __CFD17:
0004bf 2777      	CLR  R23
0004c0 2355      	TST  R21
0004c1 f0b9      	BREQ __CFD15
                 __CFD18:
0004c2 0fee      	LSL  R30
0004c3 1fff      	ROL  R31
0004c4 1f66      	ROL  R22
0004c5 1f77      	ROL  R23
0004c6 955a      	DEC  R21
0004c7 f7d1      	BRNE __CFD18
0004c8 c010      	RJMP __CFD15
                 __CFD11:
0004c9 2777      	CLR  R23
                 __CFD12:
0004ca 3058      	CPI  R21,8
0004cb f028      	BRLO __CFD13
0004cc 2fef      	MOV  R30,R31
0004cd 2ff6      	MOV  R31,R22
0004ce 2f67      	MOV  R22,R23
0004cf 5058      	SUBI R21,8
0004d0 cff9      	RJMP __CFD12
                 __CFD13:
0004d1 2355      	TST  R21
0004d2 f031      	BREQ __CFD15
                 __CFD14:
0004d3 9576      	LSR  R23
0004d4 9567      	ROR  R22
0004d5 95f7      	ROR  R31
0004d6 95e7      	ROR  R30
0004d7 955a      	DEC  R21
0004d8 f7d1      	BRNE __CFD14
                 __CFD15:
0004d9 2000      	TST  R0
0004da f40a      	BRPL __CFD16
0004db d0cd      	RCALL __ANEGD1
                 __CFD16:
0004dc 915f      	POP  R21
0004dd 9508      	RET
                 
                 __CDF1U:
0004de 9468      	SET
0004df c001      	RJMP __CDF1U0
                 __CDF1:
0004e0 94e8      	CLT
                 __CDF1U0:
0004e1 9730      	SBIW R30,0
0004e2 4060      	SBCI R22,0
0004e3 4070      	SBCI R23,0
0004e4 f0b1      	BREQ __CDF10
0004e5 2400      	CLR  R0
0004e6 f026      	BRTS __CDF11
0004e7 2377      	TST  R23
0004e8 f412      	BRPL __CDF11
0004e9 9400      	COM  R0
0004ea d0be      	RCALL __ANEGD1
                 __CDF11:
0004eb 2e17      	MOV  R1,R23
0004ec e17e      	LDI  R23,30
0004ed 2011      	TST  R1
                 __CDF12:
0004ee f032      	BRMI __CDF13
0004ef 957a      	DEC  R23
0004f0 0fee      	LSL  R30
0004f1 1fff      	ROL  R31
0004f2 1f66      	ROL  R22
0004f3 1c11      	ROL  R1
0004f4 cff9      	RJMP __CDF12
                 __CDF13:
0004f5 2fef      	MOV  R30,R31
0004f6 2ff6      	MOV  R31,R22
0004f7 2d61      	MOV  R22,R1
0004f8 935f      	PUSH R21
0004f9 df8a      	RCALL __REPACK
0004fa 915f      	POP  R21
                 __CDF10:
0004fb 9508      	RET
                 
                 __ZERORES:
0004fc 27ee      	CLR  R30
0004fd 27ff      	CLR  R31
0004fe 2766      	CLR  R22
0004ff 2777      	CLR  R23
000500 915f      	POP  R21
000501 9508      	RET
                 
                 __MINRES:
000502 efef      	SER  R30
000503 efff      	SER  R31
000504 e76f      	LDI  R22,0x7F
000505 ef7f      	SER  R23
000506 915f      	POP  R21
000507 9508      	RET
                 
                 __MAXRES:
000508 efef      	SER  R30
000509 efff      	SER  R31
00050a e76f      	LDI  R22,0x7F
00050b e77f      	LDI  R23,0x7F
00050c 915f      	POP  R21
00050d 9508      	RET
                 
                 __MULF12:
00050e 935f      	PUSH R21
00050f df86      	RCALL __UNPACK
000510 3870      	CPI  R23,0x80
000511 f351      	BREQ __ZERORES
000512 3890      	CPI  R25,0x80
000513 f341      	BREQ __ZERORES
000514 2401      	EOR  R0,R1
000515 9408      	SEC
000516 1f79      	ADC  R23,R25
000517 f423      	BRVC __MULF124
000518 f31c      	BRLT __ZERORES
                 __MULF125:
000519 2000      	TST  R0
00051a f33a      	BRMI __MINRES
00051b cfec      	RJMP __MAXRES
                 __MULF124:
00051c 920f      	PUSH R0
00051d 931f      	PUSH R17
00051e 932f      	PUSH R18
00051f 933f      	PUSH R19
000520 934f      	PUSH R20
000521 2711      	CLR  R17
000522 2722      	CLR  R18
000523 2799      	CLR  R25
000524 9f68      	MUL  R22,R24
000525 01a0      	MOVW R20,R0
000526 9f8f      	MUL  R24,R31
000527 2d30      	MOV  R19,R0
000528 0d41      	ADD  R20,R1
000529 1f59      	ADC  R21,R25
00052a 9f6b      	MUL  R22,R27
00052b 0d30      	ADD  R19,R0
00052c 1d41      	ADC  R20,R1
00052d 1f59      	ADC  R21,R25
00052e 9f8e      	MUL  R24,R30
00052f d027      	RCALL __MULF126
000530 9fbf      	MUL  R27,R31
000531 d025      	RCALL __MULF126
000532 9f6a      	MUL  R22,R26
000533 d023      	RCALL __MULF126
000534 9fbe      	MUL  R27,R30
000535 d01d      	RCALL __MULF127
000536 9faf      	MUL  R26,R31
000537 d01b      	RCALL __MULF127
000538 9fae      	MUL  R26,R30
000539 0d11      	ADD  R17,R1
00053a 1f29      	ADC  R18,R25
00053b 1f39      	ADC  R19,R25
00053c 1f49      	ADC  R20,R25
00053d 1f59      	ADC  R21,R25
00053e 2fe3      	MOV  R30,R19
00053f 2ff4      	MOV  R31,R20
000540 2f65      	MOV  R22,R21
000541 2f52      	MOV  R21,R18
000542 914f      	POP  R20
000543 913f      	POP  R19
000544 912f      	POP  R18
000545 911f      	POP  R17
000546 900f      	POP  R0
000547 2366      	TST  R22
000548 f02a      	BRMI __MULF122
000549 0f55      	LSL  R21
00054a 1fee      	ROL  R30
00054b 1fff      	ROL  R31
00054c 1f66      	ROL  R22
00054d c002      	RJMP __MULF123
                 __MULF122:
00054e 9573      	INC  R23
00054f f24b      	BRVS __MULF125
                 __MULF123:
000550 df29      	RCALL __ROUND_REPACK
000551 915f      	POP  R21
000552 9508      	RET
                 
                 __MULF127:
000553 0d10      	ADD  R17,R0
000554 1d21      	ADC  R18,R1
000555 1f39      	ADC  R19,R25
000556 c002      	RJMP __MULF128
                 __MULF126:
000557 0d20      	ADD  R18,R0
000558 1d31      	ADC  R19,R1
                 __MULF128:
000559 1f49      	ADC  R20,R25
00055a 1f59      	ADC  R21,R25
00055b 9508      	RET
                 
                 __DIVF21:
00055c 935f      	PUSH R21
00055d df38      	RCALL __UNPACK
00055e 3870      	CPI  R23,0x80
00055f f421      	BRNE __DIVF210
000560 2011      	TST  R1
                 __DIVF211:
000561 f40a      	BRPL __DIVF219
000562 cf9f      	RJMP __MINRES
                 __DIVF219:
000563 cfa4      	RJMP __MAXRES
                 __DIVF210:
000564 3890      	CPI  R25,0x80
000565 f409      	BRNE __DIVF218
                 __DIVF217:
000566 cf95      	RJMP __ZERORES
                 __DIVF218:
000567 2401      	EOR  R0,R1
000568 9408      	SEC
000569 0b97      	SBC  R25,R23
00056a f41b      	BRVC __DIVF216
00056b f3d4      	BRLT __DIVF217
00056c 2000      	TST  R0
00056d cff3      	RJMP __DIVF211
                 __DIVF216:
00056e 2f79      	MOV  R23,R25
00056f 931f      	PUSH R17
000570 932f      	PUSH R18
000571 933f      	PUSH R19
000572 934f      	PUSH R20
000573 2411      	CLR  R1
000574 2711      	CLR  R17
000575 2722      	CLR  R18
000576 2733      	CLR  R19
000577 2744      	CLR  R20
000578 2755      	CLR  R21
000579 e290      	LDI  R25,32
                 __DIVF212:
00057a 17ae      	CP   R26,R30
00057b 07bf      	CPC  R27,R31
00057c 0786      	CPC  R24,R22
00057d 0741      	CPC  R20,R17
00057e f030      	BRLO __DIVF213
00057f 1bae      	SUB  R26,R30
000580 0bbf      	SBC  R27,R31
000581 0b86      	SBC  R24,R22
000582 0b41      	SBC  R20,R17
000583 9408      	SEC
000584 c001      	RJMP __DIVF214
                 __DIVF213:
000585 9488      	CLC
                 __DIVF214:
000586 1f55      	ROL  R21
000587 1f22      	ROL  R18
000588 1f33      	ROL  R19
000589 1c11      	ROL  R1
00058a 1faa      	ROL  R26
00058b 1fbb      	ROL  R27
00058c 1f88      	ROL  R24
00058d 1f44      	ROL  R20
00058e 959a      	DEC  R25
00058f f751      	BRNE __DIVF212
000590 01f9      	MOVW R30,R18
000591 2d61      	MOV  R22,R1
000592 914f      	POP  R20
000593 913f      	POP  R19
000594 912f      	POP  R18
000595 911f      	POP  R17
000596 2366      	TST  R22
000597 f032      	BRMI __DIVF215
000598 0f55      	LSL  R21
000599 1fee      	ROL  R30
00059a 1fff      	ROL  R31
00059b 1f66      	ROL  R22
00059c 957a      	DEC  R23
00059d f243      	BRVS __DIVF217
                 __DIVF215:
00059e dedb      	RCALL __ROUND_REPACK
00059f 915f      	POP  R21
0005a0 9508      	RET
                 
                 __ADDW2R15:
0005a1 2400      	CLR  R0
0005a2 0daf      	ADD  R26,R15
0005a3 1db0      	ADC  R27,R0
0005a4 9508      	RET
                 
                 __ANEGW1:
0005a5 95f1      	NEG  R31
0005a6 95e1      	NEG  R30
0005a7 40f0      	SBCI R31,0
0005a8 9508      	RET
                 
                 __ANEGD1:
0005a9 95f0      	COM  R31
0005aa 9560      	COM  R22
0005ab 9570      	COM  R23
0005ac 95e1      	NEG  R30
0005ad 4fff      	SBCI R31,-1
0005ae 4f6f      	SBCI R22,-1
0005af 4f7f      	SBCI R23,-1
0005b0 9508      	RET
                 
                 __CWD1:
0005b1 2f6f      	MOV  R22,R31
0005b2 0f66      	ADD  R22,R22
0005b3 0b66      	SBC  R22,R22
0005b4 2f76      	MOV  R23,R22
0005b5 9508      	RET
                 
                 __GETW1P:
0005b6 91ed      	LD   R30,X+
0005b7 91fc      	LD   R31,X
0005b8 9711      	SBIW R26,1
0005b9 9508      	RET
                 
                 __PUTDP1:
0005ba 93ed      	ST   X+,R30
0005bb 93fd      	ST   X+,R31
0005bc 936d      	ST   X+,R22
0005bd 937c      	ST   X,R23
0005be 9508      	RET
                 
                 __GETW1PF:
0005bf 9005      	LPM  R0,Z+
0005c0 91f4      	LPM  R31,Z
0005c1 2de0      	MOV  R30,R0
0005c2 9508      	RET
                 
                 __PUTPARD1:
0005c3 937a      	ST   -Y,R23
0005c4 936a      	ST   -Y,R22
0005c5 93fa      	ST   -Y,R31
0005c6 93ea      	ST   -Y,R30
0005c7 9508      	RET
                 
                 __SAVELOCR6:
0005c8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005c9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005ca 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005cb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005cc 931a      	ST   -Y,R17
0005cd 930a      	ST   -Y,R16
0005ce 9508      	RET
                 
                 __LOADLOCR6:
0005cf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005d0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005d1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005d2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005d3 8119      	LDD  R17,Y+1
0005d4 8108      	LD   R16,Y
0005d5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  31 r1 :  20 r2 :   0 r3 :   0 r4 :  13 r5 :  11 r6 :   4 r7 :   3 
r8 :   2 r9 :   2 r10:   2 r11:   1 r12:   2 r13:   2 r14:   0 r15:   6 
r16:  34 r17:  34 r18:  41 r19:  20 r20:  23 r21:  66 r22:  45 r23:  39 
r24:  35 r25:  31 r26: 126 r27:  61 r28:  15 r29:   1 r30: 287 r31: 101 
x  :  25 y  : 210 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   9 
adiw  :  26 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  24 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :  10 brmi  :   6 brne  :  40 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  :  71 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   9 cpc   :   8 cpi   :  45 cpse  :   0 dec   :  10 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  23 ld    :  41 ldd   :  80 ldi   : 154 
lds   :  18 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  36 movw  :  19 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   3 
ori   :   7 out   :  50 pop   :  17 push  :  16 rcall :  42 ret   :  51 
reti  :   3 rjmp  :  81 rol   :  22 ror   :   7 sbc   :   8 sbci  :   7 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  86 std   :  31 sts   :  12 sub   :   5 subi  :  18 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bac   2912     76   2988   16384  18.2%
[.dseg] 0x000060 0x00018f      0     47     47    1024   4.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
