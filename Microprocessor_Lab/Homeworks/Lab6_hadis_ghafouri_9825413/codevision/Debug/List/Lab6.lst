
AVRASM ver. 2.1.30  C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm Sat Dec 24 22:04:54 2022

C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0066 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 024f 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0203 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x40000:
000033 2020
000034 2020
000035 2020
000036 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000037 2020
000038 2020
000039 2020
00003a 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
00003b 6170
00003c 7472
00003d 0031
00003e 6461      	.DB  0x70,0x61,0x72,0x74,0x31,0x0,0x61,0x64
00003f 5b63
000040 6425
000041 3d5d
000042 7525      	.DB  0x63,0x5B,0x25,0x64,0x5D,0x3D,0x25,0x75
000043 6d20
000044 0076      	.DB  0x20,0x6D,0x76,0x0
                 _0x60000:
000045 6170
000046 7472
000047 0032
000048 4441      	.DB  0x70,0x61,0x72,0x74,0x32,0x0,0x41,0x44
000049 5b43
00004a 6425
00004b 3d5d
00004c 6425      	.DB  0x43,0x5B,0x25,0x64,0x5D,0x3D,0x25,0x64
00004d 6d20
00004e 0076      	.DB  0x20,0x6D,0x76,0x0
                 _0x2000003:
00004f c080      	.DB  0x80,0xC0
                 _0x20A0060:
C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm(1140): warning: .cseg .db misalignment - padding zero byte
000050 0001      	.DB  0x1
                 _0x20A0000:
000051 4e2d
000052 4e41
000053 4900
000054 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Win 10\Desktop\university\term7\micro Lab\my_answers\Lab6_hadis_ghafouri_9825413\codevision\Debug\List\Lab6.asm(1143): warning: .cseg .db misalignment - padding zero byte
000055 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000056 0010      	.DW  0x10
000057 0160      	.DW  _0x40003
000058 0066      	.DW  _0x40000*2
                 
000059 0006      	.DW  0x06
00005a 0170      	.DW  _0x40007
00005b 0076      	.DW  _0x40000*2+16
                 
00005c 0006      	.DW  0x06
00005d 0176      	.DW  _0x60003
00005e 008a      	.DW  _0x60000*2
                 
00005f 0002      	.DW  0x02
000060 01af      	.DW  __base_y_G100
000061 009e      	.DW  _0x2000003*2
                 
000062 0001      	.DW  0x01
000063 01b3      	.DW  __seed_G105
000064 00a0      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000065 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000066 94f8      	CLI
000067 27ee      	CLR  R30
000068 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000069 e0f1      	LDI  R31,1
00006a bffb      	OUT  GICR,R31
00006b bfeb      	OUT  GICR,R30
00006c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006d e08d      	LDI  R24,(14-2)+1
00006e e0a2      	LDI  R26,2
00006f 27bb      	CLR  R27
                 __CLEAR_REG:
000070 93ed      	ST   X+,R30
000071 958a      	DEC  R24
000072 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000073 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000074 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000075 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000076 93ed      	ST   X+,R30
000077 9701      	SBIW R24,1
000078 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000079 eaec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007b 9185      	LPM  R24,Z+
00007c 9195      	LPM  R25,Z+
00007d 9700      	SBIW R24,0
00007e f061      	BREQ __GLOBAL_INI_END
00007f 91a5      	LPM  R26,Z+
000080 91b5      	LPM  R27,Z+
000081 9005      	LPM  R0,Z+
000082 9015      	LPM  R1,Z+
000083 01bf      	MOVW R22,R30
000084 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000085 9005      	LPM  R0,Z+
000086 920d      	ST   X+,R0
000087 9701      	SBIW R24,1
000088 f7e1      	BRNE __GLOBAL_INI_LOOP
000089 01fb      	MOVW R30,R22
00008a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 0093 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : MICRO LAB6 AT IUT
                 ;Version :
                 ;Date    : 12/16/2022
                 ;Author  : HADIS GHAFOURI
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;#include "general.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "initial_configs.h"
                 ;#include "subTasks.h"
                 ;
                 ;long int adc = 0;
                 ;int counter = 0;
                 ;float adc_difference = 0;
                 ;float myocr, duty_cycle = 0;
                 ;unsigned int adc_data[LAST_ADC_INPUT - FIRST_ADC_INPUT + 1];
                 ;unsigned int adc_data_copy[8] = {0};
                 ;
                 ;void main(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001A       init_main_configs();
000093 d00f      	RCALL _init_main_configs
                 ; 0000 001B 
                 ; 0000 001C       adc_without_interrupts_configs();
000094 940e 00dc 	CALL _adc_without_interrupts_configs
                 ; 0000 001D       subTask1();
000096 940e 0116 	CALL _subTask1
                 ; 0000 001E 
                 ; 0000 001F       delay_ms(1000);
000098 940e 053c 	CALL SUBOPT_0x0
                 ; 0000 0020       init_timers();
00009a d020      	RCALL _init_timers
                 ; 0000 0021 #asm("sei");
00009b 9478      	sei
                 ; 0000 0022       adc_with_interrupts_configs();
00009c 940e 0151 	CALL _adc_with_interrupts_configs
                 ; 0000 0023       Q3_init_timer0();
00009e 940e 02a4 	CALL _Q3_init_timer0
                 ; 0000 0024       subTask3();
0000a0 940e 0255 	CALL _subTask3
                 ; 0000 0025 }
                 _0x3:
0000a2 cfff      	RJMP _0x3
                 ; .FEND
                 ;#include "general.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "initial_configs.h"
                 ;
                 ;void init_main_configs()
                 ; 0001 0005 {
                 
                 	.CSEG
                 _init_main_configs:
                 ; .FSTART _init_main_configs
                 ; 0001 0006     init_ports();
0000a3 d003      	RCALL _init_ports
                 ; 0001 0007     // init_timers();
                 ; 0001 0008     init_interrupts();
0000a4 d012      	RCALL _init_interrupts
                 ; 0001 0009     init_lcd();
0000a5 d00d      	RCALL _init_lcd
                 ; 0001 000A }
0000a6 9508      	RET
                 ; .FEND
                 ;
                 ;void init_ports()
                 ; 0001 000D {
                 _init_ports:
                 ; .FSTART _init_ports
                 ; 0001 000E     // Input/Output Ports initialization
                 ; 0001 000F     // Port A initialization
                 ; 0001 0010     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0011     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 bbea      	OUT  0x1A,R30
                 ; 0001 0012     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0013     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
0000a9 bbeb      	OUT  0x1B,R30
                 ; 0001 0014 
                 ; 0001 0015     // Port B initialization
                 ; 0001 0016     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0001 0017     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (1 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
0000aa e0e8      	LDI  R30,LOW(8)
0000ab bbe7      	OUT  0x17,R30
                 ; 0001 0018     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0001 0019     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bbe8      	OUT  0x18,R30
                 ; 0001 001A 
                 ; 0001 001B     // Port C initialization
                 ; 0001 001C     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001D     DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0) ...
0000ae bbe4      	OUT  0x14,R30
                 ; 0001 001E     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001F     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
0000af bbe5      	OUT  0x15,R30
                 ; 0001 0020 
                 ; 0001 0021     // Port D initialization
                 ; 0001 0022     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0023     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
0000b0 bbe1      	OUT  0x11,R30
                 ; 0001 0024     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0025     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
0000b1 bbe2      	OUT  0x12,R30
                 ; 0001 0026 }
0000b2 9508      	RET
                 ; .FEND
                 ;
                 ;void init_lcd()
                 ; 0001 0029 {
                 _init_lcd:
                 ; .FSTART _init_lcd
                 ; 0001 002A     // Alphanumeric LCD initialization
                 ; 0001 002B     // Connections are specified in the
                 ; 0001 002C     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 002D     // RS - PORTC Bit 0
                 ; 0001 002E     // RD - PORTC Bit 1
                 ; 0001 002F     // EN - PORTC Bit 2
                 ; 0001 0030     // D4 - PORTC Bit 4
                 ; 0001 0031     // D5 - PORTC Bit 5
                 ; 0001 0032     // D6 - PORTC Bit 6
                 ; 0001 0033     // D7 - PORTC Bit 7
                 ; 0001 0034     // Characters/line: 16
                 ; 0001 0035     lcd_init(16);
0000b3 e1a0      	LDI  R26,LOW(16)
0000b4 940e 030b 	CALL _lcd_init
                 ; 0001 0036 }
0000b6 9508      	RET
                 ; .FEND
                 ;
                 ;void init_interrupts()
                 ; 0001 0039 {
                 _init_interrupts:
                 ; .FSTART _init_interrupts
                 ; 0001 003A     // External Interrupt(s) initialization
                 ; 0001 003B     // INT0: Off
                 ; 0001 003C     // INT1: Off
                 ; 0001 003D     // INT2: Off
                 ; 0001 003E     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bfe5      	OUT  0x35,R30
                 ; 0001 003F     MCUCSR = (0 << ISC2);
0000b9 bfe4      	OUT  0x34,R30
                 ; 0001 0040 }
0000ba 9508      	RET
                 ; .FEND
                 ;
                 ;void init_timers()
                 ; 0001 0043 {
                 _init_timers:
                 ; .FSTART _init_timers
                 ; 0001 0044     // Timer/Counter 0 initialization
                 ; 0001 0045     // Clock source: System Clock
                 ; 0001 0046     // Clock value: 1000.000 kHz
                 ; 0001 0047     // Mode: Fast PWM top=0xFF
                 ; 0001 0048     // OC0 output: Non-Inverted PWM
                 ; 0001 0049     // Timer Period: 0.256 ms
                 ; 0001 004A     // Output Pulse(s):
                 ; 0001 004B     // OC0 Period: 0.256 ms Width: 0 us
                 ; 0001 004C     // TCCR0 = (1 << WGM00) | (1 << COM01) | (0 << COM00) | (1 << WGM01) | (0 << CS02) | (0 << CS01) | (1 << CS00);
                 ; 0001 004D 
                 ; 0001 004E     // Timer/Counter 0 initialization
                 ; 0001 004F     // Clock source: System Clock
                 ; 0001 0050     // Clock value: Timer 0 Stopped
                 ; 0001 0051     // Mode: Normal top=0xFF
                 ; 0001 0052     // OC0 output: Disconnected
                 ; 0001 0053     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bfe3      	OUT  0x33,R30
                 ; 0001 0054     TCNT0 = 0x00;
0000bd bfe2      	OUT  0x32,R30
                 ; 0001 0055     OCR0 = 0x80;
0000be e8e0      	LDI  R30,LOW(128)
0000bf bfec      	OUT  0x3C,R30
                 ; 0001 0056     // OCR0 = 0x00;
                 ; 0001 0057 
                 ; 0001 0058     // Timer/Counter 1 initialization
                 ; 0001 0059     // Clock source: System Clock
                 ; 0001 005A     // Clock value: Timer1 Stopped
                 ; 0001 005B     // Mode: Normal top=0xFFFF
                 ; 0001 005C     // OC1A output: Disconnected
                 ; 0001 005D     // OC1B output: Disconnected
                 ; 0001 005E     // Noise Canceler: Off
                 ; 0001 005F     // Input Capture on Falling Edge
                 ; 0001 0060     // Timer1 Overflow Interrupt: Off
                 ; 0001 0061     // Input Capture Interrupt: Off
                 ; 0001 0062     // Compare A Match Interrupt: Off
                 ; 0001 0063     // Compare B Match Interrupt: Off
                 ; 0001 0064     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bdef      	OUT  0x2F,R30
                 ; 0001 0065     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
0000c2 bdee      	OUT  0x2E,R30
                 ; 0001 0066     TCNT1H = 0x00;
0000c3 bded      	OUT  0x2D,R30
                 ; 0001 0067     TCNT1L = 0x00;
0000c4 bdec      	OUT  0x2C,R30
                 ; 0001 0068     ICR1H = 0x00;
0000c5 bde7      	OUT  0x27,R30
                 ; 0001 0069     ICR1L = 0x00;
0000c6 bde6      	OUT  0x26,R30
                 ; 0001 006A     OCR1AH = 0x00;
0000c7 bdeb      	OUT  0x2B,R30
                 ; 0001 006B     OCR1AL = 0x00;
0000c8 bdea      	OUT  0x2A,R30
                 ; 0001 006C     OCR1BH = 0x00;
0000c9 bde9      	OUT  0x29,R30
                 ; 0001 006D     OCR1BL = 0x00;
0000ca bde8      	OUT  0x28,R30
                 ; 0001 006E 
                 ; 0001 006F     // Timer/Counter 2 initialization
                 ; 0001 0070     // Clock source: System Clock
                 ; 0001 0071     // Clock value: Timer2 Stopped
                 ; 0001 0072     // Mode: Normal top=0xFF
                 ; 0001 0073     // OC2 output: Disconnected
                 ; 0001 0074     ASSR = 0 << AS2;
0000cb bde2      	OUT  0x22,R30
                 ; 0001 0075     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
0000cc bde5      	OUT  0x25,R30
                 ; 0001 0076     TCNT2 = 0x00;
0000cd bde4      	OUT  0x24,R30
                 ; 0001 0077     OCR2 = 0x00;
0000ce bde3      	OUT  0x23,R30
                 ; 0001 0078 
                 ; 0001 0079     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 007A     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
0000cf bfe9      	OUT  0x39,R30
                 ; 0001 007B     counter = 0;
0000d0 93e0 01ac 	STS  _counter,R30
0000d2 93e0 01ad 	STS  _counter+1,R30
                 ; 0001 007C }
0000d4 9508      	RET
                 ; .FEND
                 ;#include "general.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void clear_column2_lcd()
                 ; 0002 0004 {
                 
                 	.CSEG
                 _clear_column2_lcd:
                 ; .FSTART _clear_column2_lcd
                 ; 0002 0005     lcd_gotoxy(0, 1);
0000d5 940e 0540 	CALL SUBOPT_0x1
                 ; 0002 0006     lcd_puts("               ");
                +
0000d7 e6a0     +LDI R26 , LOW ( _0x40003 + ( 0 ) )
0000d8 e0b1     +LDI R27 , HIGH ( _0x40003 + ( 0 ) )
                 	__POINTW2MN _0x40003,0
0000d9 940e 02fa 	CALL _lcd_puts
                 ; 0002 0007 }
0000db 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x40003:
000160           	.BYTE 0x10
                 ;
                 ;void adc_without_interrupts_configs()
                 ; 0002 000A {
                 
                 	.CSEG
                 _adc_without_interrupts_configs:
                 ; .FSTART _adc_without_interrupts_configs
                 ; 0002 000B     // ADC initialization
                 ; 0002 000C     // ADC Clock frequency: 1000.000 kHz
                 ; 0002 000D     // ADC Voltage Reference: AVCC pin
                 ; 0002 000E     // ADC Auto Trigger Source: Free Running
                 ; 0002 000F     ADMUX = ADC_VREF_TYPE;
0000dc e4e0      	LDI  R30,LOW(64)
0000dd b9e7      	OUT  0x7,R30
                 ; 0002 0010     ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 <<  ...
0000de eae3      	LDI  R30,LOW(163)
0000df c074      	RJMP _0x20C0005
                 ; 0002 0011     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
                 ; 0002 0012 }
                 ; .FEND
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0002 0016 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0002 0017     ADMUX = adc_input | ADC_VREF_TYPE;
0000e0 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000e1 81e8      	LD   R30,Y
0000e2 64e0      	ORI  R30,0x40
0000e3 b9e7      	OUT  0x7,R30
                 ; 0002 0018     // Delay needed for the stabilization of the ADC input voltage
                 ; 0002 0019     delay_us(10);
                +
0000e4 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000e5 958a     +DEC R24
0000e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0002 001A     // Start the AD conversion
                 ; 0002 001B     ADCSRA |= (1 << ADSC);
0000e7 9a36      	SBI  0x6,6
                 ; 0002 001C     // Wait for the AD conversion to complete
                 ; 0002 001D     while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x40004:
0000e8 9b34      	SBIS 0x6,4
                 ; 0002 001E         ;
0000e9 cffe      	RJMP _0x40004
                 ; 0002 001F     ADCSRA |= (1 << ADIF);
0000ea 9a34      	SBI  0x6,4
                 ; 0002 0020     return ADCW;
0000eb b1e4      	IN   R30,0x4
0000ec b1f5      	IN   R31,0x4+1
0000ed 940c 0337 	JMP  _0x20C0004
                 ; 0002 0021 }
                 ; .FEND
                 ;
                 ;// return adc[i] voltage
                 ;float get_adc_voltage(int index)
                 ; 0002 0025 {
                 _get_adc_voltage:
                 ; .FSTART _get_adc_voltage
                 ; 0002 0026     // Dout or adc = (Vi/Vref) *(2^n) =>
                 ; 0002 0027     // Vi = (Dout * Vref)/(2^n)
                 ; 0002 0028     // adc : (0 - 1023) , volt: (0 - 5)
                 ; 0002 0029     // volt = (adc * 5)/1023
                 ; 0002 002A     unsigned int adc_data;
                 ; 0002 002B     float calculated_voltage;
                 ; 0002 002C     adc_data = read_adc(index); // equals to Dout or adc
0000ef 93ba      	ST   -Y,R27
0000f0 93aa      	ST   -Y,R26
0000f1 9724      	SBIW R28,4
0000f2 931a      	ST   -Y,R17
0000f3 930a      	ST   -Y,R16
                 ;	index -> Y+6
                 ;	adc_data -> R16,R17
                 ;	calculated_voltage -> Y+2
0000f4 81ae      	LDD  R26,Y+6
0000f5 dfea      	RCALL _read_adc
0000f6 018f      	MOVW R16,R30
                 ; 0002 002D 
                 ; 0002 002E     calculated_voltage = ((5 * adc_data) / (float)1023) * 1000;
                +
0000f7 e0a5     +LDI R26 , 5
0000f8 9fa0     +MUL R26 , R16
0000f9 01f0     +MOVW R30 , R0
0000fa 9fa1     +MUL R26 , R17
0000fb 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,5
0000fc 940e 0545 	CALL SUBOPT_0x2
0000fe 01df      	MOVW R26,R30
0000ff 01cb      	MOVW R24,R22
                +
000100 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000101 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000102 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000103 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000104 940e 072d 	CALL __DIVF21
                +
000106 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000107 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000108 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000109 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
00010a 940e 06df 	CALL __MULF12
00010c 940e 054a 	CALL SUBOPT_0x3
                 ; 0002 002F     return calculated_voltage;
                +
00010e 81ea     +LDD R30 , Y + 2
00010f 81fb     +LDD R31 , Y + 2 + 1
000110 816c     +LDD R22 , Y + 2 + 2
000111 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000112 8119      	LDD  R17,Y+1
000113 8108      	LDD  R16,Y+0
000114 9628      	ADIW R28,8
000115 9508      	RET
                 ; 0002 0030 }
                 ; .FEND
                 ;
                 ;void subTask1()
                 ; 0002 0033 {
                 _subTask1:
                 ; .FSTART _subTask1
                 ; 0002 0034     char lcd_output_str[16];
                 ; 0002 0035     int i;
                 ; 0002 0036     float adc_mv;
                 ; 0002 0037 
                 ; 0002 0038     lcd_gotoxy(0, 0);
000116 9764      	SBIW R28,20
000117 931a      	ST   -Y,R17
000118 930a      	ST   -Y,R16
                 ;	lcd_output_str -> Y+6
                 ;	i -> R16,R17
                 ;	adc_mv -> Y+2
000119 e0e0      	LDI  R30,LOW(0)
00011a 93ea      	ST   -Y,R30
00011b e0a0      	LDI  R26,LOW(0)
00011c 940e 02cc 	CALL _lcd_gotoxy
                 ; 0002 0039     lcd_puts("part1");
                +
00011e e7a0     +LDI R26 , LOW ( _0x40007 + ( 0 ) )
00011f e0b1     +LDI R27 , HIGH ( _0x40007 + ( 0 ) )
                 	__POINTW2MN _0x40007,0
000120 940e 02fa 	CALL _lcd_puts
                 ; 0002 003A 
                 ; 0002 003B     for (i = 0; i <= 7; i++)
                +
000122 e000     +LDI R16 , LOW ( 0 )
000123 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x40009:
                +
000124 3008     +CPI R16 , LOW ( 8 )
000125 e0e0     +LDI R30 , HIGH ( 8 )
000126 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000127 f50c      	BRGE _0x4000A
                 ; 0002 003C     {
                 ; 0002 003D         adc_mv = get_adc_voltage(i); // get mili volt (mv)
000128 01d8      	MOVW R26,R16
000129 dfc5      	RCALL _get_adc_voltage
00012a 940e 054a 	CALL SUBOPT_0x3
                 ; 0002 003E         sprintf(lcd_output_str, "adc[%d]=%u mv", i, adc_mv);
00012c 01fe      	MOVW R30,R28
00012d 9636      	ADIW R30,6
00012e 93fa      	ST   -Y,R31
00012f 93ea      	ST   -Y,R30
                +
000130 e7ec     +LDI R30 , LOW ( 2 * _0x40000 + ( 22 ) )
000131 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 22 ) )
                 	__POINTW1FN _0x40000,22
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
000134 01f8      	MOVW R30,R16
000135 940e 054f 	CALL SUBOPT_0x4
                +
000137 85ea     +LDD R30 , Y + 10
000138 85fb     +LDD R31 , Y + 10 + 1
000139 856c     +LDD R22 , Y + 10 + 2
00013a 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00013b 940e 0825 	CALL __PUTPARD1
00013d 940e 0554 	CALL SUBOPT_0x5
                 ; 0002 003F 
                 ; 0002 0040         lcd_gotoxy(0, 1);
                 ; 0002 0041         lcd_puts(lcd_output_str);
00013f 01de      	MOVW R26,R28
000140 9616      	ADIW R26,6
000141 940e 02fa 	CALL _lcd_puts
                 ; 0002 0042 
                 ; 0002 0043         delay_ms(1000);
000143 940e 053c 	CALL SUBOPT_0x0
                 ; 0002 0044         clear_column2_lcd();
000145 df8f      	RCALL _clear_column2_lcd
                 ; 0002 0045         // lcd_clear();
                 ; 0002 0046     }
                +
000146 5f0f     +SUBI R16 , LOW ( - 1 )
000147 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000148 cfdb      	RJMP _0x40009
                 _0x4000A:
                 ; 0002 0047 
                 ; 0002 0048     delay_ms(1000);
000149 940e 053c 	CALL SUBOPT_0x0
                 ; 0002 0049     lcd_clear();
00014b 940e 02d9 	CALL _lcd_clear
                 ; 0002 004A }
00014d 8119      	LDD  R17,Y+1
00014e 8108      	LDD  R16,Y+0
00014f 9666      	ADIW R28,22
000150 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x40007:
000170           	.BYTE 0x6
                 ;#include "general.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "subTasks.h"
                 ;
                 ;// int counter = 0;
                 ;
                 ;void adc_with_interrupts_configs()
                 ; 0003 0007 {
                 
                 	.CSEG
                 _adc_with_interrupts_configs:
                 ; .FSTART _adc_with_interrupts_configs
                 ; 0003 0008     // ADC initialization
                 ; 0003 0009     // ADC Clock frequency: 1000.000 kHz
                 ; 0003 000A     // ADC Voltage Reference: AVCC pin
                 ; 0003 000B     // ADC Auto Trigger Source: Free Running
                 ; 0003 000C     ADMUX = FIRST_ADC_INPUT | ADC_VREF_TYPE;
000151 e4e0      	LDI  R30,LOW(64)
000152 b9e7      	OUT  0x7,R30
                 ; 0003 000D     ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (0 << ADIF) | (1 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 <<  ...
000153 eeeb      	LDI  R30,LOW(235)
                 _0x20C0005:
000154 b9e6      	OUT  0x6,R30
                 ; 0003 000E     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
000155 e0e0      	LDI  R30,LOW(0)
000156 bfe0      	OUT  0x30,R30
                 ; 0003 000F }
000157 9508      	RET
                 ; .FEND
                 ;
                 ;void show_interrupt_adc_output(int adc_index, int value)
                 ; 0003 0012 {
                 _show_interrupt_adc_output:
                 ; .FSTART _show_interrupt_adc_output
                 ; 0003 0013     char lcd_output_str[16];
                 ; 0003 0014 
                 ; 0003 0015     lcd_clear();
000158 93ba      	ST   -Y,R27
000159 93aa      	ST   -Y,R26
00015a 9760      	SBIW R28,16
                 ;	adc_index -> Y+18
                 ;	value -> Y+16
                 ;	lcd_output_str -> Y+0
00015b 940e 02d9 	CALL _lcd_clear
                 ; 0003 0016 
                 ; 0003 0017     lcd_gotoxy(0, 0);
00015d e0e0      	LDI  R30,LOW(0)
00015e 93ea      	ST   -Y,R30
00015f e0a0      	LDI  R26,LOW(0)
000160 940e 02cc 	CALL _lcd_gotoxy
                 ; 0003 0018     lcd_puts("part2");
                +
000162 e7a6     +LDI R26 , LOW ( _0x60003 + ( 0 ) )
000163 e0b1     +LDI R27 , HIGH ( _0x60003 + ( 0 ) )
                 	__POINTW2MN _0x60003,0
000164 940e 02fa 	CALL _lcd_puts
                 ; 0003 0019     clear_column2_lcd();
000166 df6e      	RCALL _clear_column2_lcd
                 ; 0003 001A 
                 ; 0003 001B     sprintf(lcd_output_str, "ADC[%d]=%d mv", adc_index, value);
000167 01fe      	MOVW R30,R28
000168 93fa      	ST   -Y,R31
000169 93ea      	ST   -Y,R30
                +
00016a e9e0     +LDI R30 , LOW ( 2 * _0x60000 + ( 6 ) )
00016b e0f0     +LDI R31 , HIGH ( 2 * _0x60000 + ( 6 ) )
                 	__POINTW1FN _0x60000,6
00016c 93fa      	ST   -Y,R31
00016d 93ea      	ST   -Y,R30
00016e 89ee      	LDD  R30,Y+22
00016f 89ff      	LDD  R31,Y+22+1
000170 940e 054f 	CALL SUBOPT_0x4
000172 8de8      	LDD  R30,Y+24
000173 8df9      	LDD  R31,Y+24+1
000174 940e 054f 	CALL SUBOPT_0x4
000176 940e 0554 	CALL SUBOPT_0x5
                 ; 0003 001C 
                 ; 0003 001D     lcd_gotoxy(0, 1);
                 ; 0003 001E     lcd_puts(lcd_output_str);
000178 01de      	MOVW R26,R28
000179 940e 02fa 	CALL _lcd_puts
                 ; 0003 001F 
                 ; 0003 0020     delay_ms(100);
00017b e6a4      	LDI  R26,LOW(100)
00017c e0b0      	LDI  R27,0
00017d 940e 05e5 	CALL _delay_ms
                 ; 0003 0021 }
00017f 940c 04a5 	JMP  _0x20C0003
                 ; .FEND
                 
                 	.DSEG
                 _0x60003:
000176           	.BYTE 0x6
                 ;
                 ;bool is_5_percent_difference(long int adc, int adc_index)
                 ; 0003 0024 {
                 
                 	.CSEG
                 _is_5_percent_difference:
                 ; .FSTART _is_5_percent_difference
                 ; 0003 0025     float increase, decrease = 0;
                 ; 0003 0026 
                 ; 0003 0027     adc_difference = ((adc * 5) / 100);
000181 93ba      	ST   -Y,R27
000182 93aa      	ST   -Y,R26
000183 9728      	SBIW R28,8
000184 e0e0      	LDI  R30,LOW(0)
000185 83e8      	ST   Y,R30
000186 83e9      	STD  Y+1,R30
000187 83ea      	STD  Y+2,R30
000188 83eb      	STD  Y+3,R30
                 ;	adc -> Y+10
                 ;	adc_index -> Y+8
                 ;	increase -> Y+4
                 ;	decrease -> Y+0
                +
000189 85ea     +LDD R30 , Y + 10
00018a 85fb     +LDD R31 , Y + 10 + 1
00018b 856c     +LDD R22 , Y + 10 + 2
00018c 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
                +
00018d e0a5     +LDI R26 , LOW ( 0x5 )
00018e e0b0     +LDI R27 , HIGH ( 0x5 )
00018f e080     +LDI R24 , BYTE3 ( 0x5 )
000190 e090     +LDI R25 , BYTE4 ( 0x5 )
                 	__GETD2N 0x5
000191 940e 07c7 	CALL __MULD12
000193 01df      	MOVW R26,R30
000194 01cb      	MOVW R24,R22
                +
000195 e6e4     +LDI R30 , LOW ( 0x64 )
000196 e0f0     +LDI R31 , HIGH ( 0x64 )
000197 e060     +LDI R22 , BYTE3 ( 0x64 )
000198 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
000199 940e 07f1 	CALL __DIVD21
00019b eaa0      	LDI  R26,LOW(_adc_difference)
00019c e0b1      	LDI  R27,HIGH(_adc_difference)
00019d 940e 0655 	CALL __CDF1
00019f 940e 080d 	CALL __PUTDP1
                 ; 0003 0028     increase = adc + adc_difference;
0001a1 940e 0559 	CALL SUBOPT_0x6
0001a3 940e 068f 	CALL __ADDF12
                +
0001a5 83ec     +STD Y + 4 , R30
0001a6 83fd     +STD Y + 4 + 1 , R31
0001a7 836e     +STD Y + 4 + 2 , R22
0001a8 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0003 0029     decrease = adc - adc_difference;
0001a9 940e 0559 	CALL SUBOPT_0x6
0001ab 940e 0834 	CALL __SWAPD12
0001ad 940e 0688 	CALL __SUBF12
0001af 940e 0820 	CALL __PUTD1S0
                 ; 0003 002A 
                 ; 0003 002B     return (increase < adc_data_copy[adc_index]) || (decrease > adc_data_copy[adc_index]);
0001b1 940e 0568 	CALL SUBOPT_0x7
                +
0001b3 81ac     +LDD R26 , Y + 4
0001b4 81bd     +LDD R27 , Y + 4 + 1
0001b5 818e     +LDD R24 , Y + 4 + 2
0001b6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0001b7 940e 0545 	CALL SUBOPT_0x2
0001b9 940e 0772 	CALL __CMPF12
0001bb f068      	BRLO _0x60004
0001bc 940e 0568 	CALL SUBOPT_0x7
0001be 940e 081b 	CALL __GETD2S0
0001c0 940e 0545 	CALL SUBOPT_0x2
0001c2 940e 0772 	CALL __CMPF12
0001c4 f011      	BREQ PC+3
0001c5 f008      	BRCS PC+2
0001c6 c002      	RJMP _0x60004
0001c7 e0e0      	LDI  R30,0
0001c8 c001      	RJMP _0x60005
                 _0x60004:
0001c9 e0e1      	LDI  R30,1
                 _0x60005:
0001ca 962e      	ADIW R28,14
0001cb 9508      	RET
                 ; 0003 002C }
                 ; .FEND
                 ;
                 ;void update_adc(int adc_data, int adc_index)
                 ; 0003 002F {
                 _update_adc:
                 ; .FSTART _update_adc
                 ; 0003 0030 
                 ; 0003 0031     long int temp;
                 ; 0003 0032     int value;
                 ; 0003 0033     // adc = adc_data[adc_index];
                 ; 0003 0034     if (is_5_percent_difference(adc_data, adc_index))
0001cc 93ba      	ST   -Y,R27
0001cd 93aa      	ST   -Y,R26
0001ce 9724      	SBIW R28,4
0001cf 931a      	ST   -Y,R17
0001d0 930a      	ST   -Y,R16
                 ;	adc_data -> Y+8
                 ;	adc_index -> Y+6
                 ;	temp -> Y+2
                 ;	value -> R16,R17
0001d1 85e8      	LDD  R30,Y+8
0001d2 85f9      	LDD  R31,Y+8+1
0001d3 940e 054f 	CALL SUBOPT_0x4
0001d5 85aa      	LDD  R26,Y+10
0001d6 85bb      	LDD  R27,Y+10+1
0001d7 dfa9      	RCALL _is_5_percent_difference
0001d8 30e0      	CPI  R30,0
0001d9 f129      	BREQ _0x60006
                 ; 0003 0035     {
                 ; 0003 0036         adc_data_copy[adc_index] = adc_data;
0001da 940e 0573 	CALL SUBOPT_0x8
0001dc 0fea      	ADD  R30,R26
0001dd 1ffb      	ADC  R31,R27
0001de 85a8      	LDD  R26,Y+8
0001df 85b9      	LDD  R27,Y+8+1
0001e0 83a0      	STD  Z+0,R26
0001e1 83b1      	STD  Z+1,R27
                 ; 0003 0037         temp = (long)adc_data_copy[adc_index] * 5000;
0001e2 940e 0573 	CALL SUBOPT_0x8
0001e4 0fae      	ADD  R26,R30
0001e5 1fbf      	ADC  R27,R31
0001e6 940e 0809 	CALL __GETW1P
0001e8 2766      	CLR  R22
0001e9 2777      	CLR  R23
                +
0001ea e8a8     +LDI R26 , LOW ( 0x1388 )
0001eb e1b3     +LDI R27 , HIGH ( 0x1388 )
0001ec e080     +LDI R24 , BYTE3 ( 0x1388 )
0001ed e090     +LDI R25 , BYTE4 ( 0x1388 )
                 	__GETD2N 0x1388
0001ee 940e 07c7 	CALL __MULD12
0001f0 940e 054a 	CALL SUBOPT_0x3
                 ; 0003 0038         value = temp / 1023;
                +
0001f2 81aa     +LDD R26 , Y + 2
0001f3 81bb     +LDD R27 , Y + 2 + 1
0001f4 818c     +LDD R24 , Y + 2 + 2
0001f5 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0001f6 940e 057a 	CALL SUBOPT_0x9
0001f8 018f      	MOVW R16,R30
                 ; 0003 0039         show_interrupt_adc_output(adc_index, value);
0001f9 81ee      	LDD  R30,Y+6
0001fa 81ff      	LDD  R31,Y+6+1
0001fb 93fa      	ST   -Y,R31
0001fc 93ea      	ST   -Y,R30
0001fd 01d8      	MOVW R26,R16
0001fe df59      	RCALL _show_interrupt_adc_output
                 ; 0003 003A     }
                 ; 0003 003B }
                 _0x60006:
0001ff 8119      	LDD  R17,Y+1
000200 8108      	LDD  R16,Y+0
000201 962a      	ADIW R28,10
000202 9508      	RET
                 ; .FEND
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt[ADC_INT] void adc_isr(void)
                 ; 0003 0040 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000203 940e 0581 	CALL SUBOPT_0xA
                 ; 0003 0041 
                 ; 0003 0042     static unsigned char input_index = 0;
                 ; 0003 0043     lcd_clear();
000205 940e 02d9 	CALL _lcd_clear
                 ; 0003 0044 
                 ; 0003 0045     adc_data_copy[input_index] = adc_data[input_index];
000207 91e0 01ae 	LDS  R30,_input_index_S0030004000
000209 e8ac      	LDI  R26,LOW(_adc_data_copy)
00020a e0b1      	LDI  R27,HIGH(_adc_data_copy)
00020b e0f0      	LDI  R31,0
00020c 0fee      	LSL  R30
00020d 1fff      	ROL  R31
00020e 0fea      	ADD  R30,R26
00020f 1ffb      	ADC  R31,R27
000210 010f      	MOVW R0,R30
000211 940e 058f 	CALL SUBOPT_0xB
000213 0fae      	ADD  R26,R30
000214 1fbf      	ADC  R27,R31
000215 940e 0809 	CALL __GETW1P
000217 01d0      	MOVW R26,R0
000218 93ed      	ST   X+,R30
000219 93fc      	ST   X,R31
                 ; 0003 0046     adc_data[input_index] = ADCW;
00021a 940e 058f 	CALL SUBOPT_0xB
00021c 0fae      	ADD  R26,R30
00021d 1fbf      	ADC  R27,R31
00021e b1e4      	IN   R30,0x4
00021f b1f5      	IN   R31,0x4+1
000220 93ed      	ST   X+,R30
000221 93fc      	ST   X,R31
                 ; 0003 0047     // delay_us(10);
                 ; 0003 0048     //*UPDATE
                 ; 0003 0049     // update_adc(input_index);
                 ; 0003 004A     update_adc(ADCW, counter);
000222 b1e4      	IN   R30,0x4
000223 b1f5      	IN   R31,0x4+1
000224 93fa      	ST   -Y,R31
000225 93ea      	ST   -Y,R30
000226 91a0 01ac 	LDS  R26,_counter
000228 91b0 01ad 	LDS  R27,_counter+1
00022a dfa1      	RCALL _update_adc
                 ; 0003 004B     counter++;
00022b eaac      	LDI  R26,LOW(_counter)
00022c e0b1      	LDI  R27,HIGH(_counter)
00022d 940e 0597 	CALL SUBOPT_0xC
                 ; 0003 004C     //*UPDATE
                 ; 0003 004D 
                 ; 0003 004E     // Select next ADC input
                 ; 0003 004F     if (++input_index > (LAST_ADC_INPUT - FIRST_ADC_INPUT))
00022f 91a0 01ae 	LDS  R26,_input_index_S0030004000
000231 5faf      	SUBI R26,-LOW(1)
000232 93a0 01ae 	STS  _input_index_S0030004000,R26
000234 30a8      	CPI  R26,LOW(0x8)
000235 f018      	BRLO _0x60007
                 ; 0003 0050         input_index = 0;
000236 e0e0      	LDI  R30,LOW(0)
000237 93e0 01ae 	STS  _input_index_S0030004000,R30
                 ; 0003 0051     ADMUX = (FIRST_ADC_INPUT | ADC_VREF_TYPE) + input_index;
                 _0x60007:
000239 91e0 01ae 	LDS  R30,_input_index_S0030004000
00023b 5ce0      	SUBI R30,-LOW(64)
00023c b9e7      	OUT  0x7,R30
                 ; 0003 0052     // Delay needed for the stabilization of the ADC input voltage
                 ; 0003 0053     delay_us(10);
                +
00023d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00023e 958a     +DEC R24
00023f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0003 0054 
                 ; 0003 0055     if (counter > 7)
000240 91a0 01ac 	LDS  R26,_counter
000242 91b0 01ad 	LDS  R27,_counter+1
000244 9718      	SBIW R26,8
000245 f02c      	BRLT _0x60008
                 ; 0003 0056     {
                 ; 0003 0057         counter = 0;
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 01ac 	STS  _counter,R30
000249 93e0 01ad 	STS  _counter+1,R30
                 ; 0003 0058     }
                 ; 0003 0059     // Start the AD conversion
                 ; 0003 005A     ADCSRA |= (1 << ADSC);
                 _0x60008:
00024b 9a36      	SBI  0x6,6
                 ; 0003 005B }
00024c 940e 059d 	CALL SUBOPT_0xD
00024e 9518      	RETI
                 ; .FEND
                 ;#include "subTasks.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0004 0005 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00024f 940e 0581 	CALL SUBOPT_0xA
                 ; 0004 0006     subTask3();
000251 d003      	RCALL _subTask3
                 ; 0004 0007 }
000252 940e 059d 	CALL SUBOPT_0xD
000254 9518      	RETI
                 ; .FEND
                 ;
                 ;void subTask3()
                 ; 0004 000A {
                 _subTask3:
                 ; .FSTART _subTask3
                 ; 0004 000B     // OCR0 = 2.55 * duty-cycle
                 ; 0004 000C     // convert [0%,100%] to [n=0,n=1023]
                 ; 0004 000D     // => OCR0 = 0.25 * ADC0
                 ; 0004 000E     duty_cycle = read_adc(0);
000255 e0a0      	LDI  R26,LOW(0)
000256 940e 00e0 	CALL _read_adc
000258 eaa8      	LDI  R26,LOW(_duty_cycle)
000259 e0b1      	LDI  R27,HIGH(_duty_cycle)
00025a 940e 0545 	CALL SUBOPT_0x2
00025c 940e 080d 	CALL __PUTDP1
                 ; 0004 000F     // duty_cycle = (duty_cycle * 0.087) + 5;
                 ; 0004 0010     duty_cycle = ((adc * 90) / 1023) + 5;
00025e 91e0 019c 	LDS  R30,_adc
000260 91f0 019d 	LDS  R31,_adc+1
000262 9160 019e 	LDS  R22,_adc+2
000264 9170 019f 	LDS  R23,_adc+3
                +
000266 e5aa     +LDI R26 , LOW ( 0x5A )
000267 e0b0     +LDI R27 , HIGH ( 0x5A )
000268 e080     +LDI R24 , BYTE3 ( 0x5A )
000269 e090     +LDI R25 , BYTE4 ( 0x5A )
                 	__GETD2N 0x5A
00026a 940e 07c7 	CALL __MULD12
00026c 01df      	MOVW R26,R30
00026d 01cb      	MOVW R24,R22
00026e 940e 057a 	CALL SUBOPT_0x9
                +
000270 5feb     +SUBI R30 , LOW ( - 5 )
000271 4fff     +SBCI R31 , HIGH ( - 5 )
000272 4f6f     +SBCI R22 , BYTE3 ( - 5 )
000273 4f7f     +SBCI R23 , BYTE4 ( - 5 )
                 	__ADDD1N 5
000274 eaa8      	LDI  R26,LOW(_duty_cycle)
000275 e0b1      	LDI  R27,HIGH(_duty_cycle)
000276 940e 0655 	CALL __CDF1
000278 940e 080d 	CALL __PUTDP1
                 ; 0004 0011     myocr = (2.55 * duty_cycle) + 0.5;
00027a 91e0 01a8 	LDS  R30,_duty_cycle
00027c 91f0 01a9 	LDS  R31,_duty_cycle+1
00027e 9160 01aa 	LDS  R22,_duty_cycle+2
000280 9170 01ab 	LDS  R23,_duty_cycle+3
                +
000282 e3a3     +LDI R26 , LOW ( 0x40233333 )
000283 e3b3     +LDI R27 , HIGH ( 0x40233333 )
000284 e283     +LDI R24 , BYTE3 ( 0x40233333 )
000285 e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
000286 940e 06df 	CALL __MULF12
                +
000288 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000289 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00028a e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00028b e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00028c 940e 068f 	CALL __ADDF12
00028e 93e0 01a4 	STS  _myocr,R30
000290 93f0 01a5 	STS  _myocr+1,R31
000292 9360 01a6 	STS  _myocr+2,R22
000294 9370 01a7 	STS  _myocr+3,R23
                 ; 0004 0012     OCR0 = floor(myocr);
000296 91a0 01a4 	LDS  R26,_myocr
000298 91b0 01a5 	LDS  R27,_myocr+1
00029a 9180 01a6 	LDS  R24,_myocr+2
00029c 9190 01a7 	LDS  R25,_myocr+3
00029e 940e 050c 	CALL _floor
0002a0 940e 061c 	CALL __CFD1U
0002a2 bfec      	OUT  0x3C,R30
                 ; 0004 0013 }
0002a3 9508      	RET
                 ; .FEND
                 ;
                 ;void Q3_init_timer0()
                 ; 0004 0016 {
                 _Q3_init_timer0:
                 ; .FSTART _Q3_init_timer0
                 ; 0004 0017     TCCR0 = (1 << WGM00) | (1 << COM01) | (0 << COM00) | (1 << WGM01) | (0 << CS02) | (0 << CS01) | (1 << CS00);
0002a4 e6e9      	LDI  R30,LOW(105)
0002a5 bfe3      	OUT  0x33,R30
                 ; 0004 0018     TCNT0 = 0x00;
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 bfe2      	OUT  0x32,R30
                 ; 0004 0019     OCR0 = 0x00;
0002a8 bfec      	OUT  0x3C,R30
                 ; 0004 001A 
                 ; 0004 001B     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0004 001C     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
0002a9 e0e1      	LDI  R30,LOW(1)
0002aa bfe9      	OUT  0x39,R30
                 ; 0004 001D }
0002ab 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002ac 93aa      	ST   -Y,R26
0002ad b3e5      	IN   R30,0x15
0002ae 70ef      	ANDI R30,LOW(0xF)
0002af 2fae      	MOV  R26,R30
0002b0 81e8      	LD   R30,Y
0002b1 7fe0      	ANDI R30,LOW(0xF0)
0002b2 2bea      	OR   R30,R26
0002b3 bbe5      	OUT  0x15,R30
                +
0002b4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b5 958a     +DEC R24
0002b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b7 9aaa      	SBI  0x15,2
                +
0002b8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b9 958a     +DEC R24
0002ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002bb 98aa      	CBI  0x15,2
                +
0002bc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002bd 958a     +DEC R24
0002be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002bf c077      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002c0 93aa      	ST   -Y,R26
0002c1 81a8      	LD   R26,Y
0002c2 dfe9      	RCALL __lcd_write_nibble_G100
0002c3 81e8          ld    r30,y
0002c4 95e2          swap  r30
0002c5 83e8          st    y,r30
0002c6 81a8      	LD   R26,Y
0002c7 dfe4      	RCALL __lcd_write_nibble_G100
                +
0002c8 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002c9 958a     +DEC R24
0002ca f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002cb c06b      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002cc 93aa      	ST   -Y,R26
0002cd 81e8      	LD   R30,Y
0002ce e0f0      	LDI  R31,0
0002cf 55e1      	SUBI R30,LOW(-__base_y_G100)
0002d0 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002d1 81e0      	LD   R30,Z
0002d2 81a9      	LDD  R26,Y+1
0002d3 0fae      	ADD  R26,R30
0002d4 dfeb      	RCALL __lcd_write_data
0002d5 8059      	LDD  R5,Y+1
0002d6 8048      	LDD  R4,Y+0
0002d7 9622      	ADIW R28,2
0002d8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d9 e0a2      	LDI  R26,LOW(2)
0002da 940e 05ab 	CALL SUBOPT_0xE
0002dc e0ac      	LDI  R26,LOW(12)
0002dd dfe2      	RCALL __lcd_write_data
0002de e0a1      	LDI  R26,LOW(1)
0002df 940e 05ab 	CALL SUBOPT_0xE
0002e1 e0e0      	LDI  R30,LOW(0)
0002e2 2e4e      	MOV  R4,R30
0002e3 2e5e      	MOV  R5,R30
0002e4 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002e5 93aa      	ST   -Y,R26
0002e6 81a8      	LD   R26,Y
0002e7 30aa      	CPI  R26,LOW(0xA)
0002e8 f011      	BREQ _0x2000005
0002e9 1457      	CP   R5,R7
0002ea f048      	BRLO _0x2000004
                 _0x2000005:
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 93ea      	ST   -Y,R30
0002ed 9443      	INC  R4
0002ee 2da4      	MOV  R26,R4
0002ef dfdc      	RCALL _lcd_gotoxy
0002f0 81a8      	LD   R26,Y
0002f1 30aa      	CPI  R26,LOW(0xA)
0002f2 f409      	BRNE _0x2000007
0002f3 c043      	RJMP _0x20C0004
                 _0x2000007:
                 _0x2000004:
0002f4 9453      	INC  R5
0002f5 9aa8      	SBI  0x15,0
0002f6 81a8      	LD   R26,Y
0002f7 dfc8      	RCALL __lcd_write_data
0002f8 98a8      	CBI  0x15,0
0002f9 c03d      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002fa 93ba      	ST   -Y,R27
0002fb 93aa      	ST   -Y,R26
0002fc 931a      	ST   -Y,R17
                 _0x2000008:
0002fd 81a9      	LDD  R26,Y+1
0002fe 81ba      	LDD  R27,Y+1+1
0002ff 91ed      	LD   R30,X+
000300 83a9      	STD  Y+1,R26
000301 83ba      	STD  Y+1+1,R27
000302 2f1e      	MOV  R17,R30
000303 30e0      	CPI  R30,0
000304 f019      	BREQ _0x200000A
000305 2fa1      	MOV  R26,R17
000306 dfde      	RCALL _lcd_putchar
000307 cff5      	RJMP _0x2000008
                 _0x200000A:
000308 8118      	LDD  R17,Y+0
000309 9623      	ADIW R28,3
00030a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00030b 93aa      	ST   -Y,R26
00030c b3e4      	IN   R30,0x14
00030d 6fe0      	ORI  R30,LOW(0xF0)
00030e bbe4      	OUT  0x14,R30
00030f 9aa2      	SBI  0x14,2
000310 9aa0      	SBI  0x14,0
000311 9aa1      	SBI  0x14,1
000312 98aa      	CBI  0x15,2
000313 98a8      	CBI  0x15,0
000314 98a9      	CBI  0x15,1
000315 8078      	LDD  R7,Y+0
000316 81e8      	LD   R30,Y
000317 58e0      	SUBI R30,-LOW(128)
                +
000318 93e0 01b1+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00031a 81e8      	LD   R30,Y
00031b 54e0      	SUBI R30,-LOW(192)
                +
00031c 93e0 01b2+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00031e e1a4      	LDI  R26,LOW(20)
00031f e0b0      	LDI  R27,0
000320 940e 05e5 	CALL _delay_ms
000322 940e 05b1 	CALL SUBOPT_0xF
000324 940e 05b1 	CALL SUBOPT_0xF
000326 940e 05b1 	CALL SUBOPT_0xF
000328 e2a0      	LDI  R26,LOW(32)
000329 df82      	RCALL __lcd_write_nibble_G100
                +
00032a ec88     +LDI R24 , LOW ( 200 )
00032b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00032c 9701     +SBIW R24 , 1
00032d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00032e e2a8      	LDI  R26,LOW(40)
00032f df90      	RCALL __lcd_write_data
000330 e0a4      	LDI  R26,LOW(4)
000331 df8e      	RCALL __lcd_write_data
000332 e8a5      	LDI  R26,LOW(133)
000333 df8c      	RCALL __lcd_write_data
000334 e0a6      	LDI  R26,LOW(6)
000335 df8a      	RCALL __lcd_write_data
000336 dfa2      	RCALL _lcd_clear
                 _0x20C0004:
000337 9621      	ADIW R28,1
000338 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000339 93ba      	ST   -Y,R27
00033a 93aa      	ST   -Y,R26
00033b 931a      	ST   -Y,R17
00033c 930a      	ST   -Y,R16
00033d 81aa      	LDD  R26,Y+2
00033e 81bb      	LDD  R27,Y+2+1
00033f 9612      	ADIW R26,2
000340 940e 0809 	CALL __GETW1P
000342 9730      	SBIW R30,0
000343 f129      	BREQ _0x2020010
000344 81aa      	LDD  R26,Y+2
000345 81bb      	LDD  R27,Y+2+1
000346 9614      	ADIW R26,4
000347 940e 0809 	CALL __GETW1P
000349 018f      	MOVW R16,R30
00034a 9730      	SBIW R30,0
00034b f061      	BREQ _0x2020012
                +
00034c 3002     +CPI R16 , LOW ( 2 )
00034d e0e0     +LDI R30 , HIGH ( 2 )
00034e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00034f f080      	BRLO _0x2020013
000350 01f8      	MOVW R30,R16
000351 9731      	SBIW R30,1
000352 018f      	MOVW R16,R30
                +
000353 81aa     +LDD R26 , Y + 2
000354 81bb     +LDD R27 , Y + 2 + 1
000355 9614     +ADIW R26 , 4
000356 93ed     +ST X + , R30
000357 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000358 81aa      	LDD  R26,Y+2
000359 81bb      	LDD  R27,Y+2+1
00035a 9612      	ADIW R26,2
00035b 940e 0597 	CALL SUBOPT_0xC
00035d 9731      	SBIW R30,1
00035e 81ac      	LDD  R26,Y+4
00035f 83a0      	STD  Z+0,R26
                 _0x2020013:
000360 81aa      	LDD  R26,Y+2
000361 81bb      	LDD  R27,Y+2+1
000362 940e 0809 	CALL __GETW1P
000364 23ff      	TST  R31
000365 f012      	BRMI _0x2020014
000366 940e 0597 	CALL SUBOPT_0xC
                 _0x2020014:
000368 c006      	RJMP _0x2020015
                 _0x2020010:
000369 81aa      	LDD  R26,Y+2
00036a 81bb      	LDD  R27,Y+2+1
00036b efef      	LDI  R30,LOW(65535)
00036c efff      	LDI  R31,HIGH(65535)
00036d 93ed      	ST   X+,R30
00036e 93fc      	ST   X,R31
                 _0x2020015:
00036f 8119      	LDD  R17,Y+1
000370 8108      	LDD  R16,Y+0
000371 9625      	ADIW R28,5
000372 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000373 93ba      	ST   -Y,R27
000374 93aa      	ST   -Y,R26
000375 9726      	SBIW R28,6
000376 940e 0841 	CALL __SAVELOCR6
000378 e010      	LDI  R17,0
000379 85ac      	LDD  R26,Y+12
00037a 85bd      	LDD  R27,Y+12+1
00037b e0e0      	LDI  R30,LOW(0)
00037c e0f0      	LDI  R31,HIGH(0)
00037d 93ed      	ST   X+,R30
00037e 93fc      	ST   X,R31
                 _0x2020016:
00037f 89ea      	LDD  R30,Y+18
000380 89fb      	LDD  R31,Y+18+1
000381 9631      	ADIW R30,1
000382 8bea      	STD  Y+18,R30
000383 8bfb      	STD  Y+18+1,R31
000384 9731      	SBIW R30,1
000385 91e4      	LPM  R30,Z
000386 2f2e      	MOV  R18,R30
000387 30e0      	CPI  R30,0
000388 f409      	BRNE PC+2
000389 c115      	RJMP _0x2020018
00038a 2fe1      	MOV  R30,R17
00038b 30e0      	CPI  R30,0
00038c f439      	BRNE _0x202001C
00038d 3225      	CPI  R18,37
00038e f411      	BRNE _0x202001D
00038f e011      	LDI  R17,LOW(1)
000390 c002      	RJMP _0x202001E
                 _0x202001D:
000391 940e 05b9 	CALL SUBOPT_0x10
                 _0x202001E:
000393 c10a      	RJMP _0x202001B
                 _0x202001C:
000394 30e1      	CPI  R30,LOW(0x1)
000395 f4a9      	BRNE _0x202001F
000396 3225      	CPI  R18,37
000397 f419      	BRNE _0x2020020
000398 940e 05b9 	CALL SUBOPT_0x10
00039a c102      	RJMP _0x20200CC
                 _0x2020020:
00039b e012      	LDI  R17,LOW(2)
00039c e040      	LDI  R20,LOW(0)
00039d e000      	LDI  R16,LOW(0)
00039e 322d      	CPI  R18,45
00039f f411      	BRNE _0x2020021
0003a0 e001      	LDI  R16,LOW(1)
0003a1 c0fc      	RJMP _0x202001B
                 _0x2020021:
0003a2 322b      	CPI  R18,43
0003a3 f411      	BRNE _0x2020022
0003a4 e24b      	LDI  R20,LOW(43)
0003a5 c0f8      	RJMP _0x202001B
                 _0x2020022:
0003a6 3220      	CPI  R18,32
0003a7 f411      	BRNE _0x2020023
0003a8 e240      	LDI  R20,LOW(32)
0003a9 c0f4      	RJMP _0x202001B
                 _0x2020023:
0003aa c002      	RJMP _0x2020024
                 _0x202001F:
0003ab 30e2      	CPI  R30,LOW(0x2)
0003ac f439      	BRNE _0x2020025
                 _0x2020024:
0003ad e050      	LDI  R21,LOW(0)
0003ae e013      	LDI  R17,LOW(3)
0003af 3320      	CPI  R18,48
0003b0 f411      	BRNE _0x2020026
0003b1 6800      	ORI  R16,LOW(128)
0003b2 c0eb      	RJMP _0x202001B
                 _0x2020026:
0003b3 c003      	RJMP _0x2020027
                 _0x2020025:
0003b4 30e3      	CPI  R30,LOW(0x3)
0003b5 f009      	BREQ PC+2
0003b6 c0e7      	RJMP _0x202001B
                 _0x2020027:
0003b7 3320      	CPI  R18,48
0003b8 f010      	BRLO _0x202002A
0003b9 332a      	CPI  R18,58
0003ba f008      	BRLO _0x202002B
                 _0x202002A:
0003bb c007      	RJMP _0x2020029
                 _0x202002B:
0003bc e0aa      	LDI  R26,LOW(10)
0003bd 9f5a      	MUL  R21,R26
0003be 2d50      	MOV  R21,R0
0003bf 2fe2      	MOV  R30,R18
0003c0 53e0      	SUBI R30,LOW(48)
0003c1 0f5e      	ADD  R21,R30
0003c2 c0db      	RJMP _0x202001B
                 _0x2020029:
0003c3 2fe2      	MOV  R30,R18
0003c4 36e3      	CPI  R30,LOW(0x63)
0003c5 f449      	BRNE _0x202002F
0003c6 940e 05c0 	CALL SUBOPT_0x11
0003c8 89e8      	LDD  R30,Y+16
0003c9 89f9      	LDD  R31,Y+16+1
0003ca 81a4      	LDD  R26,Z+4
0003cb 93aa      	ST   -Y,R26
0003cc 940e 05c6 	CALL SUBOPT_0x12
0003ce c0ce      	RJMP _0x2020030
                 _0x202002F:
0003cf 37e3      	CPI  R30,LOW(0x73)
0003d0 f441      	BRNE _0x2020032
0003d1 940e 05c0 	CALL SUBOPT_0x11
0003d3 940e 05cc 	CALL SUBOPT_0x13
0003d5 940e 0523 	CALL _strlen
0003d7 2f1e      	MOV  R17,R30
0003d8 c00a      	RJMP _0x2020033
                 _0x2020032:
0003d9 37e0      	CPI  R30,LOW(0x70)
0003da f461      	BRNE _0x2020035
0003db 940e 05c0 	CALL SUBOPT_0x11
0003dd 940e 05cc 	CALL SUBOPT_0x13
0003df 940e 052f 	CALL _strlenf
0003e1 2f1e      	MOV  R17,R30
0003e2 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003e3 6002      	ORI  R16,LOW(2)
0003e4 770f      	ANDI R16,LOW(127)
0003e5 e030      	LDI  R19,LOW(0)
0003e6 c034      	RJMP _0x2020036
                 _0x2020035:
0003e7 36e4      	CPI  R30,LOW(0x64)
0003e8 f011      	BREQ _0x2020039
0003e9 36e9      	CPI  R30,LOW(0x69)
0003ea f411      	BRNE _0x202003A
                 _0x2020039:
0003eb 6004      	ORI  R16,LOW(4)
0003ec c002      	RJMP _0x202003B
                 _0x202003A:
0003ed 37e5      	CPI  R30,LOW(0x75)
0003ee f431      	BRNE _0x202003C
                 _0x202003B:
0003ef e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003f0 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003f1 83ee      	STD  Y+6,R30
0003f2 83ff      	STD  Y+6+1,R31
0003f3 e015      	LDI  R17,LOW(5)
0003f4 c00c      	RJMP _0x202003D
                 _0x202003C:
0003f5 35e8      	CPI  R30,LOW(0x58)
0003f6 f411      	BRNE _0x202003F
0003f7 6008      	ORI  R16,LOW(8)
0003f8 c003      	RJMP _0x2020040
                 _0x202003F:
0003f9 37e8      	CPI  R30,LOW(0x78)
0003fa f009      	BREQ PC+2
0003fb c0a1      	RJMP _0x2020071
                 _0x2020040:
0003fc e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0003fd e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003fe 83ee      	STD  Y+6,R30
0003ff 83ff      	STD  Y+6+1,R31
000400 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000401 ff02      	SBRS R16,2
000402 c014      	RJMP _0x2020042
000403 940e 05c0 	CALL SUBOPT_0x11
000405 940e 05d6 	CALL SUBOPT_0x14
000407 85ab      	LDD  R26,Y+11
000408 23aa      	TST  R26
000409 f43a      	BRPL _0x2020043
00040a 85ea      	LDD  R30,Y+10
00040b 85fb      	LDD  R31,Y+10+1
00040c 940e 0796 	CALL __ANEGW1
00040e 87ea      	STD  Y+10,R30
00040f 87fb      	STD  Y+10+1,R31
000410 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000411 3040      	CPI  R20,0
000412 f011      	BREQ _0x2020044
000413 5f1f      	SUBI R17,-LOW(1)
000414 c001      	RJMP _0x2020045
                 _0x2020044:
000415 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000416 c004      	RJMP _0x2020046
                 _0x2020042:
000417 940e 05c0 	CALL SUBOPT_0x11
000419 940e 05d6 	CALL SUBOPT_0x14
                 _0x2020046:
                 _0x2020036:
00041b fd00      	SBRC R16,0
00041c c011      	RJMP _0x2020047
                 _0x2020048:
00041d 1715      	CP   R17,R21
00041e f478      	BRSH _0x202004A
00041f ff07      	SBRS R16,7
000420 c008      	RJMP _0x202004B
000421 ff02      	SBRS R16,2
000422 c004      	RJMP _0x202004C
000423 7f0b      	ANDI R16,LOW(251)
000424 2f24      	MOV  R18,R20
000425 5011      	SUBI R17,LOW(1)
000426 c001      	RJMP _0x202004D
                 _0x202004C:
000427 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000428 c001      	RJMP _0x202004E
                 _0x202004B:
000429 e220      	LDI  R18,LOW(32)
                 _0x202004E:
00042a 940e 05b9 	CALL SUBOPT_0x10
00042c 5051      	SUBI R21,LOW(1)
00042d cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00042e 2f31      	MOV  R19,R17
00042f ff01      	SBRS R16,1
000430 c017      	RJMP _0x202004F
                 _0x2020050:
000431 3030      	CPI  R19,0
000432 f0a1      	BREQ _0x2020052
000433 ff03      	SBRS R16,3
000434 c006      	RJMP _0x2020053
000435 81ee      	LDD  R30,Y+6
000436 81ff      	LDD  R31,Y+6+1
000437 9125      	LPM  R18,Z+
000438 83ee      	STD  Y+6,R30
000439 83ff      	STD  Y+6+1,R31
00043a c005      	RJMP _0x2020054
                 _0x2020053:
00043b 81ae      	LDD  R26,Y+6
00043c 81bf      	LDD  R27,Y+6+1
00043d 912d      	LD   R18,X+
00043e 83ae      	STD  Y+6,R26
00043f 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000440 940e 05b9 	CALL SUBOPT_0x10
000442 3050      	CPI  R21,0
000443 f009      	BREQ _0x2020055
000444 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000445 5031      	SUBI R19,LOW(1)
000446 cfea      	RJMP _0x2020050
                 _0x2020052:
000447 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000448 e320      	LDI  R18,LOW(48)
000449 81ee      	LDD  R30,Y+6
00044a 81ff      	LDD  R31,Y+6+1
00044b 940e 0812 	CALL __GETW1PF
00044d 87e8      	STD  Y+8,R30
00044e 87f9      	STD  Y+8+1,R31
00044f 81ee      	LDD  R30,Y+6
000450 81ff      	LDD  R31,Y+6+1
000451 9632      	ADIW R30,2
000452 83ee      	STD  Y+6,R30
000453 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000454 85e8      	LDD  R30,Y+8
000455 85f9      	LDD  R31,Y+8+1
000456 85aa      	LDD  R26,Y+10
000457 85bb      	LDD  R27,Y+10+1
000458 17ae      	CP   R26,R30
000459 07bf      	CPC  R27,R31
00045a f050      	BRLO _0x202005C
00045b 5f2f      	SUBI R18,-LOW(1)
00045c 85a8      	LDD  R26,Y+8
00045d 85b9      	LDD  R27,Y+8+1
00045e 85ea      	LDD  R30,Y+10
00045f 85fb      	LDD  R31,Y+10+1
000460 1bea      	SUB  R30,R26
000461 0bfb      	SBC  R31,R27
000462 87ea      	STD  Y+10,R30
000463 87fb      	STD  Y+10+1,R31
000464 cfef      	RJMP _0x202005A
                 _0x202005C:
000465 332a      	CPI  R18,58
000466 f028      	BRLO _0x202005D
000467 ff03      	SBRS R16,3
000468 c002      	RJMP _0x202005E
000469 5f29      	SUBI R18,-LOW(7)
00046a c001      	RJMP _0x202005F
                 _0x202005E:
00046b 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00046c fd04      	SBRC R16,4
00046d c01a      	RJMP _0x2020061
00046e 3321      	CPI  R18,49
00046f f420      	BRSH _0x2020063
000470 85a8      	LDD  R26,Y+8
000471 85b9      	LDD  R27,Y+8+1
000472 9711      	SBIW R26,1
000473 f409      	BRNE _0x2020062
                 _0x2020063:
000474 c009      	RJMP _0x20200CD
                 _0x2020062:
000475 1753      	CP   R21,R19
000476 f010      	BRLO _0x2020067
000477 ff00      	SBRS R16,0
000478 c001      	RJMP _0x2020068
                 _0x2020067:
000479 c013      	RJMP _0x2020066
                 _0x2020068:
00047a e220      	LDI  R18,LOW(32)
00047b ff07      	SBRS R16,7
00047c c00b      	RJMP _0x2020069
00047d e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00047e 6100      	ORI  R16,LOW(16)
00047f ff02      	SBRS R16,2
000480 c007      	RJMP _0x202006A
000481 7f0b      	ANDI R16,LOW(251)
000482 934a      	ST   -Y,R20
000483 940e 05c6 	CALL SUBOPT_0x12
000485 3050      	CPI  R21,0
000486 f009      	BREQ _0x202006B
000487 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000488 940e 05b9 	CALL SUBOPT_0x10
00048a 3050      	CPI  R21,0
00048b f009      	BREQ _0x202006C
00048c 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00048d 5031      	SUBI R19,LOW(1)
00048e 85a8      	LDD  R26,Y+8
00048f 85b9      	LDD  R27,Y+8+1
000490 9712      	SBIW R26,2
000491 f008      	BRLO _0x2020059
000492 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000493 ff00      	SBRS R16,0
000494 c008      	RJMP _0x202006D
                 _0x202006E:
000495 3050      	CPI  R21,0
000496 f031      	BREQ _0x2020070
000497 5051      	SUBI R21,LOW(1)
000498 e2e0      	LDI  R30,LOW(32)
000499 93ea      	ST   -Y,R30
00049a 940e 05c6 	CALL SUBOPT_0x12
00049c cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00049d e010      	LDI  R17,LOW(0)
                 _0x202001B:
00049e cee0      	RJMP _0x2020016
                 _0x2020018:
00049f 85ac      	LDD  R26,Y+12
0004a0 85bd      	LDD  R27,Y+12+1
0004a1 940e 0809 	CALL __GETW1P
0004a3 940e 0848 	CALL __LOADLOCR6
                 _0x20C0003:
0004a5 9664      	ADIW R28,20
0004a6 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004a7 92ff      	PUSH R15
0004a8 2ef8      	MOV  R15,R24
0004a9 9726      	SBIW R28,6
0004aa 940e 0843 	CALL __SAVELOCR4
0004ac 940e 05de 	CALL SUBOPT_0x15
0004ae 9730      	SBIW R30,0
0004af f419      	BRNE _0x2020072
0004b0 efef      	LDI  R30,LOW(65535)
0004b1 efff      	LDI  R31,HIGH(65535)
0004b2 c023      	RJMP _0x20C0002
                 _0x2020072:
0004b3 01de      	MOVW R26,R28
0004b4 9616      	ADIW R26,6
0004b5 940e 0792 	CALL __ADDW2R15
0004b7 018d      	MOVW R16,R26
0004b8 940e 05de 	CALL SUBOPT_0x15
0004ba 83ee      	STD  Y+6,R30
0004bb 83ff      	STD  Y+6+1,R31
0004bc e0e0      	LDI  R30,LOW(0)
0004bd 87e8      	STD  Y+8,R30
0004be 87e9      	STD  Y+8+1,R30
0004bf 01de      	MOVW R26,R28
0004c0 961a      	ADIW R26,10
0004c1 940e 0792 	CALL __ADDW2R15
0004c3 940e 0809 	CALL __GETW1P
0004c5 93fa      	ST   -Y,R31
0004c6 93ea      	ST   -Y,R30
0004c7 931a      	ST   -Y,R17
0004c8 930a      	ST   -Y,R16
0004c9 e3e9      	LDI  R30,LOW(_put_buff_G101)
0004ca e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004cb 93fa      	ST   -Y,R31
0004cc 93ea      	ST   -Y,R30
0004cd 01de      	MOVW R26,R28
0004ce 961a      	ADIW R26,10
0004cf dea3      	RCALL __print_G101
0004d0 019f      	MOVW R18,R30
0004d1 81ae      	LDD  R26,Y+6
0004d2 81bf      	LDD  R27,Y+6+1
0004d3 e0e0      	LDI  R30,LOW(0)
0004d4 93ec      	ST   X,R30
0004d5 01f9      	MOVW R30,R18
                 _0x20C0002:
0004d6 940e 084a 	CALL __LOADLOCR4
0004d8 962a      	ADIW R28,10
0004d9 90ff      	POP  R15
0004da 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0004db 940e 082a 	CALL __PUTPARD2
0004dd 817b         ldd  r23,y+3
0004de 816a         ldd  r22,y+2
0004df 81f9         ldd  r31,y+1
0004e0 81e8         ld   r30,y
0004e1 fb77         bst  r23,7
0004e2 0f77         lsl  r23
0004e3 fd67         sbrc r22,7
0004e4 6071         sbr  r23,1
0004e5 2f97         mov  r25,r23
0004e6 579e         subi r25,0x7e
0004e7 f081         breq __ftrunc0
0004e8 f078         brcs __ftrunc0
0004e9 3198         cpi  r25,24
0004ea f490         brsh __ftrunc1
0004eb 27aa         clr  r26
0004ec 27bb         clr  r27
0004ed 2788         clr  r24
                 __ftrunc2:
0004ee 9408         sec
0004ef 9587         ror  r24
0004f0 95b7         ror  r27
0004f1 95a7         ror  r26
0004f2 959a         dec  r25
0004f3 f7d1         brne __ftrunc2
0004f4 23ea         and  r30,r26
0004f5 23fb         and  r31,r27
0004f6 2368         and  r22,r24
0004f7 c005         rjmp __ftrunc1
                 __ftrunc0:
0004f8 94e8         clt
0004f9 2777         clr  r23
0004fa 27ee         clr  r30
0004fb 27ff         clr  r31
0004fc 2766         clr  r22
                 __ftrunc1:
0004fd 776f         cbr  r22,0x80
0004fe 9576         lsr  r23
0004ff f408         brcc __ftrunc3
000500 6860         sbr  r22,0x80
                 __ftrunc3:
000501 f977         bld  r23,7
000502 91a9         ld   r26,y+
000503 91b9         ld   r27,y+
000504 9189         ld   r24,y+
000505 9199         ld   r25,y+
000506 17ea         cp   r30,r26
000507 07fb         cpc  r31,r27
000508 0768         cpc  r22,r24
000509 0779         cpc  r23,r25
00050a fb97         bst  r25,7
00050b 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00050c 940e 082a 	CALL __PUTPARD2
00050e 940e 081b 	CALL __GETD2S0
000510 940e 04db 	CALL _ftrunc
000512 940e 0820 	CALL __PUTD1S0
000514 f419          brne __floor1
                 __floor0:
000515 940e 0816 	CALL __GETD1S0
000517 c009      	RJMP _0x20C0001
                 __floor1:
000518 f7e6          brtc __floor0
000519 940e 0816 	CALL __GETD1S0
                +
00051b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00051c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00051d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00051e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00051f 940e 0688 	CALL __SUBF12
                 _0x20C0001:
000521 9624      	ADIW R28,4
000522 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000523 93ba      	ST   -Y,R27
000524 93aa      	ST   -Y,R26
000525 91a9          ld   r26,y+
000526 91b9          ld   r27,y+
000527 27ee          clr  r30
000528 27ff          clr  r31
                 strlen0:
000529 916d          ld   r22,x+
00052a 2366          tst  r22
00052b f011          breq strlen1
00052c 9631          adiw r30,1
00052d cffb          rjmp strlen0
                 strlen1:
00052e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00052f 93ba      	ST   -Y,R27
000530 93aa      	ST   -Y,R26
000531 27aa          clr  r26
000532 27bb          clr  r27
000533 91e9          ld   r30,y+
000534 91f9          ld   r31,y+
                 strlenf0:
000535 9005      	lpm  r0,z+
000536 2000          tst  r0
000537 f011          breq strlenf1
000538 9611          adiw r26,1
000539 cffb          rjmp strlenf0
                 strlenf1:
00053a 01fd          movw r30,r26
00053b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _adc_data:
00017c           	.BYTE 0x10
                 _adc_data_copy:
00018c           	.BYTE 0x10
                 _adc:
00019c           	.BYTE 0x4
                 _adc_difference:
0001a0           	.BYTE 0x4
                 _myocr:
0001a4           	.BYTE 0x4
                 _duty_cycle:
0001a8           	.BYTE 0x4
                 _counter:
0001ac           	.BYTE 0x2
                 _input_index_S0030004000:
0001ae           	.BYTE 0x1
                 __base_y_G100:
0001af           	.BYTE 0x4
                 __seed_G105:
0001b3           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00053c eea8      	LDI  R26,LOW(1000)
00053d e0b3      	LDI  R27,HIGH(1000)
00053e 940c 05e5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000540 e0e0      	LDI  R30,LOW(0)
000541 93ea      	ST   -Y,R30
000542 e0a1      	LDI  R26,LOW(1)
000543 940c 02cc 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000545 2766      	CLR  R22
000546 2777      	CLR  R23
000547 940e 0655 	CALL __CDF1
000549 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
00054a 83ea     +STD Y + 2 , R30
00054b 83fb     +STD Y + 2 + 1 , R31
00054c 836c     +STD Y + 2 + 2 , R22
00054d 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00054e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00054f 940e 07a2 	CALL __CWD1
000551 940e 0825 	CALL __PUTPARD1
000553 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000554 e088      	LDI  R24,8
000555 940e 04a7 	CALL _sprintf
000557 962c      	ADIW R28,12
000558 cfe7      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000559 91e0 01a0 	LDS  R30,_adc_difference
00055b 91f0 01a1 	LDS  R31,_adc_difference+1
00055d 9160 01a2 	LDS  R22,_adc_difference+2
00055f 9170 01a3 	LDS  R23,_adc_difference+3
                +
000561 85aa     +LDD R26 , Y + 10
000562 85bb     +LDD R27 , Y + 10 + 1
000563 858c     +LDD R24 , Y + 10 + 2
000564 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000565 940e 0831 	CALL __CDF2
000567 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000568 85e8      	LDD  R30,Y+8
000569 85f9      	LDD  R31,Y+8+1
00056a e8ac      	LDI  R26,LOW(_adc_data_copy)
00056b e0b1      	LDI  R27,HIGH(_adc_data_copy)
00056c 0fee      	LSL  R30
00056d 1fff      	ROL  R31
00056e 0fae      	ADD  R26,R30
00056f 1fbf      	ADC  R27,R31
000570 940e 0809 	CALL __GETW1P
000572 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000573 81ee      	LDD  R30,Y+6
000574 81ff      	LDD  R31,Y+6+1
000575 e8ac      	LDI  R26,LOW(_adc_data_copy)
000576 e0b1      	LDI  R27,HIGH(_adc_data_copy)
000577 0fee      	LSL  R30
000578 1fff      	ROL  R31
000579 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
00057a efef     +LDI R30 , LOW ( 0x3FF )
00057b e0f3     +LDI R31 , HIGH ( 0x3FF )
00057c e060     +LDI R22 , BYTE3 ( 0x3FF )
00057d e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
00057e 940e 07f1 	CALL __DIVD21
000580 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
000581 920a      	ST   -Y,R0
000582 921a      	ST   -Y,R1
000583 92fa      	ST   -Y,R15
000584 936a      	ST   -Y,R22
000585 937a      	ST   -Y,R23
000586 938a      	ST   -Y,R24
000587 939a      	ST   -Y,R25
000588 93aa      	ST   -Y,R26
000589 93ba      	ST   -Y,R27
00058a 93ea      	ST   -Y,R30
00058b 93fa      	ST   -Y,R31
00058c b7ef      	IN   R30,SREG
00058d 93ea      	ST   -Y,R30
00058e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
00058f 91e0 01ae 	LDS  R30,_input_index_S0030004000
000591 e7ac      	LDI  R26,LOW(_adc_data)
000592 e0b1      	LDI  R27,HIGH(_adc_data)
000593 e0f0      	LDI  R31,0
000594 0fee      	LSL  R30
000595 1fff      	ROL  R31
000596 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000597 91ed      	LD   R30,X+
000598 91fd      	LD   R31,X+
000599 9631      	ADIW R30,1
00059a 93fe      	ST   -X,R31
00059b 93ee      	ST   -X,R30
00059c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
00059d 91e9      	LD   R30,Y+
00059e bfef      	OUT  SREG,R30
00059f 91f9      	LD   R31,Y+
0005a0 91e9      	LD   R30,Y+
0005a1 91b9      	LD   R27,Y+
0005a2 91a9      	LD   R26,Y+
0005a3 9199      	LD   R25,Y+
0005a4 9189      	LD   R24,Y+
0005a5 9179      	LD   R23,Y+
0005a6 9169      	LD   R22,Y+
0005a7 90f9      	LD   R15,Y+
0005a8 9019      	LD   R1,Y+
0005a9 9009      	LD   R0,Y+
0005aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0005ab 940e 02c0 	CALL __lcd_write_data
0005ad e0a3      	LDI  R26,LOW(3)
0005ae e0b0      	LDI  R27,0
0005af 940c 05e5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xF:
0005b1 e3a0      	LDI  R26,LOW(48)
0005b2 940e 02ac 	CALL __lcd_write_nibble_G100
                +
0005b4 ec88     +LDI R24 , LOW ( 200 )
0005b5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0005b6 9701     +SBIW R24 , 1
0005b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0005b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
0005b9 932a      	ST   -Y,R18
0005ba 85ad      	LDD  R26,Y+13
0005bb 85be      	LDD  R27,Y+13+1
0005bc 85ef      	LDD  R30,Y+15
0005bd 89f8      	LDD  R31,Y+15+1
0005be 9509      	ICALL
0005bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
0005c0 89e8      	LDD  R30,Y+16
0005c1 89f9      	LDD  R31,Y+16+1
0005c2 9734      	SBIW R30,4
0005c3 8be8      	STD  Y+16,R30
0005c4 8bf9      	STD  Y+16+1,R31
0005c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0005c6 85ad      	LDD  R26,Y+13
0005c7 85be      	LDD  R27,Y+13+1
0005c8 85ef      	LDD  R30,Y+15
0005c9 89f8      	LDD  R31,Y+15+1
0005ca 9509      	ICALL
0005cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
0005cc 89a8      	LDD  R26,Y+16
0005cd 89b9      	LDD  R27,Y+16+1
0005ce 9614      	ADIW R26,4
0005cf 940e 0809 	CALL __GETW1P
0005d1 83ee      	STD  Y+6,R30
0005d2 83ff      	STD  Y+6+1,R31
0005d3 81ae      	LDD  R26,Y+6
0005d4 81bf      	LDD  R27,Y+6+1
0005d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
0005d6 89a8      	LDD  R26,Y+16
0005d7 89b9      	LDD  R27,Y+16+1
0005d8 9614      	ADIW R26,4
0005d9 940e 0809 	CALL __GETW1P
0005db 87ea      	STD  Y+10,R30
0005dc 87fb      	STD  Y+10+1,R31
0005dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0005de 01de      	MOVW R26,R28
0005df 961c      	ADIW R26,12
0005e0 940e 0792 	CALL __ADDW2R15
0005e2 940e 0809 	CALL __GETW1P
0005e4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005e5 9610      	adiw r26,0
0005e6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005e7 ed80     +LDI R24 , LOW ( 0x7D0 )
0005e8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005e9 9701     +SBIW R24 , 1
0005ea f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005eb 95a8      	wdr
0005ec 9711      	sbiw r26,1
0005ed f7c9      	brne __delay_ms0
                 __delay_ms1:
0005ee 9508      	ret
                 
                 __ROUND_REPACK:
0005ef 2355      	TST  R21
0005f0 f442      	BRPL __REPACK
0005f1 3850      	CPI  R21,0x80
0005f2 f411      	BRNE __ROUND_REPACK0
0005f3 ffe0      	SBRS R30,0
0005f4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005f5 9631      	ADIW R30,1
0005f6 1f69      	ADC  R22,R25
0005f7 1f79      	ADC  R23,R25
0005f8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005f9 e850      	LDI  R21,0x80
0005fa 2757      	EOR  R21,R23
0005fb f411      	BRNE __REPACK0
0005fc 935f      	PUSH R21
0005fd c0cf      	RJMP __ZERORES
                 __REPACK0:
0005fe 3f5f      	CPI  R21,0xFF
0005ff f031      	BREQ __REPACK1
000600 0f66      	LSL  R22
000601 0c00      	LSL  R0
000602 9557      	ROR  R21
000603 9567      	ROR  R22
000604 2f75      	MOV  R23,R21
000605 9508      	RET
                 __REPACK1:
000606 935f      	PUSH R21
000607 2000      	TST  R0
000608 f00a      	BRMI __REPACK2
000609 c0cf      	RJMP __MAXRES
                 __REPACK2:
00060a c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00060b e850      	LDI  R21,0x80
00060c 2e19      	MOV  R1,R25
00060d 2215      	AND  R1,R21
00060e 0f88      	LSL  R24
00060f 1f99      	ROL  R25
000610 2795      	EOR  R25,R21
000611 0f55      	LSL  R21
000612 9587      	ROR  R24
                 
                 __UNPACK1:
000613 e850      	LDI  R21,0x80
000614 2e07      	MOV  R0,R23
000615 2205      	AND  R0,R21
000616 0f66      	LSL  R22
000617 1f77      	ROL  R23
000618 2775      	EOR  R23,R21
000619 0f55      	LSL  R21
00061a 9567      	ROR  R22
00061b 9508      	RET
                 
                 __CFD1U:
00061c 9468      	SET
00061d c001      	RJMP __CFD1U0
                 __CFD1:
00061e 94e8      	CLT
                 __CFD1U0:
00061f 935f      	PUSH R21
000620 dff2      	RCALL __UNPACK1
000621 3870      	CPI  R23,0x80
000622 f018      	BRLO __CFD10
000623 3f7f      	CPI  R23,0xFF
000624 f408      	BRCC __CFD10
000625 c0a7      	RJMP __ZERORES
                 __CFD10:
000626 e156      	LDI  R21,22
000627 1b57      	SUB  R21,R23
000628 f4aa      	BRPL __CFD11
000629 9551      	NEG  R21
00062a 3058      	CPI  R21,8
00062b f40e      	BRTC __CFD19
00062c 3059      	CPI  R21,9
                 __CFD19:
00062d f030      	BRLO __CFD17
00062e efef      	SER  R30
00062f efff      	SER  R31
000630 ef6f      	SER  R22
000631 e77f      	LDI  R23,0x7F
000632 f977      	BLD  R23,7
000633 c01a      	RJMP __CFD15
                 __CFD17:
000634 2777      	CLR  R23
000635 2355      	TST  R21
000636 f0b9      	BREQ __CFD15
                 __CFD18:
000637 0fee      	LSL  R30
000638 1fff      	ROL  R31
000639 1f66      	ROL  R22
00063a 1f77      	ROL  R23
00063b 955a      	DEC  R21
00063c f7d1      	BRNE __CFD18
00063d c010      	RJMP __CFD15
                 __CFD11:
00063e 2777      	CLR  R23
                 __CFD12:
00063f 3058      	CPI  R21,8
000640 f028      	BRLO __CFD13
000641 2fef      	MOV  R30,R31
000642 2ff6      	MOV  R31,R22
000643 2f67      	MOV  R22,R23
000644 5058      	SUBI R21,8
000645 cff9      	RJMP __CFD12
                 __CFD13:
000646 2355      	TST  R21
000647 f031      	BREQ __CFD15
                 __CFD14:
000648 9576      	LSR  R23
000649 9567      	ROR  R22
00064a 95f7      	ROR  R31
00064b 95e7      	ROR  R30
00064c 955a      	DEC  R21
00064d f7d1      	BRNE __CFD14
                 __CFD15:
00064e 2000      	TST  R0
00064f f40a      	BRPL __CFD16
000650 d149      	RCALL __ANEGD1
                 __CFD16:
000651 915f      	POP  R21
000652 9508      	RET
                 
                 __CDF1U:
000653 9468      	SET
000654 c001      	RJMP __CDF1U0
                 __CDF1:
000655 94e8      	CLT
                 __CDF1U0:
000656 9730      	SBIW R30,0
000657 4060      	SBCI R22,0
000658 4070      	SBCI R23,0
000659 f0b1      	BREQ __CDF10
00065a 2400      	CLR  R0
00065b f026      	BRTS __CDF11
00065c 2377      	TST  R23
00065d f412      	BRPL __CDF11
00065e 9400      	COM  R0
00065f d13a      	RCALL __ANEGD1
                 __CDF11:
000660 2e17      	MOV  R1,R23
000661 e17e      	LDI  R23,30
000662 2011      	TST  R1
                 __CDF12:
000663 f032      	BRMI __CDF13
000664 957a      	DEC  R23
000665 0fee      	LSL  R30
000666 1fff      	ROL  R31
000667 1f66      	ROL  R22
000668 1c11      	ROL  R1
000669 cff9      	RJMP __CDF12
                 __CDF13:
00066a 2fef      	MOV  R30,R31
00066b 2ff6      	MOV  R31,R22
00066c 2d61      	MOV  R22,R1
00066d 935f      	PUSH R21
00066e df8a      	RCALL __REPACK
00066f 915f      	POP  R21
                 __CDF10:
000670 9508      	RET
                 
                 __SWAPACC:
000671 934f      	PUSH R20
000672 01af      	MOVW R20,R30
000673 01fd      	MOVW R30,R26
000674 01da      	MOVW R26,R20
000675 01ab      	MOVW R20,R22
000676 01bc      	MOVW R22,R24
000677 01ca      	MOVW R24,R20
000678 2d40      	MOV  R20,R0
000679 2c01      	MOV  R0,R1
00067a 2e14      	MOV  R1,R20
00067b 914f      	POP  R20
00067c 9508      	RET
                 
                 __UADD12:
00067d 0fea      	ADD  R30,R26
00067e 1ffb      	ADC  R31,R27
00067f 1f68      	ADC  R22,R24
000680 9508      	RET
                 
                 __NEGMAN1:
000681 95e0      	COM  R30
000682 95f0      	COM  R31
000683 9560      	COM  R22
000684 5fef      	SUBI R30,-1
000685 4fff      	SBCI R31,-1
000686 4f6f      	SBCI R22,-1
000687 9508      	RET
                 
                 __SUBF12:
000688 935f      	PUSH R21
000689 df81      	RCALL __UNPACK
00068a 3890      	CPI  R25,0x80
00068b f171      	BREQ __ADDF129
00068c e850      	LDI  R21,0x80
00068d 2615      	EOR  R1,R21
                 
00068e c004      	RJMP __ADDF120
                 
                 __ADDF12:
00068f 935f      	PUSH R21
000690 df7a      	RCALL __UNPACK
000691 3890      	CPI  R25,0x80
000692 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000693 3870      	CPI  R23,0x80
000694 f121      	BREQ __ADDF128
                 __ADDF121:
000695 2f57      	MOV  R21,R23
000696 1b59      	SUB  R21,R25
000697 f12b      	BRVS __ADDF1211
000698 f412      	BRPL __ADDF122
000699 dfd7      	RCALL __SWAPACC
00069a cffa      	RJMP __ADDF121
                 __ADDF122:
00069b 3158      	CPI  R21,24
00069c f018      	BRLO __ADDF123
00069d 27aa      	CLR  R26
00069e 27bb      	CLR  R27
00069f 2788      	CLR  R24
                 __ADDF123:
0006a0 3058      	CPI  R21,8
0006a1 f028      	BRLO __ADDF124
0006a2 2fab      	MOV  R26,R27
0006a3 2fb8      	MOV  R27,R24
0006a4 2788      	CLR  R24
0006a5 5058      	SUBI R21,8
0006a6 cff9      	RJMP __ADDF123
                 __ADDF124:
0006a7 2355      	TST  R21
0006a8 f029      	BREQ __ADDF126
                 __ADDF125:
0006a9 9586      	LSR  R24
0006aa 95b7      	ROR  R27
0006ab 95a7      	ROR  R26
0006ac 955a      	DEC  R21
0006ad f7d9      	BRNE __ADDF125
                 __ADDF126:
0006ae 2d50      	MOV  R21,R0
0006af 2551      	EOR  R21,R1
0006b0 f072      	BRMI __ADDF127
0006b1 dfcb      	RCALL __UADD12
0006b2 f438      	BRCC __ADDF129
0006b3 9567      	ROR  R22
0006b4 95f7      	ROR  R31
0006b5 95e7      	ROR  R30
0006b6 9573      	INC  R23
0006b7 f413      	BRVC __ADDF129
0006b8 c020      	RJMP __MAXRES
                 __ADDF128:
0006b9 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0006ba df3e      	RCALL __REPACK
0006bb 915f      	POP  R21
0006bc 9508      	RET
                 __ADDF1211:
0006bd f7d8      	BRCC __ADDF128
0006be cffb      	RJMP __ADDF129
                 __ADDF127:
0006bf 1bea      	SUB  R30,R26
0006c0 0bfb      	SBC  R31,R27
0006c1 0b68      	SBC  R22,R24
0006c2 f051      	BREQ __ZERORES
0006c3 f410      	BRCC __ADDF1210
0006c4 9400      	COM  R0
0006c5 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0006c6 2366      	TST  R22
0006c7 f392      	BRMI __ADDF129
0006c8 0fee      	LSL  R30
0006c9 1fff      	ROL  R31
0006ca 1f66      	ROL  R22
0006cb 957a      	DEC  R23
0006cc f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006cd 27ee      	CLR  R30
0006ce 27ff      	CLR  R31
0006cf 2766      	CLR  R22
0006d0 2777      	CLR  R23
0006d1 915f      	POP  R21
0006d2 9508      	RET
                 
                 __MINRES:
0006d3 efef      	SER  R30
0006d4 efff      	SER  R31
0006d5 e76f      	LDI  R22,0x7F
0006d6 ef7f      	SER  R23
0006d7 915f      	POP  R21
0006d8 9508      	RET
                 
                 __MAXRES:
0006d9 efef      	SER  R30
0006da efff      	SER  R31
0006db e76f      	LDI  R22,0x7F
0006dc e77f      	LDI  R23,0x7F
0006dd 915f      	POP  R21
0006de 9508      	RET
                 
                 __MULF12:
0006df 935f      	PUSH R21
0006e0 df2a      	RCALL __UNPACK
0006e1 3870      	CPI  R23,0x80
0006e2 f351      	BREQ __ZERORES
0006e3 3890      	CPI  R25,0x80
0006e4 f341      	BREQ __ZERORES
0006e5 2401      	EOR  R0,R1
0006e6 9408      	SEC
0006e7 1f79      	ADC  R23,R25
0006e8 f423      	BRVC __MULF124
0006e9 f31c      	BRLT __ZERORES
                 __MULF125:
0006ea 2000      	TST  R0
0006eb f33a      	BRMI __MINRES
0006ec cfec      	RJMP __MAXRES
                 __MULF124:
0006ed 920f      	PUSH R0
0006ee 931f      	PUSH R17
0006ef 932f      	PUSH R18
0006f0 933f      	PUSH R19
0006f1 934f      	PUSH R20
0006f2 2711      	CLR  R17
0006f3 2722      	CLR  R18
0006f4 2799      	CLR  R25
0006f5 9f68      	MUL  R22,R24
0006f6 01a0      	MOVW R20,R0
0006f7 9f8f      	MUL  R24,R31
0006f8 2d30      	MOV  R19,R0
0006f9 0d41      	ADD  R20,R1
0006fa 1f59      	ADC  R21,R25
0006fb 9f6b      	MUL  R22,R27
0006fc 0d30      	ADD  R19,R0
0006fd 1d41      	ADC  R20,R1
0006fe 1f59      	ADC  R21,R25
0006ff 9f8e      	MUL  R24,R30
000700 d027      	RCALL __MULF126
000701 9fbf      	MUL  R27,R31
000702 d025      	RCALL __MULF126
000703 9f6a      	MUL  R22,R26
000704 d023      	RCALL __MULF126
000705 9fbe      	MUL  R27,R30
000706 d01d      	RCALL __MULF127
000707 9faf      	MUL  R26,R31
000708 d01b      	RCALL __MULF127
000709 9fae      	MUL  R26,R30
00070a 0d11      	ADD  R17,R1
00070b 1f29      	ADC  R18,R25
00070c 1f39      	ADC  R19,R25
00070d 1f49      	ADC  R20,R25
00070e 1f59      	ADC  R21,R25
00070f 2fe3      	MOV  R30,R19
000710 2ff4      	MOV  R31,R20
000711 2f65      	MOV  R22,R21
000712 2f52      	MOV  R21,R18
000713 914f      	POP  R20
000714 913f      	POP  R19
000715 912f      	POP  R18
000716 911f      	POP  R17
000717 900f      	POP  R0
000718 2366      	TST  R22
000719 f02a      	BRMI __MULF122
00071a 0f55      	LSL  R21
00071b 1fee      	ROL  R30
00071c 1fff      	ROL  R31
00071d 1f66      	ROL  R22
00071e c002      	RJMP __MULF123
                 __MULF122:
00071f 9573      	INC  R23
000720 f24b      	BRVS __MULF125
                 __MULF123:
000721 decd      	RCALL __ROUND_REPACK
000722 915f      	POP  R21
000723 9508      	RET
                 
                 __MULF127:
000724 0d10      	ADD  R17,R0
000725 1d21      	ADC  R18,R1
000726 1f39      	ADC  R19,R25
000727 c002      	RJMP __MULF128
                 __MULF126:
000728 0d20      	ADD  R18,R0
000729 1d31      	ADC  R19,R1
                 __MULF128:
00072a 1f49      	ADC  R20,R25
00072b 1f59      	ADC  R21,R25
00072c 9508      	RET
                 
                 __DIVF21:
00072d 935f      	PUSH R21
00072e dedc      	RCALL __UNPACK
00072f 3870      	CPI  R23,0x80
000730 f421      	BRNE __DIVF210
000731 2011      	TST  R1
                 __DIVF211:
000732 f40a      	BRPL __DIVF219
000733 cf9f      	RJMP __MINRES
                 __DIVF219:
000734 cfa4      	RJMP __MAXRES
                 __DIVF210:
000735 3890      	CPI  R25,0x80
000736 f409      	BRNE __DIVF218
                 __DIVF217:
000737 cf95      	RJMP __ZERORES
                 __DIVF218:
000738 2401      	EOR  R0,R1
000739 9408      	SEC
00073a 0b97      	SBC  R25,R23
00073b f41b      	BRVC __DIVF216
00073c f3d4      	BRLT __DIVF217
00073d 2000      	TST  R0
00073e cff3      	RJMP __DIVF211
                 __DIVF216:
00073f 2f79      	MOV  R23,R25
000740 931f      	PUSH R17
000741 932f      	PUSH R18
000742 933f      	PUSH R19
000743 934f      	PUSH R20
000744 2411      	CLR  R1
000745 2711      	CLR  R17
000746 2722      	CLR  R18
000747 2733      	CLR  R19
000748 2744      	CLR  R20
000749 2755      	CLR  R21
00074a e290      	LDI  R25,32
                 __DIVF212:
00074b 17ae      	CP   R26,R30
00074c 07bf      	CPC  R27,R31
00074d 0786      	CPC  R24,R22
00074e 0741      	CPC  R20,R17
00074f f030      	BRLO __DIVF213
000750 1bae      	SUB  R26,R30
000751 0bbf      	SBC  R27,R31
000752 0b86      	SBC  R24,R22
000753 0b41      	SBC  R20,R17
000754 9408      	SEC
000755 c001      	RJMP __DIVF214
                 __DIVF213:
000756 9488      	CLC
                 __DIVF214:
000757 1f55      	ROL  R21
000758 1f22      	ROL  R18
000759 1f33      	ROL  R19
00075a 1c11      	ROL  R1
00075b 1faa      	ROL  R26
00075c 1fbb      	ROL  R27
00075d 1f88      	ROL  R24
00075e 1f44      	ROL  R20
00075f 959a      	DEC  R25
000760 f751      	BRNE __DIVF212
000761 01f9      	MOVW R30,R18
000762 2d61      	MOV  R22,R1
000763 914f      	POP  R20
000764 913f      	POP  R19
000765 912f      	POP  R18
000766 911f      	POP  R17
000767 2366      	TST  R22
000768 f032      	BRMI __DIVF215
000769 0f55      	LSL  R21
00076a 1fee      	ROL  R30
00076b 1fff      	ROL  R31
00076c 1f66      	ROL  R22
00076d 957a      	DEC  R23
00076e f243      	BRVS __DIVF217
                 __DIVF215:
00076f de7f      	RCALL __ROUND_REPACK
000770 915f      	POP  R21
000771 9508      	RET
                 
                 __CMPF12:
000772 2399      	TST  R25
000773 f09a      	BRMI __CMPF120
000774 2377      	TST  R23
000775 f042      	BRMI __CMPF121
000776 1797      	CP   R25,R23
000777 f048      	BRLO __CMPF122
000778 f429      	BRNE __CMPF121
000779 17ae      	CP   R26,R30
00077a 07bf      	CPC  R27,R31
00077b 0786      	CPC  R24,R22
00077c f020      	BRLO __CMPF122
00077d f031      	BREQ __CMPF123
                 __CMPF121:
00077e 9498      	CLZ
00077f 9488      	CLC
000780 9508      	RET
                 __CMPF122:
000781 9498      	CLZ
000782 9408      	SEC
000783 9508      	RET
                 __CMPF123:
000784 9418      	SEZ
000785 9488      	CLC
000786 9508      	RET
                 __CMPF120:
000787 2377      	TST  R23
000788 f7c2      	BRPL __CMPF122
000789 1797      	CP   R25,R23
00078a f398      	BRLO __CMPF121
00078b f7a9      	BRNE __CMPF122
00078c 17ea      	CP   R30,R26
00078d 07fb      	CPC  R31,R27
00078e 0768      	CPC  R22,R24
00078f f388      	BRLO __CMPF122
000790 f399      	BREQ __CMPF123
000791 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000792 2400      	CLR  R0
000793 0daf      	ADD  R26,R15
000794 1db0      	ADC  R27,R0
000795 9508      	RET
                 
                 __ANEGW1:
000796 95f1      	NEG  R31
000797 95e1      	NEG  R30
000798 40f0      	SBCI R31,0
000799 9508      	RET
                 
                 __ANEGD1:
00079a 95f0      	COM  R31
00079b 9560      	COM  R22
00079c 9570      	COM  R23
00079d 95e1      	NEG  R30
00079e 4fff      	SBCI R31,-1
00079f 4f6f      	SBCI R22,-1
0007a0 4f7f      	SBCI R23,-1
0007a1 9508      	RET
                 
                 __CWD1:
0007a2 2f6f      	MOV  R22,R31
0007a3 0f66      	ADD  R22,R22
0007a4 0b66      	SBC  R22,R22
0007a5 2f76      	MOV  R23,R22
0007a6 9508      	RET
                 
                 __MULD12U:
0007a7 9f7a      	MUL  R23,R26
0007a8 2d70      	MOV  R23,R0
0007a9 9f6b      	MUL  R22,R27
0007aa 0d70      	ADD  R23,R0
0007ab 9ff8      	MUL  R31,R24
0007ac 0d70      	ADD  R23,R0
0007ad 9fe9      	MUL  R30,R25
0007ae 0d70      	ADD  R23,R0
0007af 9f6a      	MUL  R22,R26
0007b0 2d60      	MOV  R22,R0
0007b1 0d71      	ADD  R23,R1
0007b2 9ffb      	MUL  R31,R27
0007b3 0d60      	ADD  R22,R0
0007b4 1d71      	ADC  R23,R1
0007b5 9fe8      	MUL  R30,R24
0007b6 0d60      	ADD  R22,R0
0007b7 1d71      	ADC  R23,R1
0007b8 2788      	CLR  R24
0007b9 9ffa      	MUL  R31,R26
0007ba 2df0      	MOV  R31,R0
0007bb 0d61      	ADD  R22,R1
0007bc 1f78      	ADC  R23,R24
0007bd 9feb      	MUL  R30,R27
0007be 0df0      	ADD  R31,R0
0007bf 1d61      	ADC  R22,R1
0007c0 1f78      	ADC  R23,R24
0007c1 9fea      	MUL  R30,R26
0007c2 2de0      	MOV  R30,R0
0007c3 0df1      	ADD  R31,R1
0007c4 1f68      	ADC  R22,R24
0007c5 1f78      	ADC  R23,R24
0007c6 9508      	RET
                 
                 __MULD12:
0007c7 d02e      	RCALL __CHKSIGND
0007c8 dfde      	RCALL __MULD12U
0007c9 f40e      	BRTC __MULD121
0007ca dfcf      	RCALL __ANEGD1
                 __MULD121:
0007cb 9508      	RET
                 
                 __DIVD21U:
0007cc 933f      	PUSH R19
0007cd 934f      	PUSH R20
0007ce 935f      	PUSH R21
0007cf 2400      	CLR  R0
0007d0 2411      	CLR  R1
0007d1 2744      	CLR  R20
0007d2 2755      	CLR  R21
0007d3 e230      	LDI  R19,32
                 __DIVD21U1:
0007d4 0faa      	LSL  R26
0007d5 1fbb      	ROL  R27
0007d6 1f88      	ROL  R24
0007d7 1f99      	ROL  R25
0007d8 1c00      	ROL  R0
0007d9 1c11      	ROL  R1
0007da 1f44      	ROL  R20
0007db 1f55      	ROL  R21
0007dc 1a0e      	SUB  R0,R30
0007dd 0a1f      	SBC  R1,R31
0007de 0b46      	SBC  R20,R22
0007df 0b57      	SBC  R21,R23
0007e0 f428      	BRCC __DIVD21U2
0007e1 0e0e      	ADD  R0,R30
0007e2 1e1f      	ADC  R1,R31
0007e3 1f46      	ADC  R20,R22
0007e4 1f57      	ADC  R21,R23
0007e5 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0007e6 60a1      	SBR  R26,1
                 __DIVD21U3:
0007e7 953a      	DEC  R19
0007e8 f759      	BRNE __DIVD21U1
0007e9 01fd      	MOVW R30,R26
0007ea 01bc      	MOVW R22,R24
0007eb 01d0      	MOVW R26,R0
0007ec 01ca      	MOVW R24,R20
0007ed 915f      	POP  R21
0007ee 914f      	POP  R20
0007ef 913f      	POP  R19
0007f0 9508      	RET
                 
                 __DIVD21:
0007f1 d004      	RCALL __CHKSIGND
0007f2 dfd9      	RCALL __DIVD21U
0007f3 f40e      	BRTC __DIVD211
0007f4 dfa5      	RCALL __ANEGD1
                 __DIVD211:
0007f5 9508      	RET
                 
                 __CHKSIGND:
0007f6 94e8      	CLT
0007f7 ff77      	SBRS R23,7
0007f8 c002      	RJMP __CHKSD1
0007f9 dfa0      	RCALL __ANEGD1
0007fa 9468      	SET
                 __CHKSD1:
0007fb ff97      	SBRS R25,7
0007fc c00b      	RJMP __CHKSD2
0007fd 2400      	CLR  R0
0007fe 95a0      	COM  R26
0007ff 95b0      	COM  R27
000800 9580      	COM  R24
000801 9590      	COM  R25
000802 9611      	ADIW R26,1
000803 1d80      	ADC  R24,R0
000804 1d90      	ADC  R25,R0
000805 f800      	BLD  R0,0
000806 9403      	INC  R0
000807 fa00      	BST  R0,0
                 __CHKSD2:
000808 9508      	RET
                 
                 __GETW1P:
000809 91ed      	LD   R30,X+
00080a 91fc      	LD   R31,X
00080b 9711      	SBIW R26,1
00080c 9508      	RET
                 
                 __PUTDP1:
00080d 93ed      	ST   X+,R30
00080e 93fd      	ST   X+,R31
00080f 936d      	ST   X+,R22
000810 937c      	ST   X,R23
000811 9508      	RET
                 
                 __GETW1PF:
000812 9005      	LPM  R0,Z+
000813 91f4      	LPM  R31,Z
000814 2de0      	MOV  R30,R0
000815 9508      	RET
                 
                 __GETD1S0:
000816 81e8      	LD   R30,Y
000817 81f9      	LDD  R31,Y+1
000818 816a      	LDD  R22,Y+2
000819 817b      	LDD  R23,Y+3
00081a 9508      	RET
                 
                 __GETD2S0:
00081b 81a8      	LD   R26,Y
00081c 81b9      	LDD  R27,Y+1
00081d 818a      	LDD  R24,Y+2
00081e 819b      	LDD  R25,Y+3
00081f 9508      	RET
                 
                 __PUTD1S0:
000820 83e8      	ST   Y,R30
000821 83f9      	STD  Y+1,R31
000822 836a      	STD  Y+2,R22
000823 837b      	STD  Y+3,R23
000824 9508      	RET
                 
                 __PUTPARD1:
000825 937a      	ST   -Y,R23
000826 936a      	ST   -Y,R22
000827 93fa      	ST   -Y,R31
000828 93ea      	ST   -Y,R30
000829 9508      	RET
                 
                 __PUTPARD2:
00082a 939a      	ST   -Y,R25
00082b 938a      	ST   -Y,R24
00082c 93ba      	ST   -Y,R27
00082d 93aa      	ST   -Y,R26
00082e 9508      	RET
                 
                 __CDF2U:
00082f 9468      	SET
000830 c001      	RJMP __CDF2U0
                 __CDF2:
000831 94e8      	CLT
                 __CDF2U0:
000832 d001      	RCALL __SWAPD12
000833 de22      	RCALL __CDF1U0
                 
                 __SWAPD12:
000834 2e18      	MOV  R1,R24
000835 2f86      	MOV  R24,R22
000836 2d61      	MOV  R22,R1
000837 2e19      	MOV  R1,R25
000838 2f97      	MOV  R25,R23
000839 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00083a 2e1b      	MOV  R1,R27
00083b 2fbf      	MOV  R27,R31
00083c 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00083d 2e1a      	MOV  R1,R26
00083e 2fae      	MOV  R26,R30
00083f 2de1      	MOV  R30,R1
000840 9508      	RET
                 
                 __SAVELOCR6:
000841 935a      	ST   -Y,R21
                 __SAVELOCR5:
000842 934a      	ST   -Y,R20
                 __SAVELOCR4:
000843 933a      	ST   -Y,R19
                 __SAVELOCR3:
000844 932a      	ST   -Y,R18
                 __SAVELOCR2:
000845 931a      	ST   -Y,R17
000846 930a      	ST   -Y,R16
000847 9508      	RET
                 
                 __LOADLOCR6:
000848 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000849 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00084a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00084b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00084c 8119      	LDD  R17,Y+1
00084d 8108      	LD   R16,Y
00084e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  60 r1 :  42 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  49 r17:  44 r18:  41 r19:  24 r20:  38 r21:  86 r22:  95 r23:  88 
r24:  82 r25:  62 r26: 193 r27: 105 r28:  28 r29:   1 r30: 328 r31: 145 
x  :  27 y  : 299 z  :  17 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  36 add   :  27 
adiw  :  32 and   :   5 andi  :   6 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   2 break :   0 breq  :  33 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  20 
brlt  :   3 brmi  :  10 brne  :  45 brpl  :   8 brsh  :   3 brtc  :   4 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 138 
cbi   :   5 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  12 
cp    :  10 cpc   :  13 cpi   :  53 cpse  :   0 dec   :  16 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   5 jmp   :  27 ld    :  43 ldd   : 133 ldi   : 194 
lds   :  24 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  60 movw  :  44 
mul   :  22 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  48 pop   :  22 push  :  22 rcall :  56 ret   :  80 
reti  :   2 rjmp  :  95 rol   :  35 ror   :  15 sbc   :  11 sbci  :  13 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  26 sbr   :   3 sbrc  :   3 
sbrs  :  13 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 108 std   :  47 sts   :  12 sub   :   6 subi  :  24 swap  :   1 
tst   :  21 wdr   :   1 
Instructions used: 82 out of 116 (70.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00109e   4134    120   4254   16384  26.0%
[.dseg] 0x000060 0x0001b7      0     87     87    1024   8.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
