;#include "general.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void clear_column2_lcd()
; 0002 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0005     lcd_gotoxy(0, 1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0006     lcd_puts("               ");
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0007 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0

	.DSEG
_0x40003:
	.BYTE 0x10
;
;void adc_without_interrupts_configs()
; 0002 000A {

	.CSEG
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 000B     // ADC initialization
; 0002 000C     // ADC Clock frequency: 1000.000 kHz
; 0002 000D     // ADC Voltage Reference: AVCC pin
; 0002 000E     // ADC Auto Trigger Source: Free Running
; 0002 000F     ADMUX = ADC_VREF_TYPE;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0010     ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 <<  ...
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 0011     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 0012 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0002 0016 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0017     ADMUX = adc_input | ADC_VREF_TYPE;
;PCODE: $00000024 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 0018     // Delay needed for the stabilization of the ADC input voltage
; 0002 0019     delay_us(10);
;PCODE: $00000028 VOL: 0
; 0002 001A     // Start the AD conversion
; 0002 001B     ADCSRA |= (1 << ADSC);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 001C     // Wait for the AD conversion to complete
; 0002 001D     while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 001E         ;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 001F     ADCSRA |= (1 << ADIF);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0020     return ADCW;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0021 }
;PCODE: $00000036 VOL: 0
;
;// return adc[i] voltage
;float get_adc_voltage(int index)
; 0002 0025 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0026     // Dout or adc = (Vi/Vref) *(2^n) =>
; 0002 0027     // Vi = (Dout * Vref)/(2^n)
; 0002 0028     // adc : (0 - 1023) , volt: (0 - 5)
; 0002 0029     // volt = (adc * 5)/1023
; 0002 002A     unsigned int adc_data;
; 0002 002B     float calculated_voltage;
; 0002 002C     adc_data = read_adc(index); // equals to Dout or adc
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;	index -> Y+6
;	adc_data -> R16,R17
;	calculated_voltage -> Y+2
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 002D 
; 0002 002E     calculated_voltage = ((5 * adc_data) / (float)1023) * 1000;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 002F     return calculated_voltage;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0030 }
;PCODE: $00000050 VOL: 0
;
;void subTask1()
; 0002 0033 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0034     char lcd_output_str[16];
; 0002 0035     int i;
; 0002 0036     float adc_mv;
; 0002 0037 
; 0002 0038     lcd_gotoxy(0, 0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;	lcd_output_str -> Y+6
;	i -> R16,R17
;	adc_mv -> Y+2
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 0039     lcd_puts("part1");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0002 003A 
; 0002 003B     for (i = 0; i <= 7; i++)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 003C     {
; 0002 003D         adc_mv = get_adc_voltage(i); // get mili volt (mv)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 003E         sprintf(lcd_output_str, "adc[%d]=%u mv", i, adc_mv);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0002 003F 
; 0002 0040         lcd_gotoxy(0, 1);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 0041         lcd_puts(lcd_output_str);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 0042 
; 0002 0043         delay_ms(1000);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0044         clear_column2_lcd();
;PCODE: $0000007F VOL: 0
; 0002 0045         // lcd_clear();
; 0002 0046     }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0047 
; 0002 0048     delay_ms(1000);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0049     lcd_clear();
;PCODE: $00000087 VOL: 0
; 0002 004A }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0

	.DSEG
_0x40007:
	.BYTE 0x6
