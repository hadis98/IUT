;#include "general.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "subTasks.h"
;
;// int counter = 0;
;
;void adc_with_interrupts_configs()
; 0003 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0008     // ADC initialization
; 0003 0009     // ADC Clock frequency: 1000.000 kHz
; 0003 000A     // ADC Voltage Reference: AVCC pin
; 0003 000B     // ADC Auto Trigger Source: Free Running
; 0003 000C     ADMUX = FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 000D     ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (0 << ADIF) | (1 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 <<  ...
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 000E     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 000F }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void show_interrupt_adc_output(int adc_index, int value)
; 0003 0012 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0013     char lcd_output_str[16];
; 0003 0014 
; 0003 0015     lcd_clear();
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	adc_index -> Y+18
;	value -> Y+16
;	lcd_output_str -> Y+0
;PCODE: $0000001B VOL: 0
; 0003 0016 
; 0003 0017     lcd_gotoxy(0, 0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 0018     lcd_puts("part2");
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 0019     clear_column2_lcd();
;PCODE: $00000023 VOL: 0
; 0003 001A 
; 0003 001B     sprintf(lcd_output_str, "ADC[%d]=%d mv", adc_index, value);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 001C 
; 0003 001D     lcd_gotoxy(0, 1);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0003 001E     lcd_puts(lcd_output_str);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0003 001F 
; 0003 0020     delay_ms(100);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 0021 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0

	.DSEG
_0x60003:
	.BYTE 0x6
;
;bool is_5_percent_difference(long int adc, int adc_index)
; 0003 0024 {

	.CSEG
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0025     float increase, decrease = 0;
; 0003 0026 
; 0003 0027     adc_difference = ((adc * 5) / 100);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	adc -> Y+10
;	adc_index -> Y+8
;	increase -> Y+4
;	decrease -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0003 0028     increase = adc + adc_difference;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0003 0029     decrease = adc - adc_difference;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 002A 
; 0003 002B     return (increase < adc_data_copy[adc_index]) || (decrease > adc_data_copy[adc_index]);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0003 002C }
;PCODE: $00000078 VOL: 0
;
;void update_adc(int adc_data, int adc_index)
; 0003 002F {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0003 0030 
; 0003 0031     long int temp;
; 0003 0032     int value;
; 0003 0033     // adc = adc_data[adc_index];
; 0003 0034     if (is_5_percent_difference(adc_data, adc_index))
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	adc_data -> Y+8
;	adc_index -> Y+6
;	temp -> Y+2
;	value -> R16,R17
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0003 0035     {
; 0003 0036         adc_data_copy[adc_index] = adc_data;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0003 0037         temp = (long)adc_data_copy[adc_index] * 5000;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0003 0038         value = temp / 1023;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0003 0039         show_interrupt_adc_output(adc_index, value);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0003 003A     }
; 0003 003B }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt[ADC_INT] void adc_isr(void)
; 0003 0040 {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0003 0041 
; 0003 0042     static unsigned char input_index = 0;
; 0003 0043     lcd_clear();
;PCODE: $000000A7 VOL: 0
; 0003 0044 
; 0003 0045     adc_data_copy[input_index] = adc_data[input_index];
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 0046     adc_data[input_index] = ADCW;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0003 0047     // delay_us(10);
; 0003 0048     //*UPDATE
; 0003 0049     // update_adc(input_index);
; 0003 004A     update_adc(ADCW, counter);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0003 004B     counter++;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 004C     //*UPDATE
; 0003 004D 
; 0003 004E     // Select next ADC input
; 0003 004F     if (++input_index > (LAST_ADC_INPUT - FIRST_ADC_INPUT))
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0003 0050         input_index = 0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0003 0051     ADMUX = (FIRST_ADC_INPUT | ADC_VREF_TYPE) + input_index;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0003 0052     // Delay needed for the stabilization of the ADC input voltage
; 0003 0053     delay_us(10);
;PCODE: $000000D0 VOL: 0
; 0003 0054 
; 0003 0055     if (counter > 7)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0056     {
; 0003 0057         counter = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0003 0058     }
; 0003 0059     // Start the AD conversion
; 0003 005A     ADCSRA |= (1 << ADSC);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0003 005B }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
