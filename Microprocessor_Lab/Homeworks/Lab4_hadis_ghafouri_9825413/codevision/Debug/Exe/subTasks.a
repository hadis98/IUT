;#include "headers.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// subTask1
;int hour = 0;
;int minute = 0;
;int second = 0;
;int hundredth_of_second = 0;
;char clicked_timer_button = stop_button;
;char timer0_accuracy = 0;
;
;// subTask2
;int parking_empty_capacity = max_parking_capacity;

	.DSEG
;
;// subTask3
;int calculated_period = 0;
;long int fr = 0;
;long int ocr = 0;
;int T = 0;
;int is_interrupt2_triggered = 0;
;
;extern char *LCD_TIMER_OUTPUT = "00:00:00:00";
_0x40004:
	.BYTE 0xC
;extern char *LCD_CAR_CAPACITY_OUTPUT = "CE:0000";
_0x40006:
	.BYTE 0x8
;extern char *LCD_CALCULATED_PERIOD_OUTPUT = "0000000";
_0x40008:
	.BYTE 0x8
;
;// External Interrupt 0 service routine
;interrupt[EXT_INT0] void ext_int0_isr(void)
; 0002 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 001C     parking_capacity_handler();
;PCODE: $0000000F VOL: 0
; 0002 001D }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt[EXT_INT1] void ext_int1_isr(void)
; 0002 0021 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0022     timer_button_handler();
;PCODE: $00000015 VOL: 0
; 0002 0023 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
; 0002 0027 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 0028     // Reinitialize Timer 0 value
; 0002 0029     TCNT0 = 0x83;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 002A     timer_display_digits();
;PCODE: $0000001D VOL: 0
; 0002 002B }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;// External Interrupt 2 service routine
;interrupt[EXT_INT2] void ext_int2_isr(void)
; 0002 002F {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 0030 
; 0002 0031     calculate_timer_period('A');
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0032     calculate_timer_period('B');
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0033     output_timer_period_lcd();
;PCODE: $00000027 VOL: 0
; 0002 0034     TCNT1H = 0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0035     TCNT1L = 0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 0036 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;//Timer1 output compare A interrupt service routine
;interrupt[TIM1_COMPA] void timer1_compa_isr(void)
; 0002 003A {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 003B 
; 0002 003C     calculate_timer_period('A');
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 003D     output_timer_period_lcd();
;PCODE: $00000033 VOL: 0
; 0002 003E }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;//Timer1 output compare B interrupt service routine
;interrupt[TIM1_COMPB] void timer1_compb_isr(void)
; 0002 0042 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0043 
; 0002 0044     calculate_timer_period('B');
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 0045     output_timer_period_lcd();
;PCODE: $0000003B VOL: 0
; 0002 0046 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;void parking_capacity_handler()
; 0002 0049 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 004A     if (car_in_button_port == is_button_clicked && parking_empty_capacity > 0)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 004B     {
; 0002 004C         parking_empty_capacity--;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 004D     }
; 0002 004E     else if (car_out_button_port == is_button_clicked && parking_empty_capacity < max_parking_capacity)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 004F     {
; 0002 0050         parking_empty_capacity++;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 0051     }
; 0002 0052 
; 0002 0053     if (parking_empty_capacity == 0)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 0054     {
; 0002 0055         sprintf(LCD_CAR_CAPACITY_OUTPUT, "CE:FULL**");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0056     }
; 0002 0057     else
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0058     {
; 0002 0059         sprintf(LCD_CAR_CAPACITY_OUTPUT, "CE:%4d**", parking_empty_capacity);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 005A     }
;PCODE: $0000007B VOL: 0
; 0002 005B 
; 0002 005C     lcd_gotoxy(0, 1);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 005D     lcd_puts(LCD_CAR_CAPACITY_OUTPUT);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 005E }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;void timer_button_handler()
; 0002 0061 {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0002 0062     if (clicked_timer_button == stop_button && stop_timer_button_port == is_button_clicked)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0002 0063     {
; 0002 0064         // clicked stop button twice, reset every digit in timer.
; 0002 0065         hundredth_of_second = reset;
;PCODE: $0000008F VOL: 0
; 0002 0066         second = reset;
;PCODE: $00000090 VOL: 0
; 0002 0067         minute = reset;
;PCODE: $00000091 VOL: 0
; 0002 0068         hour = reset;
;PCODE: $00000092 VOL: 0
; 0002 0069     }
; 0002 006A 
; 0002 006B     if (start_timer_button_port == is_button_clicked)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 006C     {
; 0002 006D         clicked_timer_button = start_button;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 006E     }
; 0002 006F     else
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 0070     {
; 0002 0071         clicked_timer_button = stop_button;
;PCODE: $0000009B VOL: 0
; 0002 0072     }
;PCODE: $0000009C VOL: 0
; 0002 0073 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;void timer_display_digits()
; 0002 0076 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0077     // timer0 has 1ms period but we need 10ms => we wait until we reach 10ms or 0.01s
; 0002 0078     // we want to perform our calculations every 10ms
; 0002 0079     if (timer0_accuracy != 10)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0002 007A     {
; 0002 007B         timer0_accuracy++;
;PCODE: $000000A4 VOL: 0
; 0002 007C     }
; 0002 007D     else
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 007E     {
; 0002 007F         timer0_accuracy = 0;
;PCODE: $000000A7 VOL: 0
; 0002 0080     }
;PCODE: $000000A8 VOL: 0
; 0002 0081 
; 0002 0082     if (clicked_timer_button == start_button)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0002 0083     {
; 0002 0084         timer_calculate_digits_handler();
;PCODE: $000000AC VOL: 0
; 0002 0085     }
; 0002 0086 
; 0002 0087     sprintf(LCD_TIMER_OUTPUT, "%2d:%2d:%2d:%2d", hour, minute, second, hundredth_of_second);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 0088     lcd_gotoxy(0, 0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0002 0089     lcd_puts(LCD_TIMER_OUTPUT);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 008A }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;
;void timer_calculate_digits_handler()
; 0002 008D {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0002 008E     if (hundredth_of_second == max_hundredth_of_seconds)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 008F     {
; 0002 0090         hundredth_of_second = reset;
;PCODE: $000000D0 VOL: 0
; 0002 0091 
; 0002 0092         if (second == max_second)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0002 0093         {
; 0002 0094             second = reset;
;PCODE: $000000D4 VOL: 0
; 0002 0095 
; 0002 0096             if (minute == max_minute)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 0097             {
; 0002 0098                 minute = reset;
;PCODE: $000000D8 VOL: 0
; 0002 0099 
; 0002 009A                 if (hour == max_hour)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 009B                 {
; 0002 009C                     hour = reset;
;PCODE: $000000DC VOL: 0
; 0002 009D                 }
; 0002 009E                 else
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0002 009F                 {
; 0002 00A0                     hour++;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0002 00A1                 }
;PCODE: $000000E2 VOL: 0
; 0002 00A2             }
; 0002 00A3             else
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0002 00A4             {
; 0002 00A5                 minute++;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 00A6             }
;PCODE: $000000E8 VOL: 0
; 0002 00A7         }
; 0002 00A8         else
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0002 00A9         {
; 0002 00AA             second++;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 00AB         }
;PCODE: $000000EE VOL: 0
; 0002 00AC     }
; 0002 00AD     else
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0002 00AE     {
; 0002 00AF         hundredth_of_second++;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0002 00B0     }
;PCODE: $000000F4 VOL: 0
; 0002 00B1 }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;
;void calculate_timer_period(char timer_type)
; 0002 00B4 {
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 00B5     // based on line equation we know y-y1 = ((y2-y1)/(x2-x1))*(x-x1)
; 0002 00B6     // here our frequency input is ranged between 0,255 => [0,255]
; 0002 00B7     // and our output period is ranged between 1us , 10ms => [1us,10000us]
; 0002 00B8     // so our output frequency is between : [100,1000000]
; 0002 00B9     // y1 =100  x1=0
; 0002 00BA     // y2=1000000 x2=255
; 0002 00BB     // m = (1000'000 - 1)/(255-0) = 999900/255
; 0002 00BC     // y = 3921.1*x+100
; 0002 00BD 
; 0002 00BE     // F-wave = F-micro / (2 * N * OCR0) here N(pre-scaler = 1) so
; 0002 00BF     // OCR0 =  F-micro / (F-wave * 2)
; 0002 00C0     fr = PINA;
;PCODE: $000000F9 VOL: 0
;	timer_type -> Y+0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00C1     fr = fr * 3921.1 + 100;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0002 00C2     ocr = 8000000 / (fr * 2);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0002 00C3 
; 0002 00C4     if (timer_type == 'A')
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0002 00C5     {
; 0002 00C6         OCR1AH = (ocr >> 8);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0002 00C7         OCR1AL = ocr;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0002 00C8     }
; 0002 00C9     else if (timer_type == 'B')
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0002 00CA     {
; 0002 00CB         OCR1BH = (ocr >> 8);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 00CC         OCR1BL = ocr;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 00CD     }
; 0002 00CE 
; 0002 00CF     T = 1000000 / (float)fr;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 00D0 }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;void output_timer_period_lcd()
; 0002 00D3 {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 00D4     lcd_clear();
;PCODE: $0000012D VOL: 0
; 0002 00D5     lcd_gotoxy(0, 0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 00D6     lcd_puts("Session4\n");
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0002 00D7     // delay_ms(1000);
; 0002 00D8     // if (T % 1000 == 0)
; 0002 00D9     // {
; 0002 00DA     //     sprintf(LCD_CALCULATED_PERIOD_OUTPUT, "%4dMS", (T / 1000));
; 0002 00DB     // }
; 0002 00DC     // else
; 0002 00DD     // {
; 0002 00DE     //     sprintf(LCD_CALCULATED_PERIOD_OUTPUT, "%4dUS", T);
; 0002 00DF     // }
; 0002 00E0 
; 0002 00E1     // lcd_gotoxy(0, 1);
; 0002 00E2     // lcd_puts(LCD_CAR_CAPACITY_OUTPUT);
; 0002 00E3     // lcd_puts(" * ");
; 0002 00E4     // lcd_puts(LCD_CALCULATED_PERIOD_OUTPUT);
; 0002 00E5 }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0

	.DSEG
_0x40026:
	.BYTE 0xA
