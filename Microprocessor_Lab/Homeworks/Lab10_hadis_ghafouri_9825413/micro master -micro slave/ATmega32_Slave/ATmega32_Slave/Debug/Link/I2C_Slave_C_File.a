;/*
; * I2C_Slave_C_File.c
; *
; */
;
;#include "I2C_Slave_H_File.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void I2C_Slave_Init(int slave_address)
; 0002 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 000A 	TWAR = slave_address;						/* Assign address in TWI address register */
;PCODE: $0000000F VOL: 0
;	slave_address -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0002 000B 	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 000C }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;int I2C_Slave_Listen()
; 0002 000E {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 000F 	while(1)
;PCODE: $00000019 VOL: 0
; 0002 0010 	{
; 0002 0011 		int status;							/* Declare variable */
; 0002 0012 		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
;PCODE: $0000001A VOL: 0
;	status -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 0013 		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0014 		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 0015 		return 0;								/* If yes then return 0 to indicate ack returned */
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0016 		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0017 		return 1;								/* If yes then return 1 to indicate ack returned */
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 0018 		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0019 		return 2;								/* If yes then return 2 to indicate ack returned */
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 001A 		else
;PCODE: $00000048 VOL: 0
; 0002 001B 		continue;								/* Else continue */
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 001C 	}
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 001D }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;int I2C_Slave_Transmit(char data)
; 0002 0020 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0021 	int status;
; 0002 0022 	TWDR = data;								/* Write data to TWDR to be transmitted */
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;	data -> Y+2
;	status -> R16,R17
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 0023 	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 0024 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 0025 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 0026 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0027 	{
; 0002 0028 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0029 		return -1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 002A 	}
; 0002 002B 	if (status == 0xB8)							/* Check weather data transmitted & ack received */
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 002C 		return 0;									/* If yes then return 0 */
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 002D 	if (status == 0xC0)							/* Check weather data transmitted & nack received */
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 002E 	{
; 0002 002F 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0030 		return -2;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0002 0031 	}
; 0002 0032 	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0002 0033 	return -3;									/* If yes then return -3 */
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 0034 	else										/* else return -4 */
;PCODE: $00000095 VOL: 0
; 0002 0035 	return -4;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 0036 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;char I2C_Slave_Receive()
; 0002 0039 {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 003A 	int status;								/* Declare variable */
; 0002 003B 	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	status -> R16,R17
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0002 003C 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0002 003D 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 003E 	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0002 003F 	return TWDR;								/* If yes then return received data */
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0002 0040 	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and
; 0002 0041                                                     switched to not addressed slave mode */
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 0042 	return TWDR;								/* If yes then return received data */
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0002 0043 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 0044 	{
; 0002 0045 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0002 0046 		return -1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 0047 	}
; 0002 0048 	else
;PCODE: $000000D6 VOL: 0
; 0002 0049 	return -2;									/* Else return 1 */
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 004A }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
