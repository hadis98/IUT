;/*
; * ATmega32_Slave.c
; * http://www.electronicwings.com
; *
; */
;
;
;#define F_CPU 8000000UL							/* Define CPU clock Frequency e.g. here its 8MHz */
;#include <mega16.h>								/* Include AVR std. library file */
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>							/* Include inbuilt defined Delay header file */
;#include <stdio.h>								/* Include standard I/O header file */
;#include <string.h>								/* Include string header file */
;//#include "LCD_16x2_H_file.h"					/* Include LCD header file */
;#include "I2C_Slave_H_File.h"					/* Include I2C slave header file */
;//#include <cstdint.h>
;#include "uartf.h"
;#define Slave_Address			0x20
;
;void main(void)
; 0001 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0001 0015 	char buffer[10];
; 0001 0016 	char count = 0,count3;
; 0001 0017 	char Ack_status;
; 0001 0018 
; 0001 0019 	uart_init();
;PCODE: $0000000E VOL: 0
;	buffer -> Y+0
;	count -> R17
;	count3 -> R16
;	Ack_status -> R19
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 001A 	I2C_Slave_Init(Slave_Address);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 001B 
; 0001 001C 	puts("\r\n Slave Device");
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 001D 
; 0001 001E 	while (1)
;PCODE: $00000018 VOL: 0
; 0001 001F 	{
; 0001 0020 		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
;PCODE: $00000019 VOL: 0
; 0001 0021 		{
; 0001 0022 			case 0:
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0023 			{
; 0001 0024 				puts("\r\n Receiving :       ");
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0025 				do
;PCODE: $0000001F VOL: 0
; 0001 0026 				{
; 0001 0027 					count = I2C_Slave_Receive();
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0028                     sprintf(buffer, "%d    ", count);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0029 					puts(buffer);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 002A 					/* Receive data byte*/
; 0001 002B 				} while (count != 255);			/* Receive until STOP/REPEATED START received */
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 002C 				count = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 002D 				break;
;PCODE: $00000038 VOL: 0
; 0001 002E 			}
; 0001 002F 			case 1:
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0030 			{
; 0001 0031 				//count3=10;
; 0001 0032                 count = 20;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0033 				puts("\r\n Sending :       ");
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 0034 				do
;PCODE: $00000041 VOL: 0
; 0001 0035 				{
; 0001 0036 					//Ack_status = I2C_Slave_Transmit(count3);	/* Send data byte */
; 0001 0037                     Ack_status = I2C_Slave_Transmit(count);	/* Send data byte */
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0038 					//sprintf(buffer, "%d    ",count3);
; 0001 0039                     sprintf(buffer, "%d    ",count);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 003A 					puts(buffer);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 003B 					//count3++;
; 0001 003C                     count++;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 003D 				} while (Ack_status == 0);		/* Send until Acknowledgment is received */
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 003E 				break;
;PCODE: $0000005A VOL: 0
; 0001 003F 			}
; 0001 0040 			default:
;PCODE: $0000005B VOL: 0
; 0001 0041 				break;
;PCODE: $0000005C VOL: 0
; 0001 0042 		}
;PCODE: $0000005D VOL: 0
; 0001 0043 	}
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0044 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0

	.DSEG
_0x20003:
	.BYTE 0x3A
;
