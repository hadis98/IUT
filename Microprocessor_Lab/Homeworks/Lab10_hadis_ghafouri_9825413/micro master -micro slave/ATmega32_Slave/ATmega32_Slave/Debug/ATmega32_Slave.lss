
ATmega32_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000088e  00000902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5f  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000673  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034e  00000000  00000000  00002bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002f2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 45 04 	jmp	0x88a	; 0x88a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "I2C_Slave_H_File.h"					/* Include I2C slave header file */

#define Slave_Address			0x20

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	int8_t count = 0;
	
	LCD_Init();
  96:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Init>
	I2C_Slave_Init(Slave_Address);
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Slave_Init>
	
	LCD_String_xy(1, 0, "Slave Device");
  a0:	40 e6       	ldi	r20, 0x60	; 96
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_String_xy>
#define Slave_Address			0x20

int main(void)
{
	char buffer[10];
	int8_t count = 0;
  ac:	10 e0       	ldi	r17, 0x00	; 0
			case 0:
			{
				LCD_String_xy(2, 0, "Receiving :       ");
				do
				{
					sprintf(buffer, "%d    ", count);
  ae:	0f 2e       	mov	r0, r31
  b0:	f0 e8       	ldi	r31, 0x80	; 128
  b2:	ef 2e       	mov	r14, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ff 2e       	mov	r15, r31
  b8:	f0 2d       	mov	r31, r0
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	6c 01       	movw	r12, r24
  c0:	a8 2e       	mov	r10, r24
  c2:	bd 2c       	mov	r11, r13
	
	LCD_String_xy(1, 0, "Slave Device");
	
	while (1)
	{
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  c4:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Slave_Listen>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <main+0x50>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	31 f1       	breq	.+76     	; 0x11c <main+0x9a>
  d0:	f9 cf       	rjmp	.-14     	; 0xc4 <main+0x42>
		{
			case 0:
			{
				LCD_String_xy(2, 0, "Receiving :       ");
  d2:	4d e6       	ldi	r20, 0x6D	; 109
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_String_xy>
				do
				{
					sprintf(buffer, "%d    ", count);
  de:	81 2f       	mov	r24, r17
  e0:	01 2e       	mov	r0, r17
  e2:	00 0c       	add	r0, r0
  e4:	99 0b       	sbc	r25, r25
  e6:	9f 93       	push	r25
  e8:	1f 93       	push	r17
  ea:	ff 92       	push	r15
  ec:	ef 92       	push	r14
  ee:	df 92       	push	r13
  f0:	cf 92       	push	r12
  f2:	0e 94 6d 01 	call	0x2da	; 0x2da <sprintf>
					LCD_String_xy(2, 13, buffer);
  f6:	4a 2d       	mov	r20, r10
  f8:	5b 2d       	mov	r21, r11
  fa:	6d e0       	ldi	r22, 0x0D	; 13
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_String_xy>
					count = I2C_Slave_Receive();/* Receive data byte*/
 102:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Slave_Receive>
 106:	18 2f       	mov	r17, r24
				} while (count != -1);			/* Receive until STOP/REPEATED START received */
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	19 f7       	brne	.-58     	; 0xde <main+0x5c>
				count = 0;
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <main+0x42>
				break;
			}
			case 1:
			{
				int8_t Ack_status;
				LCD_String_xy(2, 0, "Sending :       ");
 11c:	47 e8       	ldi	r20, 0x87	; 135
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_String_xy>
				do
				{
					Ack_status = I2C_Slave_Transmit(count);	/* Send data byte */
 128:	81 2f       	mov	r24, r17
 12a:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Slave_Transmit>
 12e:	08 2f       	mov	r16, r24
					sprintf(buffer, "%d    ",count);
 130:	81 2f       	mov	r24, r17
 132:	01 2e       	mov	r0, r17
 134:	00 0c       	add	r0, r0
 136:	99 0b       	sbc	r25, r25
 138:	9f 93       	push	r25
 13a:	1f 93       	push	r17
 13c:	ff 92       	push	r15
 13e:	ef 92       	push	r14
 140:	df 92       	push	r13
 142:	cf 92       	push	r12
 144:	0e 94 6d 01 	call	0x2da	; 0x2da <sprintf>
					LCD_String_xy(2, 13, buffer);
 148:	4a 2d       	mov	r20, r10
 14a:	5b 2d       	mov	r21, r11
 14c:	6d e0       	ldi	r22, 0x0D	; 13
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_String_xy>
 154:	1f 5f       	subi	r17, 0xFF	; 255
					count++;
				} while (Ack_status == 0);		/* Send until Acknowledgment is received */
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	00 23       	and	r16, r16
 164:	09 f3       	breq	.-62     	; 0x128 <main+0xa6>
 166:	ae cf       	rjmp	.-164    	; 0xc4 <main+0x42>

00000168 <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 168:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 16a:	84 ec       	ldi	r24, 0xC4	; 196
 16c:	86 bf       	out	0x36, r24	; 54
 16e:	08 95       	ret

00000170 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 170:	06 b6       	in	r0, 0x36	; 54
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 176:	81 b1       	in	r24, 0x01	; 1
 178:	98 2f       	mov	r25, r24
 17a:	98 7f       	andi	r25, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	80 36       	cpi	r24, 0x60	; 96
 180:	41 f0       	breq	.+16     	; 0x192 <I2C_Slave_Listen+0x22>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 182:	98 3a       	cpi	r25, 0xA8	; 168
 184:	41 f0       	breq	.+16     	; 0x196 <I2C_Slave_Listen+0x26>
 186:	90 3b       	cpi	r25, 0xB0	; 176
 188:	41 f0       	breq	.+16     	; 0x19a <I2C_Slave_Listen+0x2a>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 18a:	80 37       	cpi	r24, 0x70	; 112
 18c:	89 f7       	brne	.-30     	; 0x170 <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
		else
		continue;								/* Else continue */
	}
}
 19c:	08 95       	ret

0000019e <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
 19e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
 1a0:	84 ec       	ldi	r24, 0xC4	; 196
 1a2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 1a4:	06 b6       	in	r0, 0x36	; 54
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <I2C_Slave_Transmit+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 1aa:	81 b1       	in	r24, 0x01	; 1
 1ac:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 1ae:	80 3a       	cpi	r24, 0xA0	; 160
 1b0:	29 f4       	brne	.+10     	; 0x1bc <I2C_Slave_Transmit+0x1e>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
 1b2:	86 b7       	in	r24, 0x36	; 54
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	86 bf       	out	0x36, r24	; 54
		return -1;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 1bc:	88 3b       	cpi	r24, 0xB8	; 184
 1be:	59 f0       	breq	.+22     	; 0x1d6 <I2C_Slave_Transmit+0x38>
		return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 1c0:	80 3c       	cpi	r24, 0xC0	; 192
 1c2:	29 f4       	brne	.+10     	; 0x1ce <I2C_Slave_Transmit+0x30>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 1c4:	86 b7       	in	r24, 0x36	; 54
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	86 bf       	out	0x36, r24	; 54
		return -2;
 1ca:	8e ef       	ldi	r24, 0xFE	; 254
 1cc:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 1ce:	88 3c       	cpi	r24, 0xC8	; 200
 1d0:	21 f0       	breq	.+8      	; 0x1da <I2C_Slave_Transmit+0x3c>
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 1d2:	8c ef       	ldi	r24, 0xFC	; 252
 1d4:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
		return 0;									/* If yes then return 0 */
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
 1da:	8d ef       	ldi	r24, 0xFD	; 253
	else										/* else return -4 */
	return -4;
}
 1dc:	08 95       	ret

000001de <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 1de:	84 ec       	ldi	r24, 0xC4	; 196
 1e0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 1e2:	06 b6       	in	r0, 0x36	; 54
 1e4:	07 fe       	sbrs	r0, 7
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <I2C_Slave_Receive+0x4>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 1e8:	81 b1       	in	r24, 0x01	; 1
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 1ea:	98 2f       	mov	r25, r24
 1ec:	98 7e       	andi	r25, 0xE8	; 232
 1ee:	90 38       	cpi	r25, 0x80	; 128
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <I2C_Slave_Receive+0x18>
	return TWDR;								/* If yes then return received data */
 1f2:	83 b1       	in	r24, 0x03	; 3
 1f4:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 1f6:	98 38       	cpi	r25, 0x88	; 136
 1f8:	11 f4       	brne	.+4      	; 0x1fe <I2C_Slave_Receive+0x20>
	return TWDR;								/* If yes then return received data */
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	08 95       	ret
char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 1fe:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
	return TWDR;								/* If yes then return received data */
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
	return TWDR;								/* If yes then return received data */
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 200:	80 3a       	cpi	r24, 0xA0	; 160
 202:	29 f4       	brne	.+10     	; 0x20e <I2C_Slave_Receive+0x30>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 204:	86 b7       	in	r24, 0x36	; 54
 206:	80 68       	ori	r24, 0x80	; 128
 208:	86 bf       	out	0x36, r24	; 54
		return -1;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 20e:	8e ef       	ldi	r24, 0xFE	; 254
}
 210:	08 95       	ret

00000212 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 212:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 214:	85 b3       	in	r24, 0x15	; 21
 216:	87 7e       	andi	r24, 0xE7	; 231
 218:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 21a:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_Command+0xc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 224:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e6       	ldi	r24, 0x6F	; 111
 228:	97 e1       	ldi	r25, 0x17	; 23
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_Command+0x18>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Command+0x1e>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 234:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 236:	ab 98       	cbi	0x15, 3	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	84 61       	ori	r24, 0x14	; 20
 23c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Char+0xc>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 246:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f ec       	ldi	r24, 0xCF	; 207
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Char+0x18>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_Char+0x1e>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 256:	84 b3       	in	r24, 0x14	; 20
 258:	8c 61       	ori	r24, 0x1C	; 28
 25a:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	87 bb       	out	0x17, r24	; 23
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_Init+0xe>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_Init+0x14>
 26a:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 26c:	88 e3       	ldi	r24, 0x38	; 56
 26e:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 272:	8c e0       	ldi	r24, 0x0C	; 12
 274:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
 28a:	08 95       	ret

0000028c <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 292:	88 81       	ld	r24, Y
 294:	88 23       	and	r24, r24
 296:	31 f0       	breq	.+12     	; 0x2a4 <LCD_String+0x18>
 298:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 29a:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fb cf       	rjmp	.-10     	; 0x29a <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ea 01       	movw	r28, r20
	if (row == 1)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	31 f4       	brne	.+12     	; 0x2c0 <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 2b4:	86 2f       	mov	r24, r22
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <LCD_String_xy+0x24>
	else if (row == 2)
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	29 f4       	brne	.+10     	; 0x2ce <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 2c4:	86 2f       	mov	r24, r22
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	80 6c       	ori	r24, 0xC0	; 192
 2ca:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_String>
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <sprintf>:
 2da:	ae e0       	ldi	r26, 0x0E	; 14
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e3 e7       	ldi	r30, 0x73	; 115
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	0c 94 1c 04 	jmp	0x838	; 0x838 <__prologue_saves__+0x1c>
 2e6:	0d 89       	ldd	r16, Y+21	; 0x15
 2e8:	1e 89       	ldd	r17, Y+22	; 0x16
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	8c 83       	std	Y+4, r24	; 0x04
 2ee:	1a 83       	std	Y+2, r17	; 0x02
 2f0:	09 83       	std	Y+1, r16	; 0x01
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	9f e7       	ldi	r25, 0x7F	; 127
 2f6:	9e 83       	std	Y+6, r25	; 0x06
 2f8:	8d 83       	std	Y+5, r24	; 0x05
 2fa:	ae 01       	movw	r20, r28
 2fc:	47 5e       	subi	r20, 0xE7	; 231
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	6f 89       	ldd	r22, Y+23	; 0x17
 302:	78 8d       	ldd	r23, Y+24	; 0x18
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	0e 94 90 01 	call	0x320	; 0x320 <vfprintf>
 30c:	2f 81       	ldd	r18, Y+7	; 0x07
 30e:	38 85       	ldd	r19, Y+8	; 0x08
 310:	f8 01       	movw	r30, r16
 312:	e2 0f       	add	r30, r18
 314:	f3 1f       	adc	r31, r19
 316:	10 82       	st	Z, r1
 318:	2e 96       	adiw	r28, 0x0e	; 14
 31a:	e4 e0       	ldi	r30, 0x04	; 4
 31c:	0c 94 38 04 	jmp	0x870	; 0x870 <__stack+0x11>

00000320 <vfprintf>:
 320:	ac e0       	ldi	r26, 0x0C	; 12
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e6 e9       	ldi	r30, 0x96	; 150
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__prologue_saves__>
 32c:	7c 01       	movw	r14, r24
 32e:	6b 01       	movw	r12, r22
 330:	8a 01       	movw	r16, r20
 332:	fc 01       	movw	r30, r24
 334:	17 82       	std	Z+7, r1	; 0x07
 336:	16 82       	std	Z+6, r1	; 0x06
 338:	83 81       	ldd	r24, Z+3	; 0x03
 33a:	81 ff       	sbrs	r24, 1
 33c:	bd c1       	rjmp	.+890    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	4c 01       	movw	r8, r24
 344:	f7 01       	movw	r30, r14
 346:	93 81       	ldd	r25, Z+3	; 0x03
 348:	f6 01       	movw	r30, r12
 34a:	93 fd       	sbrc	r25, 3
 34c:	85 91       	lpm	r24, Z+
 34e:	93 ff       	sbrs	r25, 3
 350:	81 91       	ld	r24, Z+
 352:	6f 01       	movw	r12, r30
 354:	88 23       	and	r24, r24
 356:	09 f4       	brne	.+2      	; 0x35a <vfprintf+0x3a>
 358:	ab c1       	rjmp	.+854    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 35a:	85 32       	cpi	r24, 0x25	; 37
 35c:	39 f4       	brne	.+14     	; 0x36c <vfprintf+0x4c>
 35e:	93 fd       	sbrc	r25, 3
 360:	85 91       	lpm	r24, Z+
 362:	93 ff       	sbrs	r25, 3
 364:	81 91       	ld	r24, Z+
 366:	6f 01       	movw	r12, r30
 368:	85 32       	cpi	r24, 0x25	; 37
 36a:	29 f4       	brne	.+10     	; 0x376 <vfprintf+0x56>
 36c:	b7 01       	movw	r22, r14
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 374:	e7 cf       	rjmp	.-50     	; 0x344 <vfprintf+0x24>
 376:	51 2c       	mov	r5, r1
 378:	31 2c       	mov	r3, r1
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	20 32       	cpi	r18, 0x20	; 32
 37e:	a0 f4       	brcc	.+40     	; 0x3a8 <vfprintf+0x88>
 380:	8b 32       	cpi	r24, 0x2B	; 43
 382:	69 f0       	breq	.+26     	; 0x39e <vfprintf+0x7e>
 384:	30 f4       	brcc	.+12     	; 0x392 <vfprintf+0x72>
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	59 f0       	breq	.+22     	; 0x3a0 <vfprintf+0x80>
 38a:	83 32       	cpi	r24, 0x23	; 35
 38c:	69 f4       	brne	.+26     	; 0x3a8 <vfprintf+0x88>
 38e:	20 61       	ori	r18, 0x10	; 16
 390:	2c c0       	rjmp	.+88     	; 0x3ea <vfprintf+0xca>
 392:	8d 32       	cpi	r24, 0x2D	; 45
 394:	39 f0       	breq	.+14     	; 0x3a4 <vfprintf+0x84>
 396:	80 33       	cpi	r24, 0x30	; 48
 398:	39 f4       	brne	.+14     	; 0x3a8 <vfprintf+0x88>
 39a:	21 60       	ori	r18, 0x01	; 1
 39c:	26 c0       	rjmp	.+76     	; 0x3ea <vfprintf+0xca>
 39e:	22 60       	ori	r18, 0x02	; 2
 3a0:	24 60       	ori	r18, 0x04	; 4
 3a2:	23 c0       	rjmp	.+70     	; 0x3ea <vfprintf+0xca>
 3a4:	28 60       	ori	r18, 0x08	; 8
 3a6:	21 c0       	rjmp	.+66     	; 0x3ea <vfprintf+0xca>
 3a8:	27 fd       	sbrc	r18, 7
 3aa:	27 c0       	rjmp	.+78     	; 0x3fa <vfprintf+0xda>
 3ac:	30 ed       	ldi	r19, 0xD0	; 208
 3ae:	38 0f       	add	r19, r24
 3b0:	3a 30       	cpi	r19, 0x0A	; 10
 3b2:	78 f4       	brcc	.+30     	; 0x3d2 <vfprintf+0xb2>
 3b4:	26 ff       	sbrs	r18, 6
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <vfprintf+0xa4>
 3b8:	fa e0       	ldi	r31, 0x0A	; 10
 3ba:	5f 9e       	mul	r5, r31
 3bc:	30 0d       	add	r19, r0
 3be:	11 24       	eor	r1, r1
 3c0:	53 2e       	mov	r5, r19
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <vfprintf+0xca>
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	38 9e       	mul	r3, r24
 3c8:	30 0d       	add	r19, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	33 2e       	mov	r3, r19
 3ce:	20 62       	ori	r18, 0x20	; 32
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <vfprintf+0xca>
 3d2:	8e 32       	cpi	r24, 0x2E	; 46
 3d4:	21 f4       	brne	.+8      	; 0x3de <vfprintf+0xbe>
 3d6:	26 fd       	sbrc	r18, 6
 3d8:	6b c1       	rjmp	.+726    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 3da:	20 64       	ori	r18, 0x40	; 64
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <vfprintf+0xca>
 3de:	8c 36       	cpi	r24, 0x6C	; 108
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <vfprintf+0xc6>
 3e2:	20 68       	ori	r18, 0x80	; 128
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <vfprintf+0xca>
 3e6:	88 36       	cpi	r24, 0x68	; 104
 3e8:	41 f4       	brne	.+16     	; 0x3fa <vfprintf+0xda>
 3ea:	f6 01       	movw	r30, r12
 3ec:	93 fd       	sbrc	r25, 3
 3ee:	85 91       	lpm	r24, Z+
 3f0:	93 ff       	sbrs	r25, 3
 3f2:	81 91       	ld	r24, Z+
 3f4:	6f 01       	movw	r12, r30
 3f6:	81 11       	cpse	r24, r1
 3f8:	c1 cf       	rjmp	.-126    	; 0x37c <vfprintf+0x5c>
 3fa:	98 2f       	mov	r25, r24
 3fc:	9f 7d       	andi	r25, 0xDF	; 223
 3fe:	95 54       	subi	r25, 0x45	; 69
 400:	93 30       	cpi	r25, 0x03	; 3
 402:	28 f4       	brcc	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	0c 5f       	subi	r16, 0xFC	; 252
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	ff e3       	ldi	r31, 0x3F	; 63
 40a:	f9 83       	std	Y+1, r31	; 0x01
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40e:	83 36       	cpi	r24, 0x63	; 99
 410:	31 f0       	breq	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	83 37       	cpi	r24, 0x73	; 115
 414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	83 35       	cpi	r24, 0x53	; 83
 418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	5b c0       	rjmp	.+182    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 41c:	22 c0       	rjmp	.+68     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	89 83       	std	Y+1, r24	; 0x01
 424:	0e 5f       	subi	r16, 0xFE	; 254
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	44 24       	eor	r4, r4
 42a:	43 94       	inc	r4
 42c:	51 2c       	mov	r5, r1
 42e:	54 01       	movw	r10, r8
 430:	15 c0       	rjmp	.+42     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 432:	38 01       	movw	r6, r16
 434:	f2 e0       	ldi	r31, 0x02	; 2
 436:	6f 0e       	add	r6, r31
 438:	71 1c       	adc	r7, r1
 43a:	f8 01       	movw	r30, r16
 43c:	a0 80       	ld	r10, Z
 43e:	b1 80       	ldd	r11, Z+1	; 0x01
 440:	26 ff       	sbrs	r18, 6
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 444:	65 2d       	mov	r22, r5
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	6f ef       	ldi	r22, 0xFF	; 255
 44c:	7f ef       	ldi	r23, 0xFF	; 255
 44e:	c5 01       	movw	r24, r10
 450:	2c 87       	std	Y+12, r18	; 0x0c
 452:	0e 94 6d 03 	call	0x6da	; 0x6da <strnlen>
 456:	2c 01       	movw	r4, r24
 458:	83 01       	movw	r16, r6
 45a:	2c 85       	ldd	r18, Y+12	; 0x0c
 45c:	2f 77       	andi	r18, 0x7F	; 127
 45e:	22 2e       	mov	r2, r18
 460:	17 c0       	rjmp	.+46     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 462:	38 01       	movw	r6, r16
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	6f 0e       	add	r6, r31
 468:	71 1c       	adc	r7, r1
 46a:	f8 01       	movw	r30, r16
 46c:	a0 80       	ld	r10, Z
 46e:	b1 80       	ldd	r11, Z+1	; 0x01
 470:	26 ff       	sbrs	r18, 6
 472:	03 c0       	rjmp	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 474:	65 2d       	mov	r22, r5
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	6f ef       	ldi	r22, 0xFF	; 255
 47c:	7f ef       	ldi	r23, 0xFF	; 255
 47e:	c5 01       	movw	r24, r10
 480:	2c 87       	std	Y+12, r18	; 0x0c
 482:	0e 94 62 03 	call	0x6c4	; 0x6c4 <strnlen_P>
 486:	2c 01       	movw	r4, r24
 488:	2c 85       	ldd	r18, Y+12	; 0x0c
 48a:	20 68       	ori	r18, 0x80	; 128
 48c:	22 2e       	mov	r2, r18
 48e:	83 01       	movw	r16, r6
 490:	23 fc       	sbrc	r2, 3
 492:	1b c0       	rjmp	.+54     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 494:	83 2d       	mov	r24, r3
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	48 16       	cp	r4, r24
 49a:	59 06       	cpc	r5, r25
 49c:	b0 f4       	brcc	.+44     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 49e:	b7 01       	movw	r22, r14
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 4a8:	3a 94       	dec	r3
 4aa:	f4 cf       	rjmp	.-24     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 4ac:	f5 01       	movw	r30, r10
 4ae:	27 fc       	sbrc	r2, 7
 4b0:	85 91       	lpm	r24, Z+
 4b2:	27 fe       	sbrs	r2, 7
 4b4:	81 91       	ld	r24, Z+
 4b6:	5f 01       	movw	r10, r30
 4b8:	b7 01       	movw	r22, r14
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 4c0:	31 10       	cpse	r3, r1
 4c2:	3a 94       	dec	r3
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	4f 1a       	sub	r4, r31
 4c8:	51 08       	sbc	r5, r1
 4ca:	41 14       	cp	r4, r1
 4cc:	51 04       	cpc	r5, r1
 4ce:	71 f7       	brne	.-36     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4d0:	e5 c0       	rjmp	.+458    	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 4d2:	84 36       	cpi	r24, 0x64	; 100
 4d4:	11 f0       	breq	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	89 36       	cpi	r24, 0x69	; 105
 4d8:	39 f5       	brne	.+78     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4da:	f8 01       	movw	r30, r16
 4dc:	27 ff       	sbrs	r18, 7
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e0:	60 81       	ld	r22, Z
 4e2:	71 81       	ldd	r23, Z+1	; 0x01
 4e4:	82 81       	ldd	r24, Z+2	; 0x02
 4e6:	93 81       	ldd	r25, Z+3	; 0x03
 4e8:	0c 5f       	subi	r16, 0xFC	; 252
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ee:	60 81       	ld	r22, Z
 4f0:	71 81       	ldd	r23, Z+1	; 0x01
 4f2:	07 2e       	mov	r0, r23
 4f4:	00 0c       	add	r0, r0
 4f6:	88 0b       	sbc	r24, r24
 4f8:	99 0b       	sbc	r25, r25
 4fa:	0e 5f       	subi	r16, 0xFE	; 254
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	2f 76       	andi	r18, 0x6F	; 111
 500:	72 2e       	mov	r7, r18
 502:	97 ff       	sbrs	r25, 7
 504:	09 c0       	rjmp	.+18     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 506:	90 95       	com	r25
 508:	80 95       	com	r24
 50a:	70 95       	com	r23
 50c:	61 95       	neg	r22
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	20 68       	ori	r18, 0x80	; 128
 516:	72 2e       	mov	r7, r18
 518:	2a e0       	ldi	r18, 0x0A	; 10
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	a4 01       	movw	r20, r8
 51e:	0e 94 b0 03 	call	0x760	; 0x760 <__ultoa_invert>
 522:	a8 2e       	mov	r10, r24
 524:	a8 18       	sub	r10, r8
 526:	44 c0       	rjmp	.+136    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 528:	85 37       	cpi	r24, 0x75	; 117
 52a:	29 f4       	brne	.+10     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 52c:	2f 7e       	andi	r18, 0xEF	; 239
 52e:	b2 2e       	mov	r11, r18
 530:	2a e0       	ldi	r18, 0x0A	; 10
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	25 c0       	rjmp	.+74     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 536:	f2 2f       	mov	r31, r18
 538:	f9 7f       	andi	r31, 0xF9	; 249
 53a:	bf 2e       	mov	r11, r31
 53c:	8f 36       	cpi	r24, 0x6F	; 111
 53e:	c1 f0       	breq	.+48     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 540:	18 f4       	brcc	.+6      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 542:	88 35       	cpi	r24, 0x58	; 88
 544:	79 f0       	breq	.+30     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 546:	b4 c0       	rjmp	.+360    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 548:	80 37       	cpi	r24, 0x70	; 112
 54a:	19 f0       	breq	.+6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 54c:	88 37       	cpi	r24, 0x78	; 120
 54e:	21 f0       	breq	.+8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 550:	af c0       	rjmp	.+350    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 552:	2f 2f       	mov	r18, r31
 554:	20 61       	ori	r18, 0x10	; 16
 556:	b2 2e       	mov	r11, r18
 558:	b4 fe       	sbrs	r11, 4
 55a:	0d c0       	rjmp	.+26     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 55c:	8b 2d       	mov	r24, r11
 55e:	84 60       	ori	r24, 0x04	; 4
 560:	b8 2e       	mov	r11, r24
 562:	09 c0       	rjmp	.+18     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 564:	24 ff       	sbrs	r18, 4
 566:	0a c0       	rjmp	.+20     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 568:	9f 2f       	mov	r25, r31
 56a:	96 60       	ori	r25, 0x06	; 6
 56c:	b9 2e       	mov	r11, r25
 56e:	06 c0       	rjmp	.+12     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 570:	28 e0       	ldi	r18, 0x08	; 8
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	05 c0       	rjmp	.+10     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 576:	20 e1       	ldi	r18, 0x10	; 16
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57c:	20 e1       	ldi	r18, 0x10	; 16
 57e:	32 e0       	ldi	r19, 0x02	; 2
 580:	f8 01       	movw	r30, r16
 582:	b7 fe       	sbrs	r11, 7
 584:	07 c0       	rjmp	.+14     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 586:	60 81       	ld	r22, Z
 588:	71 81       	ldd	r23, Z+1	; 0x01
 58a:	82 81       	ldd	r24, Z+2	; 0x02
 58c:	93 81       	ldd	r25, Z+3	; 0x03
 58e:	0c 5f       	subi	r16, 0xFC	; 252
 590:	1f 4f       	sbci	r17, 0xFF	; 255
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 594:	60 81       	ld	r22, Z
 596:	71 81       	ldd	r23, Z+1	; 0x01
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 5f       	subi	r16, 0xFE	; 254
 59e:	1f 4f       	sbci	r17, 0xFF	; 255
 5a0:	a4 01       	movw	r20, r8
 5a2:	0e 94 b0 03 	call	0x760	; 0x760 <__ultoa_invert>
 5a6:	a8 2e       	mov	r10, r24
 5a8:	a8 18       	sub	r10, r8
 5aa:	fb 2d       	mov	r31, r11
 5ac:	ff 77       	andi	r31, 0x7F	; 127
 5ae:	7f 2e       	mov	r7, r31
 5b0:	76 fe       	sbrs	r7, 6
 5b2:	0b c0       	rjmp	.+22     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5b4:	37 2d       	mov	r19, r7
 5b6:	3e 7f       	andi	r19, 0xFE	; 254
 5b8:	a5 14       	cp	r10, r5
 5ba:	50 f4       	brcc	.+20     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5bc:	74 fe       	sbrs	r7, 4
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c0:	72 fc       	sbrc	r7, 2
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c4:	37 2d       	mov	r19, r7
 5c6:	3e 7e       	andi	r19, 0xEE	; 238
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5ca:	ba 2c       	mov	r11, r10
 5cc:	37 2d       	mov	r19, r7
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d0:	ba 2c       	mov	r11, r10
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	b5 2c       	mov	r11, r5
 5d6:	34 ff       	sbrs	r19, 4
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5da:	fe 01       	movw	r30, r28
 5dc:	ea 0d       	add	r30, r10
 5de:	f1 1d       	adc	r31, r1
 5e0:	80 81       	ld	r24, Z
 5e2:	80 33       	cpi	r24, 0x30	; 48
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e6:	39 7e       	andi	r19, 0xE9	; 233
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5ea:	32 ff       	sbrs	r19, 2
 5ec:	06 c0       	rjmp	.+12     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5ee:	b3 94       	inc	r11
 5f0:	b3 94       	inc	r11
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f4:	83 2f       	mov	r24, r19
 5f6:	86 78       	andi	r24, 0x86	; 134
 5f8:	09 f0       	breq	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5fa:	b3 94       	inc	r11
 5fc:	33 fd       	sbrc	r19, 3
 5fe:	13 c0       	rjmp	.+38     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 600:	30 ff       	sbrs	r19, 0
 602:	06 c0       	rjmp	.+12     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 604:	5a 2c       	mov	r5, r10
 606:	b3 14       	cp	r11, r3
 608:	18 f4       	brcc	.+6      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 60a:	53 0c       	add	r5, r3
 60c:	5b 18       	sub	r5, r11
 60e:	b3 2c       	mov	r11, r3
 610:	b3 14       	cp	r11, r3
 612:	68 f4       	brcc	.+26     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 614:	b7 01       	movw	r22, r14
 616:	80 e2       	ldi	r24, 0x20	; 32
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	3c 87       	std	Y+12, r19	; 0x0c
 61c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 620:	b3 94       	inc	r11
 622:	3c 85       	ldd	r19, Y+12	; 0x0c
 624:	f5 cf       	rjmp	.-22     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 626:	b3 14       	cp	r11, r3
 628:	10 f4       	brcc	.+4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62a:	3b 18       	sub	r3, r11
 62c:	01 c0       	rjmp	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62e:	31 2c       	mov	r3, r1
 630:	34 ff       	sbrs	r19, 4
 632:	12 c0       	rjmp	.+36     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 634:	b7 01       	movw	r22, r14
 636:	80 e3       	ldi	r24, 0x30	; 48
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	3c 87       	std	Y+12, r19	; 0x0c
 63c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 640:	3c 85       	ldd	r19, Y+12	; 0x0c
 642:	32 ff       	sbrs	r19, 2
 644:	17 c0       	rjmp	.+46     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 646:	31 fd       	sbrc	r19, 1
 648:	03 c0       	rjmp	.+6      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64a:	88 e7       	ldi	r24, 0x78	; 120
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 650:	88 e5       	ldi	r24, 0x58	; 88
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	b7 01       	movw	r22, r14
 656:	0c c0       	rjmp	.+24     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 658:	83 2f       	mov	r24, r19
 65a:	86 78       	andi	r24, 0x86	; 134
 65c:	59 f0       	breq	.+22     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 65e:	31 ff       	sbrs	r19, 1
 660:	02 c0       	rjmp	.+4      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 662:	8b e2       	ldi	r24, 0x2B	; 43
 664:	01 c0       	rjmp	.+2      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 666:	80 e2       	ldi	r24, 0x20	; 32
 668:	37 fd       	sbrc	r19, 7
 66a:	8d e2       	ldi	r24, 0x2D	; 45
 66c:	b7 01       	movw	r22, r14
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 674:	a5 14       	cp	r10, r5
 676:	38 f4       	brcc	.+14     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 678:	b7 01       	movw	r22, r14
 67a:	80 e3       	ldi	r24, 0x30	; 48
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 682:	5a 94       	dec	r5
 684:	f7 cf       	rjmp	.-18     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 686:	aa 94       	dec	r10
 688:	f4 01       	movw	r30, r8
 68a:	ea 0d       	add	r30, r10
 68c:	f1 1d       	adc	r31, r1
 68e:	80 81       	ld	r24, Z
 690:	b7 01       	movw	r22, r14
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 698:	a1 10       	cpse	r10, r1
 69a:	f5 cf       	rjmp	.-22     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 69c:	33 20       	and	r3, r3
 69e:	09 f4       	brne	.+2      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6a0:	51 ce       	rjmp	.-862    	; 0x344 <vfprintf+0x24>
 6a2:	b7 01       	movw	r22, r14
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fputc>
 6ac:	3a 94       	dec	r3
 6ae:	f6 cf       	rjmp	.-20     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 6b0:	f7 01       	movw	r30, r14
 6b2:	86 81       	ldd	r24, Z+6	; 0x06
 6b4:	97 81       	ldd	r25, Z+7	; 0x07
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	9f ef       	ldi	r25, 0xFF	; 255
 6bc:	2c 96       	adiw	r28, 0x0c	; 12
 6be:	e2 e1       	ldi	r30, 0x12	; 18
 6c0:	0c 94 2a 04 	jmp	0x854	; 0x854 <__epilogue_restores__>

000006c4 <strnlen_P>:
 6c4:	fc 01       	movw	r30, r24
 6c6:	05 90       	lpm	r0, Z+
 6c8:	61 50       	subi	r22, 0x01	; 1
 6ca:	70 40       	sbci	r23, 0x00	; 0
 6cc:	01 10       	cpse	r0, r1
 6ce:	d8 f7       	brcc	.-10     	; 0x6c6 <strnlen_P+0x2>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	8e 0f       	add	r24, r30
 6d6:	9f 1f       	adc	r25, r31
 6d8:	08 95       	ret

000006da <strnlen>:
 6da:	fc 01       	movw	r30, r24
 6dc:	61 50       	subi	r22, 0x01	; 1
 6de:	70 40       	sbci	r23, 0x00	; 0
 6e0:	01 90       	ld	r0, Z+
 6e2:	01 10       	cpse	r0, r1
 6e4:	d8 f7       	brcc	.-10     	; 0x6dc <strnlen+0x2>
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	8e 0f       	add	r24, r30
 6ec:	9f 1f       	adc	r25, r31
 6ee:	08 95       	ret

000006f0 <fputc>:
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	fb 01       	movw	r30, r22
 6fa:	23 81       	ldd	r18, Z+3	; 0x03
 6fc:	21 fd       	sbrc	r18, 1
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <fputc+0x16>
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	9f ef       	ldi	r25, 0xFF	; 255
 704:	28 c0       	rjmp	.+80     	; 0x756 <fputc+0x66>
 706:	22 ff       	sbrs	r18, 2
 708:	16 c0       	rjmp	.+44     	; 0x736 <fputc+0x46>
 70a:	46 81       	ldd	r20, Z+6	; 0x06
 70c:	57 81       	ldd	r21, Z+7	; 0x07
 70e:	24 81       	ldd	r18, Z+4	; 0x04
 710:	35 81       	ldd	r19, Z+5	; 0x05
 712:	42 17       	cp	r20, r18
 714:	53 07       	cpc	r21, r19
 716:	44 f4       	brge	.+16     	; 0x728 <fputc+0x38>
 718:	a0 81       	ld	r26, Z
 71a:	b1 81       	ldd	r27, Z+1	; 0x01
 71c:	9d 01       	movw	r18, r26
 71e:	2f 5f       	subi	r18, 0xFF	; 255
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	31 83       	std	Z+1, r19	; 0x01
 724:	20 83       	st	Z, r18
 726:	8c 93       	st	X, r24
 728:	26 81       	ldd	r18, Z+6	; 0x06
 72a:	37 81       	ldd	r19, Z+7	; 0x07
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	37 83       	std	Z+7, r19	; 0x07
 732:	26 83       	std	Z+6, r18	; 0x06
 734:	10 c0       	rjmp	.+32     	; 0x756 <fputc+0x66>
 736:	eb 01       	movw	r28, r22
 738:	09 2f       	mov	r16, r25
 73a:	18 2f       	mov	r17, r24
 73c:	00 84       	ldd	r0, Z+8	; 0x08
 73e:	f1 85       	ldd	r31, Z+9	; 0x09
 740:	e0 2d       	mov	r30, r0
 742:	09 95       	icall
 744:	89 2b       	or	r24, r25
 746:	e1 f6       	brne	.-72     	; 0x700 <fputc+0x10>
 748:	8e 81       	ldd	r24, Y+6	; 0x06
 74a:	9f 81       	ldd	r25, Y+7	; 0x07
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	9f 83       	std	Y+7, r25	; 0x07
 750:	8e 83       	std	Y+6, r24	; 0x06
 752:	81 2f       	mov	r24, r17
 754:	90 2f       	mov	r25, r16
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	08 95       	ret

00000760 <__ultoa_invert>:
 760:	fa 01       	movw	r30, r20
 762:	aa 27       	eor	r26, r26
 764:	28 30       	cpi	r18, 0x08	; 8
 766:	51 f1       	breq	.+84     	; 0x7bc <__ultoa_invert+0x5c>
 768:	20 31       	cpi	r18, 0x10	; 16
 76a:	81 f1       	breq	.+96     	; 0x7cc <__ultoa_invert+0x6c>
 76c:	e8 94       	clt
 76e:	6f 93       	push	r22
 770:	6e 7f       	andi	r22, 0xFE	; 254
 772:	6e 5f       	subi	r22, 0xFE	; 254
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	af 4f       	sbci	r26, 0xFF	; 255
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	3e d0       	rcall	.+124    	; 0x7fc <__ultoa_invert+0x9c>
 780:	b4 e0       	ldi	r27, 0x04	; 4
 782:	3c d0       	rcall	.+120    	; 0x7fc <__ultoa_invert+0x9c>
 784:	67 0f       	add	r22, r23
 786:	78 1f       	adc	r23, r24
 788:	89 1f       	adc	r24, r25
 78a:	9a 1f       	adc	r25, r26
 78c:	a1 1d       	adc	r26, r1
 78e:	68 0f       	add	r22, r24
 790:	79 1f       	adc	r23, r25
 792:	8a 1f       	adc	r24, r26
 794:	91 1d       	adc	r25, r1
 796:	a1 1d       	adc	r26, r1
 798:	6a 0f       	add	r22, r26
 79a:	71 1d       	adc	r23, r1
 79c:	81 1d       	adc	r24, r1
 79e:	91 1d       	adc	r25, r1
 7a0:	a1 1d       	adc	r26, r1
 7a2:	20 d0       	rcall	.+64     	; 0x7e4 <__ultoa_invert+0x84>
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <__ultoa_invert+0x48>
 7a6:	68 94       	set
 7a8:	3f 91       	pop	r19
 7aa:	2a e0       	ldi	r18, 0x0A	; 10
 7ac:	26 9f       	mul	r18, r22
 7ae:	11 24       	eor	r1, r1
 7b0:	30 19       	sub	r19, r0
 7b2:	30 5d       	subi	r19, 0xD0	; 208
 7b4:	31 93       	st	Z+, r19
 7b6:	de f6       	brtc	.-74     	; 0x76e <__ultoa_invert+0xe>
 7b8:	cf 01       	movw	r24, r30
 7ba:	08 95       	ret
 7bc:	46 2f       	mov	r20, r22
 7be:	47 70       	andi	r20, 0x07	; 7
 7c0:	40 5d       	subi	r20, 0xD0	; 208
 7c2:	41 93       	st	Z+, r20
 7c4:	b3 e0       	ldi	r27, 0x03	; 3
 7c6:	0f d0       	rcall	.+30     	; 0x7e6 <__ultoa_invert+0x86>
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__ultoa_invert+0x5c>
 7ca:	f6 cf       	rjmp	.-20     	; 0x7b8 <__ultoa_invert+0x58>
 7cc:	46 2f       	mov	r20, r22
 7ce:	4f 70       	andi	r20, 0x0F	; 15
 7d0:	40 5d       	subi	r20, 0xD0	; 208
 7d2:	4a 33       	cpi	r20, 0x3A	; 58
 7d4:	18 f0       	brcs	.+6      	; 0x7dc <__ultoa_invert+0x7c>
 7d6:	49 5d       	subi	r20, 0xD9	; 217
 7d8:	31 fd       	sbrc	r19, 1
 7da:	40 52       	subi	r20, 0x20	; 32
 7dc:	41 93       	st	Z+, r20
 7de:	02 d0       	rcall	.+4      	; 0x7e4 <__ultoa_invert+0x84>
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__ultoa_invert+0x6c>
 7e2:	ea cf       	rjmp	.-44     	; 0x7b8 <__ultoa_invert+0x58>
 7e4:	b4 e0       	ldi	r27, 0x04	; 4
 7e6:	a6 95       	lsr	r26
 7e8:	97 95       	ror	r25
 7ea:	87 95       	ror	r24
 7ec:	77 95       	ror	r23
 7ee:	67 95       	ror	r22
 7f0:	ba 95       	dec	r27
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__ultoa_invert+0x86>
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	61 05       	cpc	r22, r1
 7f8:	71 05       	cpc	r23, r1
 7fa:	08 95       	ret
 7fc:	9b 01       	movw	r18, r22
 7fe:	ac 01       	movw	r20, r24
 800:	0a 2e       	mov	r0, r26
 802:	06 94       	lsr	r0
 804:	57 95       	ror	r21
 806:	47 95       	ror	r20
 808:	37 95       	ror	r19
 80a:	27 95       	ror	r18
 80c:	ba 95       	dec	r27
 80e:	c9 f7       	brne	.-14     	; 0x802 <__ultoa_invert+0xa2>
 810:	62 0f       	add	r22, r18
 812:	73 1f       	adc	r23, r19
 814:	84 1f       	adc	r24, r20
 816:	95 1f       	adc	r25, r21
 818:	a0 1d       	adc	r26, r0
 81a:	08 95       	ret

0000081c <__prologue_saves__>:
 81c:	2f 92       	push	r2
 81e:	3f 92       	push	r3
 820:	4f 92       	push	r4
 822:	5f 92       	push	r5
 824:	6f 92       	push	r6
 826:	7f 92       	push	r7
 828:	8f 92       	push	r8
 82a:	9f 92       	push	r9
 82c:	af 92       	push	r10
 82e:	bf 92       	push	r11
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	ca 1b       	sub	r28, r26
 846:	db 0b       	sbc	r29, r27
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	09 94       	ijmp

00000854 <__epilogue_restores__>:
 854:	2a 88       	ldd	r2, Y+18	; 0x12
 856:	39 88       	ldd	r3, Y+17	; 0x11
 858:	48 88       	ldd	r4, Y+16	; 0x10
 85a:	5f 84       	ldd	r5, Y+15	; 0x0f
 85c:	6e 84       	ldd	r6, Y+14	; 0x0e
 85e:	7d 84       	ldd	r7, Y+13	; 0x0d
 860:	8c 84       	ldd	r8, Y+12	; 0x0c
 862:	9b 84       	ldd	r9, Y+11	; 0x0b
 864:	aa 84       	ldd	r10, Y+10	; 0x0a
 866:	b9 84       	ldd	r11, Y+9	; 0x09
 868:	c8 84       	ldd	r12, Y+8	; 0x08
 86a:	df 80       	ldd	r13, Y+7	; 0x07
 86c:	ee 80       	ldd	r14, Y+6	; 0x06
 86e:	fd 80       	ldd	r15, Y+5	; 0x05
 870:	0c 81       	ldd	r16, Y+4	; 0x04
 872:	1b 81       	ldd	r17, Y+3	; 0x03
 874:	aa 81       	ldd	r26, Y+2	; 0x02
 876:	b9 81       	ldd	r27, Y+1	; 0x01
 878:	ce 0f       	add	r28, r30
 87a:	d1 1d       	adc	r29, r1
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	ed 01       	movw	r28, r26
 888:	08 95       	ret

0000088a <_exit>:
 88a:	f8 94       	cli

0000088c <__stop_program>:
 88c:	ff cf       	rjmp	.-2      	; 0x88c <__stop_program>
