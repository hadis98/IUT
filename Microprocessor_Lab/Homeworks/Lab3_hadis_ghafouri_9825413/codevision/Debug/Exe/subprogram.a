;#include <headers.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;char data_key[]={
;'0','1','2','3',
;'4','5','6','7',
;'8','9','A','B',
;'C','D','E','F'};

	.DSEG
;
;char row[] = { 0x10,0x20,0x40,0x80 };
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0001 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000C    char key;
; 0001 000D    PORTC=~PORTC;
;PCODE: $0000000F VOL: 0
;	key -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000E    key = get_entered_key();
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000F    lcd_gotoxy(0,0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0010    lcd_putchar(get_entered_data(key));
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0011    lcd_gotoxy(0,1);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0012    lcd_puts("interrupt");
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0013 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0

	.DSEG
_0x20005:
	.BYTE 0xA
;
;void init_configs(){
; 0001 0015 void init_configs(){

	.CSEG
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0016 DDRA=0xff;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0017 DDRB=0xf0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0018 DDRC=0xff;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0019 DDRD=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 001A PORTA=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 001B PORTB=0xf0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 001C PORTC=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001D PORTC=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 001E 
; 0001 001F GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0020 MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0021 MCUCSR=(0<<ISC2);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 0022 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0023 lcd_init(16);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0024 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;void q1_show_name(){
; 0001 0026 void q1_show_name(){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0027     lcd_puts("ghafouri\n9825413");
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0028     delay_ms(2000);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0029     lcd_clear();
;PCODE: $0000004E VOL: 0
; 0001 002A }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0

	.DSEG
_0x20006:
	.BYTE 0x11
;
;void q2_show_welcome_message(){
; 0001 002C void q2_show_welcome_message(){

	.CSEG
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 002D     char i =0;
; 0001 002E     char welcome_message[]="Welcome to the Microprocessor lab classes in Isfahan University of Thecnology. ";
; 0001 002F     char display_message[16]="";
; 0001 0030     lcd_clear();
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;	i -> R17
;	welcome_message -> Y+17
;	display_message -> Y+1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0031 
; 0001 0032     for(i=0;i<strlen(welcome_message);i++){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0033         strncpy(display_message,welcome_message+i,15);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0034         lcd_gotoxy(0,1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0035         lcd_puts(display_message);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0036         delay_ms(200);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0037     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0038 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;char get_entered_key(){
; 0001 003A char get_entered_key(){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 003B char key =100;
; 0001 003C char c,r;
; 0001 003D for(r=0;r<4;r++){
;PCODE: $00000086 VOL: 0
;	key -> R17
;	c -> R16
;	r -> R19
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 003E PORTB = row[r];
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 003F c=20;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0040 delay_ms(10);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 0041 if (PINB.0==1) c=0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 0042 if (PINB.1==1) c=1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0043 if (PINB.2==1) c=2;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 0044 if (PINB.3==1) c=3;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 0045 
; 0001 0046  if (c!=20){
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 0047  key=(r*4)+c;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 0048    PORTB=0xf0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 0049   while (PINB.0==1) {}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 004A   while (PINB.1==1) {}
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 004B   while (PINB.2==1) {}
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 004C   while (PINB.3==1) {}
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 004D   return key;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 004E   }
; 0001 004F   }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0050   PORTB = 0xf0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0051   return key;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0052 }
;PCODE: $000000E5 VOL: 0
;
;char get_entered_data(char entered_key){
; 0001 0054 char get_entered_data(char entered_key){
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 0055     return data_key[entered_key];
;PCODE: $000000E8 VOL: 0
;	entered_key -> Y+0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0056 }
;PCODE: $000000EF VOL: 0
;
;void q3_polling(){
; 0001 0058 void q3_polling(){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 0059 
; 0001 005A     char i,key;
; 0001 005B    #asm("cli");
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;	i -> R17
;	key -> R16
;PCODE: $000000F4 VOL: 0
	cli
;PCODE: $000000F5 VOL: 0
; 0001 005C     for(i=0;i<100;i++){
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 005D      if(PINB !=0XF0){
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 005E         lcd_gotoxy(0,0);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 005F         key = get_entered_key();
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0060         lcd_putchar(get_entered_data(key));
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0061         lcd_gotoxy(0,1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 0062         lcd_puts("polling");
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 0063 
; 0001 0064      }
; 0001 0065       delay_ms(100);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 0066     }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 0067      delay_ms(2000);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 0068 
; 0001 0069 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0

	.DSEG
_0x20023:
	.BYTE 0x8
;
;
;int part5_keyscan(int ch, int loc, int func)
; 0001 006D {

	.CSEG
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0001 006E     char str[40], num, str_func[20], str_func1[20],r,c,key;
; 0001 006F     if(ch == -1)
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;	ch -> Y+88
;	loc -> Y+86
;	func -> Y+84
;	str -> Y+44
;	num -> R17
;	str_func -> Y+24
;	str_func1 -> Y+4
;	r -> R16
;	c -> R19
;	key -> R18
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 0070         num = '?';
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 0071     else
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 0072         num = data_key[ch];
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 0073 
; 0001 0074 
; 0001 0075 
; 0001 0076     DDRB = 0xF0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 0077     while(1){
;PCODE: $00000133 VOL: 0
; 0001 0078     r=0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 0079     for (r=0;r<4;r++)
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 007A     {
; 0001 007B         PORTB=row[r];
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 007C         c=20;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 007D         delay_ms(10);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 007E         if (PINB.0==1) c=0;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 007F         if (PINB.1==1) c=1;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 0080         if (PINB.2==1) c=2;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 0081         if (PINB.3==1) c=3;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 0082 
; 0001 0083         if (!(c==20)){
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0001 0084             lcd_clear();
;PCODE: $00000164 VOL: 0
; 0001 0085             key=(r*4)+c;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 0086             PORTB=0xf0;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 0087             while (PINB.0==1) {}
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 0088             while (PINB.1==1) {}
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0001 0089             while (PINB.2==1) {}
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0001 008A             while (PINB.3==1) {}
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 008B             if(loc == 0)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0001 008C             {
; 0001 008D                 lcd_clear();
;PCODE: $00000186 VOL: 0
; 0001 008E                 sprintf(str, "System Init\n %s:%c%c%s", str_func1, data_key[key], num, str_func);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0001 008F                 lcd_puts(str);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0001 0090                 //delay_ms(1000);
; 0001 0091             }
; 0001 0092             if(loc == 1)
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 0093             {
; 0001 0094                 lcd_clear();
;PCODE: $000001A5 VOL: 0
; 0001 0095                 sprintf(str, "System Init\n %s:%c%c%s", str_func1, num, data_key[key], str_func);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 0096                 lcd_puts(str);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 0097                 //delay_ms(1000);
; 0001 0098             }
; 0001 0099             return key;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0001 009A         }
; 0001 009B         PORTB=0xf0;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0001 009C     }
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0001 009D     }
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0001 009E }
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;
;void print_func_details(char function_type, char first_digit,char second_digit)
; 0001 00A1 {
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0001 00A2     char display_message[40], func_valid_range[20], func_type[20];
; 0001 00A3     switch (function_type)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;	function_type -> Y+82
;	first_digit -> Y+81
;	second_digit -> Y+80
;	display_message -> Y+40
;	func_valid_range -> Y+20
;	func_type -> Y+0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0001 00A4     {
; 0001 00A5     case 0:
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0001 00A6         strcpy(func_valid_range, "(0-50r)");
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0001 00A7         strcpy(func_type, "Speed");
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0001 00A8         break;
;PCODE: $000001E6 VOL: 0
; 0001 00A9     case 1:
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00AA         strcpy(func_valid_range, "(0-99s)");
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0001 00AB         strcpy(func_type, "Time");
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0001 00AC         break;
;PCODE: $000001F4 VOL: 0
; 0001 00AD     case 2:
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0001 00AE         strcpy(func_valid_range, "(0-99Kg)");
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0001 00AF         strcpy(func_type, "W");
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0001 00B0         break;
;PCODE: $00000202 VOL: 0
; 0001 00B1 
; 0001 00B2     case 3:
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0001 00B3         strcpy(func_valid_range, "(20-80C)");
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0001 00B4         strcpy(func_type, "Temp");
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0001 00B5         break;
;PCODE: $00000210 VOL: 0
; 0001 00B6     }
;PCODE: $00000211 VOL: 0
; 0001 00B7 
; 0001 00B8     lcd_clear();
;PCODE: $00000212 VOL: 0
; 0001 00B9     sprintf(display_message, "System Init\n %s:%c%c%s", func_valid_range, first_digit, second_digit, func_type);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0001 00BA     lcd_puts(display_message);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0001 00BB }
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0

	.DSEG
_0x20043:
	.BYTE 0x34
;
;void q5_display_info()
; 0001 00BE {

	.CSEG
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 00BF     speed();
;PCODE: $0000022F VOL: 0
; 0001 00C0     //time();
; 0001 00C1     // weight();
; 0001 00C2     // temp();
; 0001 00C3     // lcd_clear();
; 0001 00C4     // lcd_puts("System Init Done\n\tThanks");
; 0001 00C5     // delay_ms(300);
; 0001 00C6     // lcd_clear();
; 0001 00C7 }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;
;
;void speed()
; 0001 00CB {
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 00CC     char speed_first_digit, speed_second_digit, speed_total_num;
; 0001 00CD     char unrecognized_num;
; 0001 00CE     unrecognized_num = '?';
;PCODE: $00000234 VOL: 0
;	speed_first_digit -> R17
;	speed_second_digit -> R16
;	speed_total_num -> R19
;	unrecognized_num -> R18
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0001 00CF     lcd_clear();
;PCODE: $00000237 VOL: 0
; 0001 00D0     lcd_puts("System Init\n Speed:??(0-50r)");
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0001 00D1     //speed1 = part5_keyscan(-1, 0, 0);
; 0001 00D2     if (PORTB != 0XF0)
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0001 00D3     {
; 0001 00D4         lcd_clear();
;PCODE: $0000023E VOL: 0
; 0001 00D5         lcd_puts("fuukkkk");
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0001 00D6         speed_first_digit = get_entered_key();
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0001 00D7         lcd_gotoxy(0, 0);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0001 00D8         lcd_putchar(speed_first_digit);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0001 00D9     }
; 0001 00DA 
; 0001 00DB     // print_func_details(0, speed_first_digit, unrecognized_num);
; 0001 00DC     //speed_second_digit = get_entered_key();
; 0001 00DD     //print_func_details(0, speed_first_digit, speed_second_digit);
; 0001 00DE     // speed_total_num = speed_first_digit*10 + speed_second_digit;
; 0001 00DF     // lcd_puts(speed_total_num);
; 0001 00E0     // while (speed_total_num > 50)
; 0001 00E1     // {
; 0001 00E2     //     lcd_clear();
; 0001 00E3     //     lcd_puts("System Init\n Speed:EE(0-50r)");
; 0001 00E4     //     speed_first_digit = get_entered_key();
; 0001 00E5     //     print_func_details(0, speed_first_digit, unrecognized_num);
; 0001 00E6     //     speed_second_digit = get_entered_key();
; 0001 00E7     //     print_func_details(0, speed_first_digit, speed_second_digit);
; 0001 00E8     //     speed_total_num = speed_first_digit * 10 + speed_second_digit;
; 0001 00E9     // }
; 0001 00EA     // delay_ms(100);
; 0001 00EB }
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0

	.DSEG
_0x20047:
	.BYTE 0x25
;
;
;void time()
; 0001 00EF {

	.CSEG
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 00F0     int time, time1;
; 0001 00F1     lcd_clear();
;PCODE: $00000251 VOL: 0
;	time -> R16,R17
;	time1 -> R18,R19
;PCODE: $00000252 VOL: 0
; 0001 00F2     lcd_puts("System Init\n Time:??(0-99s)");
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0001 00F3     time1 = part5_keyscan(-1, 0, 1);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0001 00F4     time = time1 * 10;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 00F5     time += part5_keyscan(time1, 1, 1);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0001 00F6     while(time > 99)
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0001 00F7     {
; 0001 00F8         lcd_clear();
;PCODE: $0000026E VOL: 0
; 0001 00F9         lcd_puts("System Init\n Time:EE(0-99s)");
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 00FA         time1 = part5_keyscan(-1, 0, 1);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0001 00FB         time = time1 * 10;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0001 00FC         time += part5_keyscan(time1, 1, 1);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 00FD     }
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0001 00FE     delay_ms(100);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0001 00FF }
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0

	.DSEG
_0x20049:
	.BYTE 0x38
;
;
;
;void weight()
; 0001 0104 {

	.CSEG
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0001 0105     int w, w1;
; 0001 0106     lcd_clear();
;PCODE: $00000291 VOL: 0
;	w -> R16,R17
;	w1 -> R18,R19
;PCODE: $00000292 VOL: 0
; 0001 0107     lcd_puts("System Init\n W:??(0-99Kg)");
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0001 0108     w1 = part5_keyscan(-1, 0, 2);
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0001 0109     w = w1 * 10;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0001 010A     w += part5_keyscan(w1, 1, 2);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0001 010B     while(w > 99)
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0001 010C     {
; 0001 010D         lcd_clear();
;PCODE: $000002AE VOL: 0
; 0001 010E         lcd_puts("System Init\n W:EE(0-99Kg)");
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0001 010F         w1 = part5_keyscan(-1, 0, 2);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0001 0110         w = w1 * 10;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0001 0111         w += part5_keyscan(w1, 1, 2);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0001 0112     }
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0001 0113     delay_ms(100);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0001 0114 }
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0

	.DSEG
_0x2004D:
	.BYTE 0x34
;
;
;void temp()
; 0001 0118 {

	.CSEG
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0001 0119     int temp, temp1;
; 0001 011A     lcd_clear();
;PCODE: $000002D1 VOL: 0
;	temp -> R16,R17
;	temp1 -> R18,R19
;PCODE: $000002D2 VOL: 0
; 0001 011B     lcd_puts("System Init\n Temp:??(20-80C)");
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0001 011C     temp1 = part5_keyscan(-1, 0, 3);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0001 011D     temp = temp1 * 10;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0001 011E     temp += part5_keyscan(temp1, 1, 3);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0001 011F     while(temp > 80 || temp < 20)
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0001 0120     {
; 0001 0121         lcd_clear();
;PCODE: $000002F3 VOL: 0
; 0001 0122         lcd_puts("System Init\n Temp:EE(20-80C)");
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0001 0123         temp1 = part5_keyscan(-1, 0, 3);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0001 0124         temp = temp1 * 10;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0001 0125         temp += part5_keyscan(temp1, 1, 3);
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0001 0126     }
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0001 0127     delay_ms(100);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0001 0128 }
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0

	.DSEG
_0x20051:
	.BYTE 0x3A
;
;
