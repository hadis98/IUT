;#include "headers.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;char *output_time = "  :  :  ";

	.DSEG
_0x60003:
	.BYTE 0x9
;
;int hour = 5;
;int minute = 50;
;int second = 40;
;
;float get_radian(float degree)
; 0003 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 000B     return degree * (3.14 / 180.0);
;PCODE: $0000000F VOL: 0
;	degree -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 000C }
;PCODE: $00000015 VOL: 0
;
;int get_clock_unit_x2(int x1, int amount, char time_unit)
; 0003 000F {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0003 0010     int x2;
; 0003 0011 
; 0003 0012     switch (time_unit)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	x1 -> Y+5
;	amount -> Y+3
;	time_unit -> Y+2
;	x2 -> R16,R17
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0013     {
; 0003 0014     case 's': //* second
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 0015         x2 = x1 + (27 * sin(get_radian(6 * amount)));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0016         break;
;PCODE: $0000002E VOL: 0
; 0003 0017 
; 0003 0018     case 'm': //* minute
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 0019         x2 = x1 + (23 * sin(get_radian(6 * amount)));
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 001A         break;
;PCODE: $00000041 VOL: 0
; 0003 001B 
; 0003 001C     case 'h': //* hour
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 001D         x2 = x1 + (18 * sin(get_radian(30 * amount)));
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0003 001E         break;
;PCODE: $00000054 VOL: 0
; 0003 001F 
; 0003 0020     default:
;PCODE: $00000055 VOL: 0
; 0003 0021         break;
;PCODE: $00000056 VOL: 0
; 0003 0022     }
;PCODE: $00000057 VOL: 0
; 0003 0023 
; 0003 0024     return x2;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 0025 }
;PCODE: $0000005F VOL: 0
;
;int get_clock_unit_y2(int y1, int amount, char time_unit)
; 0003 0028 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 0029     int y2;
; 0003 002A 
; 0003 002B     switch (time_unit)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;	y1 -> Y+5
;	amount -> Y+3
;	time_unit -> Y+2
;	y2 -> R16,R17
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0003 002C     {
; 0003 002D     case 's': //* second
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0003 002E         y2 = y1 - (27 * cos(get_radian(6 * amount)));
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0003 002F         break;
;PCODE: $00000079 VOL: 0
; 0003 0030 
; 0003 0031     case 'm': //* minute
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0003 0032         y2 = y1 - (23 * cos(get_radian(6 * amount)));
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0003 0033         break;
;PCODE: $0000008D VOL: 0
; 0003 0034 
; 0003 0035     case 'h': //* hour
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0003 0036         y2 = y1 - (18 * cos(get_radian(30 * amount)));
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0003 0037         break;
;PCODE: $000000A1 VOL: 0
; 0003 0038 
; 0003 0039     default:
;PCODE: $000000A2 VOL: 0
; 0003 003A         break;
;PCODE: $000000A3 VOL: 0
; 0003 003B     }
;PCODE: $000000A4 VOL: 0
; 0003 003C 
; 0003 003D     return y2;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0003 003E }
;PCODE: $000000AC VOL: 0
;
;void draw_clock_lines(int amount, char time_unit)
; 0003 0041 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0003 0042 
; 0003 0043     //* glcd_line(x1,y1,x2,y2);
; 0003 0044     int x1, x2, y1, y2;
; 0003 0045     x1 = 32;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;	amount -> Y+9
;	time_unit -> Y+8
;	x1 -> R16,R17
;	x2 -> R18,R19
;	y1 -> R20,R21
;	y2 -> Y+6
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0003 0046     y1 = 31;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 0047 
; 0003 0048     switch (time_unit)
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0003 0049     {
; 0003 004A     case 's': //* second
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0003 004B         x2 = get_clock_unit_x2(x1, amount, 's');
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0003 004C         y2 = get_clock_unit_y2(y1, amount, 's');
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0003 004D         break;
;PCODE: $000000C6 VOL: 0
; 0003 004E 
; 0003 004F     case 'm': //* minute
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0003 0050         x2 = get_clock_unit_x2(x1, amount, 'm');
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0003 0051         y2 = get_clock_unit_y2(y1, amount, 'm');
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0003 0052         break;
;PCODE: $000000D6 VOL: 0
; 0003 0053 
; 0003 0054     case 'h': //* hour
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0003 0055         x2 = get_clock_unit_x2(x1, amount, 'h');
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0003 0056         y2 = get_clock_unit_y2(y1, amount, 'h');
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0003 0057         break;
;PCODE: $000000E6 VOL: 0
; 0003 0058 
; 0003 0059     default:
;PCODE: $000000E7 VOL: 0
; 0003 005A         break;
;PCODE: $000000E8 VOL: 0
; 0003 005B     }
;PCODE: $000000E9 VOL: 0
; 0003 005C 
; 0003 005D     glcd_line(x1, y1, x2, y2);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0003 005E }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;
;void update_clock()
; 0003 0061 {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0003 0062     glcd_clear();
;PCODE: $000000F5 VOL: 0
; 0003 0063     draw_clock_lines(second, 's');
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0003 0064     draw_clock_lines(minute, 'm');
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0003 0065     draw_clock_lines(hour, 'h');
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0003 0066 
; 0003 0067     sprintf(output_time, "%d:%d:%d   ", hour, minute, second);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0003 0068     glcd_outtextxy(70, 40, output_time);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0003 0069 
; 0003 006A     glcd_outtextxy(30, 50, " "); // should be here
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0003 006B     glcd_outtextxy(30, 50, "6");
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0003 006C     glcd_outtextxy(54, 30, "3");
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0003 006D     glcd_outtextxy(4, 31, "9");
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0003 006E     glcd_outtextxy(27, 3, "12");
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0003 006F 
; 0003 0070     glcd_circle(32, 31, 30);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0003 0071     //* 32 = x specifies the horizontal coordinate of the circle's center
; 0003 0072     //* 31 = y specifies the vertical coordinate of the circle's center
; 0003 0073     //* 30 = specifies the circle's radius
; 0003 0074 }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0

	.DSEG
_0x60019:
	.BYTE 0xB
;
;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
; 0003 0077 {

	.CSEG
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0003 0078     // Reinitialize Timer1 value
; 0003 0079     TCNT1H = 0x85EE >> 8;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0003 007A     TCNT1L = 0x85EE & 0xff;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0003 007B 
; 0003 007C     second++;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0003 007D     if (second == 60)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0003 007E     {
; 0003 007F         second = 0;
;PCODE: $0000014D VOL: 0
; 0003 0080         minute++;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 0081         if (minute == 60)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0003 0082         {
; 0003 0083             minute = 0;
;PCODE: $00000154 VOL: 0
; 0003 0084             hour++;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0003 0085             if (hour == 12)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0003 0086             {
; 0003 0087                 hour = 0;
;PCODE: $0000015B VOL: 0
; 0003 0088             }
; 0003 0089         }
;PCODE: $0000015C VOL: 0
; 0003 008A     }
;PCODE: $0000015D VOL: 0
; 0003 008B     update_clock();
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0003 008C }
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
