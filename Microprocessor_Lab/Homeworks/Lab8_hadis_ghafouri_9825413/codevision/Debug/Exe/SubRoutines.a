;#include "headers.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "clock.h"
;
;int i, j;
;
;const unsigned short Lab8_Q1_HG[] = {
;    // 32 numbers =>index = [0,31]
;    0x07, 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, // Code for char H
;    0x07, 0x00, 0x7E, 0x42, 0x42, 0x52, 0x52, 0x72, 0x00, // Code for char G
;    0x07, 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, // Code for char H
;    0x07, 0x00, 0x7E, 0x42, 0x42, 0x52, 0x52, 0x72, 0x00, // Code for char G
;};
;
;unsigned char R_data[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

	.DSEG
;
;int config_portD(int a, int b)
; 0004 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0012     if (b - a < 8)
;PCODE: $0000000F VOL: 0
;	a -> Y+2
;	b -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0004 0013         return 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0004 0014     return 1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0004 0015 }
;PCODE: $0000001C VOL: 0
;
;int config_portA(int index) // PORTA works as Rows in font matrix
; 0004 0018 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0004 0019     //(j - i) % 8 = 0 1 2 3 4 5 6 7 => row { Decimal: 1 2 4 8 16 32 64 128 # Hex: 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x ...
; 0004 001A     return R_data[index];
;PCODE: $0000001F VOL: 0
;	index -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0004 001B }
;PCODE: $00000026 VOL: 0
;
;void subRoutine1()
; 0004 001E {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0004 001F 
; 0004 0020     for (i = 0; i < 16; i++)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0004 0021     {
; 0004 0022         for (j = i; j < i + 16; j++)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0004 0023         {
; 0004 0024             PORTD.7 = config_portD(i, j);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0004 0025             PORTA = config_portA((j - i) % 8);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0004 0026             PORTB = Lab8_Q1_HG[j]; // Columns in font matrix
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0004 0027             delay_ms(3);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0004 0028         }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0004 0029         delay_ms(7);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0004 002A     }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0004 002B }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void subRoutine2()
; 0004 002E {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0004 002F     glcd_putimagef(0, 0, new_image, GLCD_PUTCOPY);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0004 0030 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;void subRoutine3()
; 0004 0033 {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0004 0034     // _timer_init_();
; 0004 0035 #asm("sei");
;PCODE: $0000007B VOL: 0
	sei
;PCODE: $0000007C VOL: 0
; 0004 0036     update_clock();
;PCODE: $0000007D VOL: 0
; 0004 0037 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
